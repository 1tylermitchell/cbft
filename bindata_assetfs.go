package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_css_cbft_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x78\x91\xdd\x45\x64\x38\x7e\xc5\x96\x71\x03\xdc\x1a\x28\xb2\x09\xba\xe8\xb2\xe8\x82\x12\x87\xd6\xc0\x14\x49\x50\xf4\x2b\x45\xff\xbd\x94\x48\xdb\xb2\xfc\x88\xdc\x76\x65\x91\xf4\x9c\x39\x33\x73\x66\xc8\x6e\x22\x60\x0d\x6f\x8a\x51\x41\xba\x79\xf9\x13\x25\x8a\xed\x48\x97\x2b\x93\x47\x0b\xa3\x56\x9a\xfc\xe8\x10\xa2\x29\x63\x28\x17\xee\xd0\x5a\x95\xc7\xe4\xa9\xa7\xb7\xb3\xce\xcf\x4e\xa7\x8b\x92\xc1\xf6\x8d\x6a\xed\x8e\x49\x97\xca\xc5\x4a\x50\x13\xad\x30\xb2\x06\x20\xca\xa8\x64\x02\x2a\x08\x42\x12\x9a\x2e\x4b\x48\xc9\x62\xf2\xc0\x27\x9c\x72\x3e\xf3\x07\xca\x30\x30\x0e\x55\x6f\x49\xa1\x04\x32\xf2\xc0\x28\xf4\x81\xfa\xe3\x54\x09\xe5\x4e\x1f\x9e\xd3\x29\x24\x7d\xbf\x17\x08\x79\x26\x77\xd2\x89\x33\xb5\x06\x13\x48\xed\xc1\x87\x83\x09\x24\xd3\xd9\x05\xa2\x43\x3e\xe6\xcf\x75\xa2\xd1\xde\x86\xa5\x8e\xe4\xa4\x8d\x63\x2d\x68\x0a\x99\x12\xec\xe0\xf7\xd4\x47\x8f\x4f\x9b\xc9\xe8\xbb\xb8\x18\x2d\x32\x70\xd9\x48\x80\xf5\x59\xe2\xcf\xa3\x0d\x24\x4b\xb4\xae\x14\xdb\xa8\xc0\xf7\x2a\x09\x81\x97\xdb\x0a\xff\xc9\xd5\xfb\xcd\x3f\x5c\x3b\x3b\x8f\xa4\x5a\xcd\xa9\x4c\x41\xcc\x0d\x50\xeb\x8b\x99\x53\xb3\x40\x19\x59\xa5\x1d\xd1\x2a\xf9\x87\xbd\xbd\x44\x06\x57\x6a\x52\x40\x6a\x51\xc9\xc3\xc7\x2b\xd0\x7d\x56\xea\xa8\xd7\x4a\xda\x34\xff\x54\xca\xf5\xcc\x78\x74\x17\xa5\x7c\xff\x91\x58\x59\xc7\x32\xb8\xc8\xec\x75\x2a\x75\x33\x57\x66\x57\xab\x0b\xc6\xfd\x51\x5b\xe3\x9a\x2c\xf7\x02\xe3\x5e\x14\x47\xad\x1c\xa5\x37\x1d\x0d\x86\xfe\xb0\xa1\xc9\xe1\x80\x0f\xe8\x2d\x8f\x82\x26\x20\x2a\x37\x5c\x49\xeb\xe4\xe4\x89\x4a\xd7\xf1\x54\xd4\xb2\x26\x80\xb7\x09\x9e\x5a\x6b\x8a\x5b\x70\xd5\xb6\x13\x1b\xc4\x64\xaa\xed\x4d\xac\xf0\xf1\xea\xa7\x46\x05\x3d\x77\xd6\x46\x09\xef\x61\x8d\x05\x26\x28\xd0\xee\x62\x92\x21\x63\x20\xdb\xc3\x85\xf4\x9e\x80\x3e\x5e\x31\xed\x02\x43\x7b\x37\x23\x94\x19\x18\xbc\x1d\x21\x47\x10\x2c\xfc\xfc\xad\x30\xcf\x31\xef\x89\x35\x18\x1e\x43\x6e\xcf\xad\x4d\xc0\x8d\x04\x96\x5e\xfe\x77\x73\xe4\xe4\x56\xf1\x4a\xfb\xb0\x3b\x7d\x9c\x5e\xbe\x2f\xa4\xd0\xd4\x37\x2b\xc3\xc2\x8d\xd7\x8a\x8e\x40\x09\x51\x22\x54\xba\x2c\x85\x67\x61\x6b\x23\x2a\x70\x21\x63\x52\x75\x63\x25\x6e\xa7\xec\x0d\x32\x9b\xc5\x64\x02\x79\x5b\x7f\x31\x47\x53\xd8\x28\xcd\xd0\xed\xa0\xd4\x2b\xfb\xcd\xee\x34\xfc\x97\x66\x90\x2e\xdd\xe4\xfc\x5e\xef\x7c\x1f\xce\xf4\x26\xfa\x21\xdd\x2f\xe4\xdf\xc7\x66\x09\xdc\x5e\x85\x77\xf1\x1e\xba\x4e\xb8\xc6\xab\x0c\xdd\x73\x0a\xb1\xf6\x7b\x1f\x04\xab\x95\x5e\xe9\xb2\xd2\xd4\xe5\xd0\x4f\x21\xad\x0a\x2c\x47\xac\xcb\x1e\x08\x6a\x71\x0d\xb3\x7a\xba\x8f\x79\x2e\x47\x6e\xb8\x04\x7c\xec\x61\x51\x8a\x90\x0b\xb5\x89\xbd\x6a\x04\x7c\xcc\xa0\xe1\x98\x26\xee\x3d\xb0\xb2\xb7\x1c\x3f\x75\x47\x65\x68\x84\x84\x81\x1b\xf5\xfd\xf2\xc2\xa3\x62\x3c\x1e\xcf\x1a\x69\xdd\x64\xe8\xd1\x0f\x0f\x8a\x51\x78\x4f\x1c\x3e\x66\xd7\x47\x5b\x65\x1d\x39\x25\xa6\x50\x6e\x6f\x0c\xd5\xe5\xf6\x7b\x54\x85\x58\x0e\xcf\xde\xa5\x90\xd7\x08\x9b\x2f\x52\xec\x7c\x3b\xd0\x24\xbc\x90\xce\xdb\x9e\xfc\x83\xb9\x56\xc6\x52\x79\xb1\xc9\x0e\x38\xc9\xca\x5d\x70\xf2\xf7\x40\xb4\x51\x1a\x8c\x45\x28\xbe\x86\xab\xb5\x7d\x6b\xee\xbb\xf9\xb3\x9f\x40\x27\xcb\x79\x68\x0d\x28\x6a\x37\x4e\xb3\x86\x7f\x08\x79\x57\x27\xfe\x0a\x00\x00\xff\xff\x6d\x6a\xf3\x97\xec\x0a\x00\x00")

func staticx_css_cbft_css_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_css_cbft_css,
		"staticx/css/cbft.css",
	)
}

func staticx_css_cbft_css() (*asset, error) {
	bytes, err := staticx_css_cbft_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/css/cbft.css", size: 2796, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_index_ft_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\x6b\x6f\xdb\x36\x17\xfe\x9e\x5f\xc1\x57\x28\x6a\x07\xb0\xac\xb7\xed\x30\x0c\xf1\x05\xe8\xd2\x6d\x08\xb6\xb6\x01\x96\x62\x18\x8a\xc2\xa0\xa4\x23\x9b\x0d\x25\x6a\x24\x65\xc7\x6d\xf3\xdf\x77\x48\xdd\x6d\x29\x51\x82\x00\xdb\x52\x20\xa2\x78\xae\x7c\xce\x73\x48\xaa\x99\xff\xef\xcd\xfb\xf3\xab\x3f\x2f\x7f\x22\x1b\x1d\xf3\xe5\xc9\xdc\x3c\x08\xa7\xc9\x7a\xe1\x40\xe2\x98\x09\xa0\xe1\xf2\x84\x90\x79\x0c\x9a\x92\x60\x43\xa5\x02\xbd\x70\x32\x1d\xb9\x3f\x38\x56\xe0\x53\x05\x64\x23\x21\x5a\x38\x1e\xce\x98\x29\xcd\x34\x87\x65\xe0\x47\x9a\x78\x84\x25\x21\xdc\xbc\x9c\x7b\xf9\xa4\x95\x73\x96\x5c\x97\x26\x4a\x53\xcd\x02\x2f\x50\xca\xa3\x69\x3a\xc5\xa7\x43\x24\xf0\x85\xa3\xf4\x9e\x83\xda\x00\x68\xc7\x5b\xde\x61\x95\x4a\xa6\xe2\x47\xd8\xf9\x42\x68\xa5\x25\x7d\x4c\xcc\x90\xaa\x8d\x2f\xa8\x0c\x1f\x61\x2b\x59\x70\xad\x36\x74\x37\x8d\x59\xd2\x6b\xde\x63\xcf\x99\xef\x61\x71\x32\x4e\xa5\x9b\x31\x57\x4b\x00\x2f\x64\x4a\x1f\x4e\x0e\xf3\x7d\x28\x6b\x07\xbb\xb1\xd9\x9a\x22\x5a\x4f\xc7\x86\x1b\x21\x75\x90\x69\xc2\x02\x91\x1c\xd8\x7a\x11\xdd\x9a\xe9\x29\xfe\x32\x96\x73\x2f\xe7\xd1\xdc\x17\xe1\x9e\x24\x6b\x17\x4b\xbd\x70\x02\x7f\xad\x5f\xa7\x69\x4e\xa3\x90\x6d\x49\xc0\xa9\x52\x38\x2f\x12\x4d\x59\x02\xd2\x4a\xda\x32\x29\x76\xc5\xec\xa1\x0d\x77\x55\xec\xbe\xf8\x3f\x29\x46\x22\x8a\x90\xa9\xee\x0b\x12\xa3\xab\xca\xa4\x30\xc2\x0c\xb6\x0c\x76\xcb\x39\xa2\xb7\xad\xdc\xd5\x2f\xd5\xb0\x18\xcc\x3d\x93\x78\x8e\x80\x0a\x24\x4b\x35\x51\x32\x68\xd7\xe5\xf3\x5f\x19\xc8\x7d\xf1\x70\x5f\x4e\x5f\xe0\xbf\xcf\xca\xc1\x18\xb9\xc5\x72\xb8\x71\xc6\x6c\x01\x07\x5b\x87\xaf\xa6\xdb\x57\xc3\xd5\x5b\x0c\x1c\x6c\xb5\xc9\x62\x9a\xb0\x2f\xf0\x30\xab\xaa\xcb\x1a\xfd\x36\xd8\xb8\x60\x75\xf9\x7c\xb0\xa1\x5b\x47\xc7\xc6\xa8\x13\x78\xd0\x0a\xee\xf6\xe5\xea\x94\xab\xc7\x39\x94\x22\xd3\xd0\x7e\x7b\x9c\xa3\x7b\x77\x82\xe1\x34\x54\x22\x49\x05\x4b\x34\x3c\x00\xec\x7c\x03\x6e\xab\xf7\xe9\x7f\x56\x1e\xdc\xa4\xdb\xa1\xb5\x44\x75\x7b\x7c\x0c\xd6\x4e\x44\x08\x83\x95\x63\x91\x30\x2d\x86\xa7\x82\xfc\xa7\xeb\xe1\xee\xb9\x58\xab\xc1\xca\xb6\xf1\x07\x6b\xfb\xdf\x7f\x37\x1c\xf0\x88\x71\xac\xe7\xf0\x54\x14\x48\xdc\xbc\x61\xb8\x41\xc8\x24\x04\x9a\x6d\x8f\x4c\x7a\x6c\x5c\x9f\xc3\x16\xdc\x18\x0f\x01\x96\xac\x73\x64\xf3\xa1\x2d\x76\x29\x18\x14\xbf\xdf\x97\xde\xa7\xd0\xe3\xea\xc1\xbe\xb0\xf0\x7c\xaf\xd8\x30\x48\xee\x77\xe3\xda\xc1\x97\x81\x4d\x36\xc0\xdf\x4e\xc8\x90\x63\xf7\x3f\x95\x3f\x73\xcf\xcb\x69\xf3\x54\x1e\xb5\xb8\x06\x73\x7a\x3c\xad\xc3\xce\x1c\x7b\x7c\xde\x58\xaa\x82\x9f\x0d\x64\x83\x51\x37\x37\xd2\xa1\x5d\x60\x6e\x2d\x52\x70\x7e\xdc\x6a\x27\xf3\x72\x14\x65\x09\x36\x8a\x48\x88\x5d\xdf\x3b\xd8\x5d\x18\xc2\xbf\xcd\xd7\x36\x3e\x25\x5f\xed\xed\x43\x82\xce\x64\x52\xbc\x98\x1f\xc7\x70\x59\x39\x67\xe4\xeb\xed\xa4\x9e\x0c\x21\xa2\x19\xd7\xab\x02\x1a\x23\xae\x84\x56\x01\x12\x8a\x71\x42\x14\x68\x99\xc1\xa4\x2d\x0c\xf7\x09\x8d\x59\x50\x08\x2b\x59\x33\x80\x89\xba\x8a\x18\x70\xe3\xc2\x59\x99\x57\xa7\x23\xbe\x9d\x37\x0a\xc5\x44\x97\x4e\x49\x78\xa3\x87\x90\x25\x21\xde\x9d\xbb\xf4\x42\xaa\x41\xb3\x18\x56\xa9\xf9\xd0\xb0\xea\x66\xea\x0a\xa7\xde\xa7\x06\x39\xca\xbb\xcc\xea\x24\x29\x6f\x29\xf8\x7b\x0d\x2b\x2a\x25\xdd\xaf\xb0\x3e\x5b\x90\x3a\x77\x6a\x0e\xba\xa6\x5e\x49\xab\x63\x10\xcb\xcc\x0f\xe1\xb7\x42\xd3\x27\xab\x62\x7f\xed\x92\x57\xac\xef\x97\xde\x6b\x6e\xea\x9b\x4b\xeb\x22\x9d\xe4\xbf\x6f\x67\x27\x07\x94\xba\xb4\x84\xba\xc0\x73\xed\xbc\xa2\xe3\x98\xe1\xeb\xaf\xb8\xb5\x4e\xf2\x6f\xb1\x4b\x2a\x69\xac\x8a\x97\x0f\x17\x79\xcc\x67\x2a\x10\x29\x4c\xc8\xb3\x8d\xd6\x29\x3e\xec\x75\xa4\x7c\x96\x16\xcf\xb8\x08\xa8\x09\x66\x87\xeb\x89\xb1\x32\x4a\x19\xf3\xdf\x8a\x90\xf2\x92\xc0\x2c\x22\x55\x50\xb2\x58\x10\xc7\x5c\xb6\x9d\xd3\x06\xb4\x79\xb8\xa9\x99\x7f\x9f\xf0\x3d\x59\x58\x16\xce\x8a\x75\x35\x32\x9a\xda\x2c\xaf\x20\x4e\x39\xf2\x40\xa1\x62\xf7\xfc\xb7\x6f\x08\xd0\xac\xdf\xf0\xa3\x63\xf1\x71\x3e\x91\x45\x5d\xf5\xee\xdd\x06\xa9\xa7\x19\xe5\x7d\xa7\x92\xf9\x44\x76\x66\x79\x8e\x78\x91\x21\xc5\x3c\x66\xd6\xdd\xd4\xb3\x06\x24\x15\xfa\xe4\xf9\xf3\x2a\x8d\xc6\xf4\xb4\x70\xd6\x84\xaa\xf6\xdf\xa1\xd8\x42\xcc\x64\xc3\xe2\xc0\x6a\x32\xfd\xa3\xc9\xa6\x99\x4a\x83\x11\x07\x75\xa8\xcb\x9e\x57\xb5\xac\xe7\xa4\x0c\x5e\xf3\xb2\xdd\x1d\x65\x73\xbc\xa3\x31\xa8\x33\x92\x64\x9c\xb7\x29\x6c\x9b\x17\xf7\x87\x4b\xdb\xce\xbd\x6a\xa6\x4d\x5f\x9b\x2e\x3d\x2f\x9b\xb4\x53\xf5\xf6\x74\xd6\xe2\x86\x7f\xb8\x44\x5c\x7a\xd9\x0f\xe3\x26\x86\xc5\x8e\x8a\xe0\xe4\xb4\x38\x28\x0e\x76\x52\x77\x23\xbd\x11\x09\x34\x60\x0b\xf1\xf5\x1f\x68\xa4\x2a\x54\x73\x49\x1d\x64\xa8\x9b\xe3\x08\x98\xd6\x4a\xcb\xcf\xa9\x58\x84\x19\x87\xf1\xa8\xf8\x0e\x1f\x9d\x4e\xad\x4e\x7d\x90\x8d\x47\x96\x44\xaf\x8b\x2a\xdb\xd4\xce\xb5\xe4\xa3\x09\xe9\x16\xf4\x79\x38\xc7\x7d\xf2\x67\xbb\xcf\x1d\xf9\xe8\x10\xf5\x79\xb9\x2a\x77\xd3\x23\x27\xc7\x92\x3b\x7d\xf4\xa4\xd2\x25\xeb\xf3\xf3\x07\xde\xb8\x7e\xc3\x1b\xd7\x91\x93\x23\x81\xe1\xec\xfd\x88\x47\x6c\x3d\xfe\x38\x2a\x58\x22\xc5\x96\x85\x20\x47\x35\xf3\x2b\x56\xb7\x35\x4e\x0f\xfa\xb1\x2d\x9d\xee\x36\x90\x8c\x47\xf9\xa5\xc7\x1b\xb5\x5b\xce\x36\xb3\x2e\xb6\xc7\x0f\x92\x9f\x91\x51\x75\x51\xaa\x76\xc0\xfc\xba\x64\x76\xbc\x0e\xeb\x06\x28\x68\xfc\xc6\xa8\x5a\x20\x6e\x0b\xae\x59\xbe\x7d\x32\xcb\xf7\x3c\xe2\x3e\xc5\xcf\xdd\x40\xf6\xa2\x48\x46\x55\xbf\x35\xa1\xed\xc1\xb4\xd1\x9d\x6d\x98\xbb\xc1\xb5\x7d\x08\xaa\x0b\xde\x81\x20\x5b\x0f\x5e\xa4\x3d\x7b\x83\xef\x03\xbb\x03\xf2\x8b\x3c\x74\x03\xf4\xbb\x53\x5c\x25\xb0\x7b\x82\x34\xd1\xcb\x83\xb3\xc4\x53\x71\x70\x9a\x67\x76\x60\x0e\x00\x6f\x05\x21\xd3\xff\xb1\x94\x03\x8e\xa7\xc4\xbf\x20\x67\xdb\x7a\xad\x8f\x10\xf3\x3f\xbd\xcb\x93\x69\x24\x64\xfc\x0b\x2e\x27\xb5\x26\xe6\x74\xb6\xf4\x0e\x99\xc2\xc4\xf6\x78\xe6\x62\xfe\x33\x73\x4e\xd4\x9a\xbf\x8b\x4c\x06\xd0\xaf\x8a\x61\x72\xe7\x73\x2f\xff\x43\xc2\xdf\x01\x00\x00\xff\xff\xa7\xb8\xe4\x22\x59\x18\x00\x00")

func staticx_index_ft_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_ft_html,
		"staticx/index-ft.html",
	)
}

func staticx_index_ft_html() (*asset, error) {
	bytes, err := staticx_index_ft_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index-ft.html", size: 6233, mode: os.FileMode(420), modTime: time.Unix(1447114212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x19\x69\x6f\xdb\x38\xf6\x7b\x7e\x05\x57\x5b\xd4\x09\x60\x59\xdb\xed\x62\x31\x48\xec\x00\x99\x64\x8e\x62\x7a\xe4\x43\x8a\xc1\xa0\x28\x02\x4a\xa4\x64\xb6\x14\xa9\x21\x29\x27\x6e\x9b\xff\x3e\x8f\xd4\x61\x9d\x89\x9c\x69\x30\x2e\x10\x51\x7c\x27\xdf\x4d\x75\xf9\xaf\x8b\x77\xe7\x57\x7f\x5c\xfe\x84\xd6\x26\xe5\xa7\x07\x4b\xfb\x40\x1c\x8b\x64\xe5\x51\xe1\xd9\x0d\x8a\xc9\xe9\x01\x42\xcb\x94\x1a\x8c\xa2\x35\x56\x9a\x9a\x95\x97\x9b\xd8\xff\xc1\x73\x80\x10\x6b\x8a\xd6\x8a\xc6\x2b\x2f\x80\x1d\xbb\x65\x98\xe1\xf4\x34\x0a\x63\xb3\x0c\x8a\xb5\xdb\xe6\x4c\x7c\xae\x30\xb5\xc1\x86\x45\x41\xa4\x75\x80\xb3\x6c\x01\x4f\x0f\x29\xca\x57\x9e\x36\x5b\x4e\xf5\x9a\x52\xe3\x05\xa7\xf7\x50\x65\x8a\xe9\xf4\x11\x74\xa1\x94\x46\x1b\x85\x1f\x23\x93\x60\xbd\x0e\x25\x56\xe4\x11\xb4\x8a\x45\x9f\xf5\x1a\xdf\x2c\x52\x26\x46\xc9\x47\xe8\x39\x0b\x03\xf0\x49\xce\xb1\xf2\x73\xe6\x1b\x45\x69\x40\x98\x36\xdd\xcd\x69\xbc\xbb\xb0\xb6\xb0\x5b\xa7\xad\xf5\x9d\xe3\xd4\x27\x5c\x4b\x65\xa2\xdc\x20\x16\x49\xd1\xa1\x0d\x62\xbc\xb1\xdb\x0b\xf8\x63\x29\x97\x41\x11\x3e\xcb\x50\x92\x2d\x12\x89\x0f\xae\x5e\x79\x51\x98\x98\xb3\x2c\x2b\xa2\x87\xb0\x0d\x8a\x38\xd6\x1a\xf6\xa5\x30\x98\x09\xaa\x1c\xa4\x0d\x13\x78\x13\x62\x85\x8a\x87\xcf\xc4\x86\x42\x1c\x56\xaf\x31\xbb\xa5\xc4\x37\x32\x83\x73\x4b\x4e\x1d\x36\x4b\x40\x21\x29\x4a\x56\xf7\x0b\x1a\x16\xe6\x5b\xdd\x5b\x38\x80\x85\x2b\x1c\x09\x1a\x30\x42\xfd\x50\x61\x41\xbc\x46\xfc\xa3\xc6\x6f\xc9\xd2\xa4\x22\xe0\x32\x91\x1e\xd2\x2a\xda\x59\x0b\xa0\x60\xe8\x45\x26\x92\x22\x74\x6a\xb2\x00\x37\x14\x03\x4f\x6f\x1a\xaf\x39\x6f\xa8\x59\x59\x00\x1e\x6d\x3d\x39\x3b\x05\x5d\x4b\xad\x98\x20\xf4\x96\x6a\xd0\xee\x55\xb1\xb2\x02\x96\x10\x55\x4d\x29\x39\xff\x7b\x42\x84\x24\x4e\xc4\x5b\xfb\x7c\x0a\x01\xa9\x14\xcc\x48\x05\x22\xde\x14\xab\x27\x11\x82\x05\x4e\xa8\x95\xe1\x16\x4f\x21\x02\x02\xc1\xda\xe9\x35\x3c\x1e\xcd\xbe\x5a\x2a\x96\xac\x4d\x57\x56\x45\x42\x94\xcc\x88\xbc\x11\xdd\xa0\xc4\x5d\x04\x48\x9d\x24\xe1\xd4\x43\x04\x1b\x5c\xbe\x34\xc8\x5b\xd4\xf0\x2b\xce\xf1\xef\x2a\xd9\xc2\xdc\x18\x5b\x09\xb0\x62\xd8\xa7\xb7\x19\xe4\x03\x25\x2b\x2f\xc6\x5c\xd3\x8e\x68\xf8\xfd\x4a\x79\x86\x96\x1a\xb0\xea\x6c\xc4\x0a\x8a\x10\xd8\xc1\x6e\x76\x54\x6d\x26\x42\xc7\x20\xb5\xf2\x29\x15\x79\xa5\x8b\x5b\x77\x65\xb6\xcc\xbf\x36\x26\x3b\x0e\x02\x8e\x43\xbd\x88\x64\x1e\xad\x6d\xfb\x82\x55\xea\x4a\x5e\x37\x81\xeb\xdf\x2f\xd4\x18\x26\x12\x04\x99\xab\x0c\x25\x3d\xc5\xac\xae\x4d\x3f\xee\x2f\x99\xd0\x8d\x9f\xe4\x50\x52\x02\x5b\x5a\x36\x8c\xde\x8c\xe9\x72\x41\x37\x94\xcb\x8c\xaa\x99\x46\x8e\xe2\x09\xb4\xc1\x04\x5a\xc9\x44\x7d\xce\x2c\x2e\xb3\x3d\x15\x92\x72\x7f\x9d\x6a\x87\xb2\x0d\x73\xf5\x76\xaa\xee\xb1\x54\x79\xda\xd5\x7e\x4c\xc9\xf3\x0a\x0b\x01\x56\x9a\x43\x01\xd9\xa2\x82\xc1\x24\x4d\xdb\x79\xd9\xc5\x68\x42\x1b\xf5\xba\x5c\xf6\x9a\x99\x92\x37\x23\x7d\x89\xfb\x3a\xf5\x5f\xfc\x07\x95\x2b\x19\xc7\x30\x6d\xf9\x2f\x50\x0a\xed\xaa\xdb\xac\xa0\x9d\x5a\xaf\x9c\xb6\x1a\x44\x5f\x7a\xbd\x58\x06\xb6\x0b\x17\xed\x5c\x47\x8a\x65\xa6\xdd\x8d\xec\x90\xf1\xe9\xcf\x9c\xaa\x6d\xf9\xf0\xff\xbb\x78\x01\xff\x3e\x69\x97\x9c\x8e\xe2\x74\x3a\x71\xce\xdc\x34\x32\x99\x9a\xbc\x5c\x6c\x5e\x4e\x47\x6f\x8d\x53\x93\xa9\xd6\x39\x14\x78\xf6\x85\xee\x47\x55\x8f\x8c\x8d\xe1\x71\x32\x71\x39\xa2\x55\xcf\xbd\x09\xfd\x9d\x74\x98\xf2\x76\x0a\xec\x75\x82\xfb\x79\xf9\x26\xe3\xfa\x71\x0c\x95\xcc\x0d\x6d\xbf\x3d\x8e\xd1\x83\x63\xed\xf4\x30\xd4\x52\x64\x92\x09\x43\xf7\x30\x76\x71\x9b\x68\xa3\x8f\xe1\x7f\xd2\x01\xb4\xb9\xcd\x54\x5f\x02\xba\x1b\xc0\x26\x63\xdb\x49\x6a\x32\x72\x39\x15\x4d\xc7\x77\x73\xcd\x64\x74\x3b\xac\x4c\x46\x76\x89\x3f\x19\x3b\xfc\xff\xff\xa6\x1b\x3c\x66\x1c\xfc\x39\x5d\x15\x6d\x5b\x56\x44\xa7\x13\x10\xa6\x68\x64\xd8\xa6\x47\x32\x42\xe3\x87\x1c\xda\xb0\x9f\xc2\x8d\x06\xe6\x82\xc2\xb2\xc5\xd2\x39\xbb\x02\x4c\x92\x3f\xce\xcb\x6c\x33\x3a\xc2\x6a\x6f\x5e\xe0\x78\xbe\xd5\x6c\x9a\x49\x1e\x66\xe3\xbb\xc5\x97\x89\x49\x36\x81\xdf\x8d\x54\x84\x43\xf6\x7f\x2f\x7e\xf6\x5b\x45\x11\x36\xdf\x8b\xa3\x91\x9f\xa9\xed\x1e\xdf\x97\xe1\xa0\x8e\x23\x3c\x6f\x5d\xa8\xd2\x30\x9f\x18\x0d\x16\xdd\x7e\x5e\x99\x9a\x05\xf6\x66\x0c\x93\x34\xef\xa7\xda\xc1\xb2\x5a\xc5\xb9\x88\xec\xd5\x1a\xb9\xf3\xbd\xa5\x37\xee\x52\xf9\xa6\x38\xdb\xe1\x11\xfa\xea\xa6\x0f\x98\xe9\x73\x25\xca\x17\xfb\xf3\x6c\x2c\x6b\xef\x18\x7d\xbd\x9b\xef\x36\x09\x8d\x71\xce\xcd\x75\x69\x1a\x0b\x6e\xcd\x5d\x1e\x15\x18\xe4\x10\x00\x18\x95\xd3\x79\x1b\x48\xb6\x02\xa7\x2c\x2a\x81\x35\xac\x29\xc0\x4a\xbd\x8e\x19\xe5\x96\x85\x77\x6d\x5f\xbd\x01\xf9\x6e\xdf\x22\x94\x1b\x43\x38\x55\xc0\x5b\x3c\x30\x99\x20\x58\x91\x21\x3c\xb8\x45\x51\xc3\x52\x7a\x9d\xd9\x8f\x65\x0e\xdd\x6e\x5d\xc1\xd6\xbb\xcc\x5a\x0e\xf3\x21\xb2\x9d\x92\x98\xb7\x10\xc2\xad\xa1\xd7\x58\x29\xbc\xbd\x06\xff\xc0\x30\x6e\x0a\xa6\xb6\xd1\x35\xf1\xaa\xb0\xea\x1b\xb1\xd2\xbc\x6b\x7e\x07\xb4\x79\x72\x5d\xd6\xd7\x21\x78\x1d\xf5\xe3\xd0\x07\xc9\xad\x7f\x0b\xe8\xce\x49\x07\xc5\xdf\xbb\x93\x83\x4e\x48\x5d\xba\x80\x7a\x05\x7d\xed\xbc\x0e\xc7\x43\xb8\x61\x98\xdf\xa0\xb4\xce\x91\xab\xaf\x97\x58\xe1\x54\x97\x2f\xef\x5f\x15\x32\x9f\xe9\x08\xae\x45\x73\xf4\xcc\x5e\x10\xe0\xe1\xc6\x91\xea\x59\x51\x3c\xe3\x32\x72\x9f\x86\xdc\x32\x99\x5b\x2a\x8b\x94\xb3\xf0\x8d\x24\x98\x57\x01\xcc\x62\x54\x0b\x45\xab\x15\xf2\xdc\x15\xe8\xa8\x61\xda\x42\xdc\xc2\xee\xbf\x13\x7c\x8b\x56\x2e\x0a\x4f\xca\x73\x35\x34\x5a\x38\x2d\xaf\x68\x9a\x71\x88\x03\x0d\x88\xc3\xfb\xdf\xbe\x81\x81\x4e\xc6\x09\x3f\x78\xce\x3e\xde\x47\xb4\xda\x79\x7d\xb8\xda\x40\xe8\x19\x06\x37\xf0\x91\xae\x64\x3f\xf3\x7a\x27\x85\x8e\x30\xc8\xa0\x72\x1f\x34\x1b\x4e\xea\x93\x86\x49\x6a\xeb\xa3\xe7\xcf\x6b\x35\x1a\xdb\x8b\x92\x59\xd3\x54\x3b\xfe\x03\x88\x2d\x8b\x59\x6d\x58\x1a\x39\x4c\x66\x7e\xb4\xda\x34\x55\x69\x44\x44\xc7\x0f\x3b\xb7\x17\x5e\xad\xfc\x39\xaf\x84\xef\xe2\xb2\x9d\x1d\x55\x72\xbc\xc5\x29\xd5\xc7\x48\xe4\x9c\xb7\x43\xd8\x25\x2f\xd4\x87\x4b\x97\xce\xa3\x68\x36\x4d\xcf\x6c\x96\x9e\x57\x49\x3a\x88\x7a\x77\x74\xd2\x8a\x8d\xb0\x7b\x44\x38\x7a\x95\x0f\x87\x4d\x1b\x96\x15\x15\x8c\x53\x84\x45\xc7\x39\x90\x49\xc3\x89\x74\x21\x05\x6d\x98\x8d\xc0\xeb\x3f\x90\x48\xb5\xa8\xe6\x91\x06\x82\x61\x97\x1c\x3d\xc3\xb4\x4e\x5a\x5d\xa7\x52\x49\x72\x4e\x0f\x67\xe5\x47\xe5\xd9\xd1\xc2\xe1\xec\x1a\xd9\xe1\xcc\x05\xd1\x59\xe9\x65\xa7\xda\xb9\x51\x7c\x36\x47\xc3\x80\x31\x0e\xe7\x50\x27\x7f\x76\x75\xae\xc7\x63\x00\x34\xc6\xe5\xaa\xaa\xa6\x3d\x26\x7d\xc8\xbd\x3c\x46\x54\x19\x82\x8d\xf1\xf9\x1d\x26\xae\xd7\x30\x71\xf5\x98\xf4\x00\x36\x66\x1f\xb6\x78\xcc\x92\xc3\x0f\xb3\x32\x4a\x94\x74\x9f\x73\x66\xbb\xc8\xaf\xa3\xba\x8d\x71\xd4\xc9\xc7\x36\x74\x71\xb3\xa6\xe2\x70\x56\x0c\x3d\xc1\x6c\xde\xfb\xba\xf3\xd5\x94\xe5\xf1\xbd\xe2\xc7\x68\x56\x0f\x4a\x75\x05\x2c\xc6\x25\x5b\xf1\x06\xa8\x1b\x46\x01\xe2\x0b\x8b\xea\x0c\x71\x57\xc6\x9a\x8b\xb7\x8f\xf0\xb2\x9b\x84\x96\x41\xf1\x7f\x65\x7f\x05\x00\x00\xff\xff\xd2\xd6\x67\x41\x3c\x1b\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 6972, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_js_debug_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\x4d\x6f\x9c\x30\x10\xbd\xe7\x57\x58\x51\x24\x58\x25\x85\x1e\xaa\x5e\xa2\x56\xaa\xb2\xaa\x14\xf5\x43\x55\xd4\xee\xa5\xea\xc1\x0b\xb3\xc4\x8a\xb1\x91\x6d\x48\xa2\x8a\xff\xde\x01\x37\x8b\xed\x65\x81\xee\xa1\xb9\x64\x61\xde\xcc\xbc\xf7\x66\x86\x5d\x2d\x32\xc3\xa4\x20\x6b\xd8\xd6\xc5\x8d\x51\x3c\xbe\xd0\x99\xac\xe0\x8a\x5c\xdc\x1b\x53\xe1\x3f\x25\x6b\x03\xdf\xa8\xa2\xa5\xc6\x27\x2e\x8b\x15\xf9\x7d\x46\xf0\xcf\x02\x93\x8a\x89\x1c\x9e\xbe\xd2\x12\xc8\x3b\x72\x7e\x7e\xed\xc6\x72\x99\xdd\xe6\xa3\xaf\xef\x40\xd7\xdc\x68\x8c\x89\x9a\xf3\x30\xda\xb3\x99\x80\xec\x18\xf0\x5c\x4f\x00\x40\x29\xa9\xbe\x80\xd6\xb4\x80\xb1\x78\x49\x9f\x3e\x7d\x06\x81\xa1\xd7\xe1\xfb\xcd\xfe\xbd\x1b\x28\xc0\x7c\xec\x9b\x62\xe8\xc5\xb4\xf8\xc5\x89\x45\xcc\xe6\xd8\x0d\xa0\xce\xf8\xae\x61\x1c\xa5\xb4\x62\xa9\x35\xf8\xd5\x96\x43\x03\x69\x74\x79\x60\xfb\x65\x94\xda\xae\x69\xb4\x4a\xf6\x55\x74\x9d\x65\xd8\x21\xde\x93\xcd\xa9\xa1\x2e\xe1\x09\xd2\x1d\x74\x20\xdd\x3a\x55\x7b\xe6\x7e\xcd\x2b\x92\xc9\x1c\x8e\x54\x0e\x94\x86\x85\xed\xef\xd6\x73\x3a\xef\x66\xbf\x96\xd9\x8c\xd1\x47\x76\x68\xe1\x1e\x2d\x59\x95\xa9\x75\x99\x5c\x99\x13\x87\x88\x7c\x31\xe2\xb9\xf8\xd7\x74\xd1\x39\xfc\xe3\xee\xf6\x46\x96\x95\x14\x20\x4c\xec\xde\xd7\xea\xc4\xa9\x7b\x0e\xda\xc9\xf8\xb0\x93\x24\xf4\x96\x8f\xeb\xf8\x47\x2d\x8b\xf5\x38\x9a\x2a\x25\x3b\xfc\xda\x1f\xbd\xcd\xba\xf6\x92\xda\xa0\xd3\xe2\xcd\x76\xba\x4d\x6e\xb7\x6d\xf2\x3f\xcf\xc8\xff\x62\x8d\x5b\xe1\x5e\x55\xe8\xe5\xd1\xbb\x09\x96\x63\x87\xdc\x1b\xaa\x08\x23\x4c\x1c\x49\x0a\x75\x74\x70\x25\x1f\xb1\xd6\x38\xfe\x27\xfb\xe5\x3b\x87\xe0\xe4\x01\xe1\xd4\xc8\x6d\xdc\x3f\xc0\xf3\x2a\xd1\x15\x67\xb8\x8e\x51\x30\x4b\xb6\x23\x16\x93\x70\x10\x85\xb9\x27\xef\x83\xc3\x9d\x98\xe1\x70\xda\x6e\x85\x60\x8c\x87\xd4\x18\x26\x6c\xa9\x86\xb7\x6f\xd6\x90\x7d\x97\x1f\x94\xda\xb3\x3c\x14\xd2\xb8\x42\x1a\xca\x67\x85\x34\x63\x42\x36\xb3\x42\x36\x83\x90\x66\x46\x48\x7b\x16\x8e\xfd\x01\x13\x0c\x2b\xa1\xff\x50\xc2\x23\x41\x49\xf4\x39\x0e\x7c\x3c\xf8\xfa\x35\x33\x59\x9b\x21\x0b\xf7\xb3\xfd\x13\x00\x00\xff\xff\xe6\xe2\x76\x3a\x70\x08\x00\x00")

func staticx_js_debug_js_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_js_debug_js,
		"staticx/js/debug.js",
	)
}

func staticx_js_debug_js() (*asset, error) {
	bytes, err := staticx_js_debug_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/js/debug.js", size: 2160, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_debug_rows_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\xb1\x6e\x83\x30\x10\x86\xf7\x3c\xc5\xf5\xd4\x95\x92\xaa\xea\x06\x4c\xdd\xd2\x29\x43\x96\xaa\x83\xc1\xa7\x60\xe1\xd8\xc8\x36\x82\x08\xf9\xdd\x6b\x83\xa9\x50\xbb\x74\xe9\xe4\xff\xe4\x4f\xf7\xdd\x5d\xd1\xbe\x54\x67\x3d\xda\x22\x0f\xe1\x70\x28\x1c\xab\x25\x41\xad\x0d\x27\x53\xe2\x11\xa1\x91\xcc\xda\x12\x39\xd5\xc3\x15\xab\x03\x40\xe1\x4c\x7c\x62\x68\xa1\xd1\xd2\xf6\x4c\x95\x38\xcf\x37\x36\x9d\xde\x49\x79\x8f\xd5\x89\xee\x45\xee\xda\x84\x3d\x64\xd9\x6f\xf4\x92\xd0\x0b\x93\x03\x2d\x70\x96\x2d\xdd\xf3\xb5\x7d\xb0\x80\xba\x66\x86\x7a\x62\xae\x44\xa3\x47\x10\x0a\xb8\x6e\xde\xe2\x20\x67\xb2\x83\x74\x16\xb7\x41\xf8\x1a\x00\xe6\x39\x90\xde\xa7\xea\xc7\x36\xcf\xb8\x61\xbb\x2d\xb6\x92\xc3\x28\xb8\x6b\x4b\x7c\x3d\xf6\x13\xee\xdd\x4d\x1b\xd5\x9d\x24\xe5\xc4\x8d\x2c\x38\xc3\x9a\x0e\xea\x3b\x3c\x0a\xc5\x69\xc2\x6a\x91\x3e\x75\x1f\x6b\xfd\xe9\x7d\x58\x82\xef\x54\xf9\xde\xf5\x0f\x62\xf1\x17\x73\xc8\xf1\x18\xe9\x62\x09\x5b\x81\xef\xaf\xaf\x00\x00\x00\xff\xff\x63\x5f\x1c\x85\x0d\x02\x00\x00")

func staticx_partials_debug_rows_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_debug_rows_html,
		"staticx/partials/debug-rows.html",
	)
}

func staticx_partials_debug_rows_html() (*asset, error) {
	bytes, err := staticx_partials_debug_rows_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/debug-rows.html", size: 525, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_debug_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x0a\xcb\x97\xdd\x3d\x04\x53\xb8\x70\x48\x72\xaa\x40\x3d\x80\x10\x6f\xe0\xd8\xd3\xc4\x5a\x27\x8e\x6c\x67\xb7\x4b\xd5\x77\x67\xfc\x27\xa4\xe9\x22\x01\x85\x4a\x8d\x1c\xcf\xcc\xef\x1b\x7f\xd6\xa4\xec\xb6\x44\x68\xee\x5c\x45\x47\xde\x42\xd1\x01\x97\x60\x69\xbd\x83\x66\x6a\x4b\xd6\x6d\xeb\xcd\xa6\x94\xea\x89\x0c\x6d\xe1\x3a\xf3\x5c\x51\xb0\xd6\xd8\xcf\xe0\x1c\xa6\xd3\xb9\x96\x6b\xb0\x9e\xc4\x67\x21\xf9\xd0\x82\x0d\x05\x42\x1b\xfe\x48\x89\x35\x1a\x72\x0a\xad\x37\x84\x9c\x4e\x97\x8c\xf3\x79\x53\x32\x54\x08\x42\x07\x63\xfb\x19\x19\xd6\x45\x67\xac\xfa\x6e\x06\xcf\xf5\x8c\x09\xdb\x91\x12\xbb\xba\xcc\x6d\xad\x99\xc6\x18\xc2\xa0\xe6\x0d\x68\x82\xfb\x15\x55\xc3\x38\xf9\xaf\xfb\x41\xc2\xf1\x0b\xef\x97\x9e\x85\xd1\x85\xeb\x8b\x77\x44\xa0\x00\xc2\x8b\x58\x93\x01\x84\xa4\x0a\x12\x4a\x12\x92\xc5\x78\xe6\x5f\x88\x67\xce\x87\x9f\x95\x65\x54\x0c\x06\xf4\x46\x82\x46\x67\xd5\x22\xee\x5f\x46\x3c\x85\x87\xa3\xa7\xab\xee\x73\x13\x34\x33\xf2\x4f\xc9\x5f\xf4\x3f\x6a\x2e\xa0\x33\x1a\x2f\xaa\xa2\xf7\x8d\x86\x27\x20\x49\x82\x0c\x98\xf0\x30\x7b\x90\x5c\xbd\x5c\xfc\x95\x65\x3b\x23\xfe\xd4\x2b\x4c\x25\xfb\xdd\xbf\xda\x24\x8d\xd8\xcb\x9b\x1d\x8a\xed\xae\xad\x41\x20\xc6\x6f\xf5\xe3\x75\xef\xe6\x70\x70\xe0\xa3\x0b\xf1\x7d\xfb\x76\x39\x4c\x33\x79\x6f\x86\xdc\xbc\x9b\x9a\x5e\x2d\xed\x37\x7e\x20\xf8\x2f\x46\xab\x7a\x6e\x5f\xae\x4e\x90\x26\x45\x89\x47\x74\x20\x4c\x1d\x1e\xe4\xfe\x21\x4f\x60\x70\xb6\x64\x89\xfd\x7f\xa5\x5a\xf0\x1f\x15\x68\xe9\x82\xd6\x27\xf0\x24\xbd\xad\xc5\xae\x2d\x2b\x59\xb0\xe9\xd5\x27\xe1\x10\x4b\xbf\x81\x9b\xb4\x77\x69\x38\xbb\xf7\xf5\x0c\xc4\x65\xd8\x19\x2d\xd4\xa7\xd3\x2a\xf5\x7c\x2e\x59\xd8\x5e\x3e\x00\x2b\x2c\x5e\xdf\x35\x33\xda\xb1\x02\x2e\x49\xbf\xa7\x45\x4b\x67\x64\x88\xa8\x41\xe8\x49\xa6\xf9\x26\xce\x8a\x8a\xde\x31\xe7\xb9\x57\xe2\xc8\x46\x6e\xbd\xe2\xda\xb1\x78\x29\x85\x35\xcf\xee\x4d\xe7\x7b\x7d\x47\x19\xb2\x7f\x04\x00\x00\xff\xff\xd5\x2e\xf4\xc1\x38\x05\x00\x00")

func staticx_partials_debug_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_debug_html,
		"staticx/partials/debug.html",
	)
}

func staticx_partials_debug_html() (*asset, error) {
	bytes, err := staticx_partials_debug_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/debug.html", size: 1336, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_ft_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x30\x6a\x1b\x37\x40\x64\xb5\x40\x2f\x49\x2c\x17\x2d\x8a\x02\x3d\x34\x7b\xc9\x7d\x41\x89\x13\x89\x1b\x5a\x22\x48\x2a\xb6\x61\xf8\xbf\xef\x90\xd4\xf7\xca\x49\x90\x4d\xb2\x39\xc4\x40\x6c\x8a\x1a\xbe\x99\x37\x9c\xe1\x0b\x97\x8c\xdf\x93\x22\x0b\x75\x5e\x6e\xe2\x00\x94\x2a\xd5\xff\xa0\x35\xcd\x20\x20\xa9\xa0\x5a\xc7\x01\x15\xa0\x0c\x71\xdf\x21\xa3\x45\x06\xca\x2e\x48\x45\x49\xef\x02\xa2\x4a\x01\xb5\x49\xb0\x9a\x11\xb2\xdf\xf7\x31\x0e\x87\xd9\x32\x42\x0f\xab\xd9\xac\x71\xc4\x6f\xe3\x80\x17\x0c\xb6\xd7\x74\x0d\x7a\x21\xa0\xc8\x4c\x6e\x97\x3a\x83\xda\xa5\xe0\xda\xfc\x67\x8d\x40\x3b\xd4\xfe\x3b\x55\x6e\xdc\x1c\xce\x52\x92\x2b\x40\xbc\x88\x7b\xdb\xe8\x73\x01\x9b\x3f\xdd\xc3\xcd\x4e\x42\x9c\x08\xb8\x87\x53\x5d\x56\x2a\x05\x37\x91\x96\x55\x9a\x27\x54\x43\xe0\x00\xf0\x53\x83\xca\x4a\x88\x50\xf1\x2c\x37\x35\x36\xa2\x27\x95\x31\x65\xd1\x58\x24\xa6\x20\xf8\x17\x32\xb8\xa5\x95\x30\x6e\xac\xd7\xa4\xb7\x90\x18\xeb\x22\xd0\x55\xb2\xe6\x1d\x0c\x02\xf1\x06\x23\x13\x3b\x99\xf3\x14\x41\xdb\x51\x28\x45\x85\x1c\x97\x11\x5f\x91\x6b\xd8\x10\xc7\xba\x89\x20\xf2\x21\xd4\x6c\x23\x5a\x0f\xb4\xa4\x6d\x58\x05\xbd\x4f\xa8\x0a\x0d\x6c\xd1\xe5\xbf\x18\x0c\xb9\xc1\x21\xa9\x93\xb7\x8c\xac\xad\xcb\x60\xbd\x0d\x38\x32\x14\xf3\xd2\xac\xf7\x0f\xee\x3b\xd4\x46\x71\x09\xac\xc9\xae\x51\x3d\x0e\x26\x27\x45\xb9\x51\x54\xae\x1c\x34\xb1\xbb\xb7\x8c\x4c\x3e\x65\x42\x36\x9c\x99\x3c\x0e\x2e\x2e\x7e\x09\x56\x7f\x57\xe9\x1d\x98\x63\xa6\xab\xee\x05\x8e\x54\xeb\xd9\x56\x8a\x02\x09\xd4\xc4\xc1\xaf\x6d\xb9\x9c\x13\x37\xfc\x07\x6e\xcf\x70\xd4\x3e\xe8\x76\x37\x07\x05\x86\x6f\x16\x76\x4b\xc8\x49\x4c\xe6\x54\x70\xaa\xe7\xfd\x5d\x31\xac\x8d\xe1\x9b\x3a\xda\xef\x5b\x9f\x87\x43\xb0\x1a\x3c\xda\x7d\xc0\x58\xd9\x24\x54\x3b\xd7\x6c\xd3\x38\xa0\xae\x18\x5d\x58\x6d\x41\xf6\x43\xb3\x9f\xda\xe5\x70\x09\xb6\x53\xdf\xe6\xb4\x48\xb4\xbc\x8a\xfc\x4f\xdf\x73\xbb\xeb\x47\xd1\x3c\x95\x8e\xc1\x13\xf8\x74\x1d\xe1\xba\x9f\xa7\x77\x78\x5e\x30\xee\xfb\xb4\xdb\xa3\xb3\x60\xb0\xa6\xf9\xf8\xde\xf0\x00\xc1\xc3\x3d\x35\xca\x44\x97\xcb\x07\xba\xc8\x06\x62\xbb\xc8\x11\x27\xf6\x69\x18\xf9\xa0\x93\x8e\xf3\xc1\x43\xad\x80\x77\x41\xc8\x1e\x0b\xa1\xe6\x59\xd1\xb1\x72\xc1\x3d\x8b\x16\x03\x01\xe6\x7d\xf0\x32\x8a\xea\xbc\xe5\xf4\x08\x9b\xae\x2c\x9b\xc3\x01\x7f\xed\x51\x65\xe5\xa2\x39\xd0\x26\x75\xe3\x2f\xdb\xee\xdf\x27\x1e\xee\xc4\xe8\x8b\x47\xc1\xc5\xfb\x96\x0d\xe2\x58\x3f\x57\x3c\x6a\xc9\x20\x75\xea\x5e\x4f\x3a\x9c\x83\xa7\x0b\xc8\x0d\x55\x19\xf4\x14\xed\x07\x0a\x49\xfc\xfa\x42\x32\xa9\x20\x2d\x01\xe3\x72\xe1\x19\xf8\xf1\xa7\xe4\xcb\x80\xc2\x42\x52\x45\xd7\x1a\xa7\x17\xde\x40\x8f\xba\x74\x2a\xc6\x0e\xd6\x06\x39\x6a\xea\xe1\xeb\x51\xc7\x22\x83\x26\x48\xff\x1f\xe4\xc9\xcf\x58\x1c\x58\x4d\xe7\x13\x2a\x34\x9e\xf9\x50\x9d\x0f\xd5\x79\x1b\x5e\x2f\xad\x3a\x53\x97\x9a\x93\xc9\x5b\x0d\x69\x4d\x8a\x54\x54\x0c\x49\xce\x23\x6d\xa8\xe1\x69\x84\x9d\x6a\x38\x15\xda\x37\xa2\x9d\x55\x66\x91\x9b\xb5\x98\x07\x91\x3f\x6e\x7b\xc2\xc5\x0b\x59\x99\x30\x53\x65\x25\x5f\xe0\xf6\xf3\x88\x58\x49\xc5\xd7\x54\xed\xde\xe8\x46\x33\xce\xa9\x36\x3b\x9b\xeb\x45\xef\x12\x78\x4e\x16\x63\x69\x27\x7b\x5c\x2a\x29\x63\x1c\x93\x9b\x94\x88\xba\xbe\x24\x7f\xfc\x26\xb7\x57\xb3\xc3\x6c\xb0\xd8\x4b\xd4\x14\x84\x57\x30\x0b\x94\x94\x8a\x81\xba\x24\xbf\xcb\x2d\xd1\xa5\xe0\x8c\xfc\xc4\x18\x73\x50\x13\x58\x04\x75\xc5\xb0\x3e\x22\xe8\x21\xa6\x37\x38\xb6\x34\x7f\x6c\x69\xee\x82\xda\xe4\xdc\xa0\xb4\x4a\x9a\xc2\x65\x7d\x34\xda\x88\xb0\x8a\x7d\x86\xbe\x06\x00\x00\xff\xff\xd5\xc5\xf7\xbb\xbc\x0f\x00\x00")

func staticx_partials_index_ft_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_ft_list_html,
		"staticx/partials/index/ft/list.html",
	)
}

func staticx_partials_index_ft_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_ft_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/ft/list.html", size: 4028, mode: os.FileMode(420), modTime: time.Unix(1447108315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_ft_new_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x60\xf4\x50\x3b\x80\x15\x75\xdd\xc3\x86\xcc\x36\xd0\x75\x17\x04\xd8\x82\x02\x59\x9e\x82\x3e\x50\x12\x63\x13\xa6\x45\x81\xa4\x72\xa9\xeb\xff\x3e\xde\x44\x52\x37\x5b\x4e\x53\x03\x89\x65\xe9\xdc\x78\xbe\x73\xbe\x43\x71\x9e\xe3\x47\x50\xac\x62\xfc\xb0\x88\xb6\x48\xc0\x68\x79\x76\x36\xa7\x04\x64\x04\x72\xbe\x88\x52\x86\x60\x9e\xb1\x6a\x9b\xca\x07\x00\xcc\x09\x5e\xce\x79\x09\x8b\xfa\xf9\x8a\xbc\x94\x6b\x9c\xd1\x02\xb8\xab\x38\xa5\x74\x13\x2d\xe7\x89\x94\xb5\x2a\xf2\x4b\x5e\x40\xb0\x66\x48\xba\x49\x70\x91\xa3\x67\xc4\x23\x73\x1f\x80\x6b\xf3\xdb\x48\x25\x50\x6b\x79\x6d\x15\x1d\x5f\xd3\xa7\x45\x84\xf9\x9f\x39\x16\xd1\x72\xb7\x2b\xd0\x93\x56\xba\x81\x5b\xb4\xdf\xf7\x0a\x9f\xd7\xd2\xda\xec\x0d\x7a\x32\x6e\x8c\x13\xbd\x04\xbb\xea\xda\xd6\x7f\x2f\x25\x02\xef\xde\x81\xc6\xef\xc5\x02\x4c\x20\xc1\x90\x4f\xa2\xe5\x47\xf5\x3d\x4f\x94\xae\x0f\x71\x9e\x50\xa2\x52\x66\xd3\x68\x7c\x23\xc6\x28\xfb\x17\x71\x0e\x57\x28\xaa\x53\x05\x09\x62\x02\xe8\xff\x71\x0e\x8b\x15\x62\x4a\x21\x23\x14\x6e\x22\xc0\x28\x41\x56\x44\x47\xbc\xdb\x85\x36\xf6\x7b\xe9\x47\x7a\x50\x8e\x1e\x28\xdb\xd6\x26\xf5\xb5\xfa\x17\xaf\x29\xc3\x5f\x69\x21\x20\xa9\x6d\xa9\xdb\x06\x33\x15\x5a\xa0\x10\xaf\x18\xad\x4a\xad\xf6\xb7\xba\x72\x89\xb4\xa9\x9a\x13\x98\x22\xa2\x9e\xcb\x8c\x17\x65\x25\xbc\x80\xc5\x4b\x7f\xac\xc5\x8c\x92\x98\x6f\xe3\x0f\x40\x22\x2f\xa4\xe7\x58\x6b\x37\xa1\xb5\xd7\x6f\x92\x75\x0d\xa6\x8c\xc5\x16\x8b\xf6\x66\xe3\x0e\xd6\x69\xa3\xfa\xe9\x7d\x10\xb2\x4e\xb6\x7e\xba\x9b\xac\x21\x8f\x75\x82\x27\x57\x40\x7f\xff\x85\x11\xc9\xf9\x25\x76\x45\xe5\x56\xd0\x44\xd6\x16\x55\x4f\x22\xb0\x4f\x63\xb7\x3e\x35\x76\xd6\x9e\xce\x69\xb7\x4e\xd5\x9d\x2d\xcd\x11\xf1\xb9\xe9\xe4\x1c\x00\x21\xd3\xb3\x88\x04\x7a\x16\x51\x03\x53\x9b\xfd\x96\x34\xce\x3b\x10\x82\x92\xc0\x0c\xad\x29\xc9\x91\xc4\xb7\x24\x08\x72\x04\x50\x21\x64\x35\x42\x50\x28\x89\xc4\xa6\xb3\x0e\xda\x5f\x8c\x29\x24\x85\xdf\xc1\x42\xd2\x02\x27\x14\x92\x56\x02\x4a\x6b\x04\xda\x2e\xc9\x1c\x11\x94\x89\x9e\x9c\x36\xdd\xcb\xe7\xb4\x14\x98\x16\xd2\x8a\x30\xe8\xeb\x02\x84\x1c\x88\x4b\x13\xbe\x59\x64\xfa\x22\x6f\x64\x50\xa0\x15\x65\x2f\x6a\x49\x40\x00\x5c\x00\xa7\xc1\x3f\x32\xe6\xbc\x4b\xff\xc6\x2a\x78\x84\xa4\x92\x78\x45\xcb\x38\x06\xd9\x9a\x52\x99\x6b\xad\xa2\x71\x04\x71\x2c\xd9\x43\x0b\xba\xb8\x13\x13\xf8\x6b\x21\xb8\xa5\x15\xcb\xd0\x21\x0c\x02\x89\x13\x40\x30\x5a\x6f\x82\x42\x5f\x00\x4d\x18\xb8\x93\x18\x8d\x83\x57\x19\x0f\x84\xd1\xf9\xb1\x48\x34\x3a\xd8\xb5\x7c\x23\x0b\x96\xfc\x82\x1b\xe7\x92\xfd\x0a\x4c\x26\x87\x21\x3c\x95\x90\x7f\xaf\xb2\x0d\x12\x9a\x3b\x4f\x81\xd0\xb1\x55\x1b\xc1\x57\x90\x93\xe7\xa3\x41\x13\x0d\x76\x4a\x75\xc8\xf1\xf7\xb1\x92\x71\xf5\x19\x32\xb8\xe5\xaf\x86\x42\x3d\x81\xf9\x23\x2c\x32\x94\x1f\x86\xa5\xe5\x68\x7c\x6f\x19\xc5\x53\x27\x1a\x43\x25\x82\x62\x11\x4d\x7d\x07\xcc\x40\x79\xa1\x7a\xc2\xad\xa4\x13\xd2\x98\x49\xc8\x03\xd5\x7b\x6f\xfc\x4b\x30\x18\x15\xd0\x50\xee\x0f\xfb\xaa\xa3\xab\xd8\x02\x5a\x7e\x18\x7d\x52\x21\xec\x4a\x25\x7b\x53\x6d\xff\xc1\x05\x6a\xfa\xda\x77\x95\x8e\x0f\xbd\x61\x78\xe5\xb6\x82\x07\x04\x39\x4f\xea\x15\xbc\x01\xdd\xfe\xf8\xca\xba\xbb\xbb\xfe\xe3\x15\x75\xa5\xd4\xde\xa4\xe1\x3b\xfe\x4f\x6f\xf8\x1e\x13\x8d\x86\x9f\x1a\x0e\x86\x04\xd8\xd6\xaf\x2a\x9c\x5f\x1c\xe9\xfd\x81\x0d\xa5\x19\xcd\x68\x2b\x1d\x08\xc4\xbb\x77\xee\x43\x05\x5f\x9d\x63\xf6\x37\xb5\x8d\x26\x5e\x47\xe0\x38\x86\xc1\xaf\xcd\x1d\x67\xb8\xab\x54\xfb\x43\x39\xe9\xfc\xb6\x52\x05\xb1\xdf\x87\x63\xae\x4e\x44\x91\x91\x2a\x47\x56\x6f\x68\xad\x89\x1f\x72\x6e\x63\x3a\x9c\x5c\x57\xce\xc3\xfb\x75\x55\xcc\xa9\x04\x72\x23\x81\x44\xba\xa4\xa7\xe7\xad\xfc\x7f\xfb\x06\xce\x0f\x05\x75\x11\x76\x90\x63\x35\xb7\xbf\x0a\x48\x4d\xeb\x58\x4e\xeb\x66\x73\x10\xb8\x3e\x16\x74\x7e\x36\x33\xf0\xa8\xed\x97\x4d\x81\x9e\xb5\x4b\x12\xc1\x61\x22\xa6\x75\xf7\xea\x25\xd6\x3f\x0c\x8b\xde\x6f\x82\x75\x9d\xf0\x06\x62\xd9\xd3\xf9\xf9\x22\x0d\x05\xc4\x3b\xa2\xde\x80\xb7\xa3\xde\x47\xf4\x3d\xfc\x15\x4d\x37\x17\xfa\x75\xd9\x57\xe2\x31\x3e\x18\xe4\xf9\xeb\xa1\x40\xbb\x74\x3c\x44\xf5\x9b\x5e\x86\xef\xe7\xf8\x0e\x5b\x8f\xa9\xde\x03\x35\xf1\x99\xc0\x42\x46\x3f\xb0\x27\x38\x5c\xea\xe6\xd5\x74\x0c\x73\x5b\x2f\x27\xee\x08\x94\xd6\xf8\xfd\xc0\x91\x79\x1c\x84\x30\x00\xc3\xa4\x74\x22\x93\xd1\x33\xd7\x53\x7b\xe0\xe0\xf5\x23\xb5\xce\xf1\x6d\x95\x6e\xdd\xa1\x4d\xcf\x7a\xe9\xc3\x03\x97\x73\x41\xa5\xac\xb3\xfe\xd3\xf8\xaa\x3e\x5f\xf0\x75\xde\x9e\x7c\x0e\x5c\x3b\xe7\xb2\x35\xca\x36\x29\x7d\xf6\x27\x3a\x4d\xf4\xcd\xe7\x56\xba\x77\x75\x01\x64\xb0\x02\x17\x2b\xee\xbd\x24\xda\x4d\xe0\x36\x65\x7d\x7c\xdc\x73\x5e\x96\x84\xc1\xa6\x95\x10\xd4\x1d\xc3\xa5\xa2\x00\xf2\x2f\xce\x94\x57\x59\x41\x9f\xf4\xf7\x3c\x31\x52\xde\xbc\xef\x1d\xab\xaf\x29\x09\x67\x9b\x45\x54\xbf\x9f\x4f\xc3\xd3\x87\x59\x23\x6f\xb3\x16\xfd\xce\x9a\x7b\x9a\xe0\xa7\xd3\xf5\x73\x7f\xd6\xde\x90\xea\x1b\xbe\x78\x24\xc3\x33\xf4\xa8\xad\x2b\xf1\x8b\x76\x19\x1a\x0c\xb8\xa9\x8f\xf6\xba\x73\xf4\x00\x2b\x22\xc2\x04\xd5\x87\x4d\x7d\xa7\x81\xe6\xf3\x49\x96\xa9\x40\x8d\x23\x2a\xfd\xde\x17\x9c\x34\x75\xec\xf4\x98\xb9\x2b\xf3\x13\xcc\x7c\xef\xd9\x57\x13\xd3\x76\x7f\xcd\x13\xd5\x53\xea\x98\xb0\x3e\x2e\xe4\xe2\x85\xa0\xe5\x99\x3e\x29\xbc\x0c\x1a\x6e\x77\xa6\xfa\x1a\x41\x76\x05\x52\x2a\xd6\xbf\x9d\xed\xbb\x32\xd2\x84\x3f\x11\xd3\x1a\x25\xcc\x73\x59\xce\xb1\xa0\xe5\x15\xf8\xa5\x7c\xee\x55\xb3\x6f\xfd\x4a\x7e\x0b\xd9\x0a\x17\x87\xc5\x35\xc1\x05\x73\x4f\x2b\x2a\x1a\x89\x05\x83\x05\x57\x92\x57\x20\x83\x25\x16\x50\x8d\x30\x67\x43\xf7\xd1\xa5\xeb\xb4\xc0\x9d\x5c\x90\xa0\x52\xe9\xe7\xf7\xa1\xcb\x26\xc5\x74\xc2\xfb\x60\x85\x65\xba\x4d\xca\xfe\x0f\x00\x00\xff\xff\x37\x2f\xaa\xec\x1a\x17\x00\x00")

func staticx_partials_index_ft_new_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_ft_new_html,
		"staticx/partials/index/ft/new.html",
	)
}

func staticx_partials_index_ft_new_html() (*asset, error) {
	bytes, err := staticx_partials_index_ft_new_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/ft/new.html", size: 5914, mode: os.FileMode(420), modTime: time.Unix(1447174504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_start_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x41\x4f\x03\x21\x10\x46\xef\xfc\x8a\x2f\x3d\xdb\xd6\x7a\x54\xe4\xee\xc5\x78\xf3\x0c\xec\x20\x24\x2c\x18\x18\xda\x6d\x8c\xff\x5d\x68\x76\x13\x7b\x22\xbc\xc9\x7b\x0c\x72\x0a\x67\xd8\xa8\x6b\x7d\xdd\x85\x34\xd1\xf2\x49\xd1\xe6\x99\x76\x4a\x00\xd2\x9f\xd4\x7a\x07\x67\x58\xe3\x58\x1e\x3b\x1b\xa3\xee\xa9\x01\x10\x2a\x34\x5c\x8b\x71\xcf\xb4\x30\x2a\x95\x33\x15\xb8\x5c\x60\x73\xb3\xde\xe8\x4a\x98\x34\xeb\x83\x3c\x0e\x67\x73\x3f\x22\xdd\x26\xe4\x42\x22\x5c\x73\xeb\x4e\x28\xb5\xf7\xc6\x16\xb8\x04\xf6\x60\x4f\x78\xa7\x0b\xde\x6e\xc8\x34\xe6\x9c\xb6\xcc\x7a\x08\x59\xf9\x1a\x49\x89\xc3\xff\xed\xe1\x4f\x0f\xb8\x27\xe3\x9f\x3f\xfd\xf1\x59\x97\xaf\x90\xf6\x26\xf7\xd8\xfc\x8c\xa7\xc7\xef\xe5\x45\xfc\xf6\xdc\xda\xf9\x0b\x00\x00\xff\xff\x3c\xde\xdc\xcd\x11\x01\x00\x00")

func staticx_partials_index_start_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_start_html,
		"staticx/partials/index/start.html",
	)
}

func staticx_partials_index_start_html() (*asset, error) {
	bytes, err := staticx_partials_index_start_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/start.html", size: 273, mode: os.FileMode(420), modTime: time.Unix(1447042892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/css/cbft.css":                staticx_css_cbft_css,
	"staticx/index-ft.html":               staticx_index_ft_html,
	"staticx/index.html":                  staticx_index_html,
	"staticx/js/debug.js":                 staticx_js_debug_js,
	"staticx/partials/debug-rows.html":    staticx_partials_debug_rows_html,
	"staticx/partials/debug.html":         staticx_partials_debug_html,
	"staticx/partials/index/ft/list.html": staticx_partials_index_ft_list_html,
	"staticx/partials/index/ft/new.html":  staticx_partials_index_ft_new_html,
	"staticx/partials/index/start.html":   staticx_partials_index_start_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"css": &_bintree_t{nil, map[string]*_bintree_t{
			"cbft.css": &_bintree_t{staticx_css_cbft_css, map[string]*_bintree_t{}},
		}},
		"index-ft.html": &_bintree_t{staticx_index_ft_html, map[string]*_bintree_t{}},
		"index.html":    &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"js": &_bintree_t{nil, map[string]*_bintree_t{
			"debug.js": &_bintree_t{staticx_js_debug_js, map[string]*_bintree_t{}},
		}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"debug-rows.html": &_bintree_t{staticx_partials_debug_rows_html, map[string]*_bintree_t{}},
			"debug.html":      &_bintree_t{staticx_partials_debug_html, map[string]*_bintree_t{}},
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"ft": &_bintree_t{nil, map[string]*_bintree_t{
					"list.html": &_bintree_t{staticx_partials_index_ft_list_html, map[string]*_bintree_t{}},
					"new.html":  &_bintree_t{staticx_partials_index_ft_new_html, map[string]*_bintree_t{}},
				}},
				"start.html": &_bintree_t{staticx_partials_index_start_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
