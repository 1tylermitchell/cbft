package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_css_cbft_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x78\x91\xdd\x45\x64\x38\x7e\xc5\x96\x71\x03\xdc\x1a\x28\xb2\x09\xba\xe8\xb2\xe8\x82\x12\x87\xd6\xc0\x14\x49\x50\xf4\x2b\x45\xff\xbd\x94\x48\xdb\xb2\xfc\x88\xdc\x76\x65\x91\xf4\x9c\x39\x33\x73\x66\xc8\x6e\x22\x60\x0d\x6f\x8a\x51\x41\xba\x79\xf9\x13\x25\x8a\xed\x48\x97\x2b\x93\x47\x0b\xa3\x56\x9a\xfc\xe8\x10\xa2\x29\x63\x28\x17\xee\xd0\x5a\x95\xc7\xe4\xa9\xa7\xb7\xb3\xce\xcf\x4e\xa7\x8b\x92\xc1\xf6\x8d\x6a\xed\x8e\x49\x97\xca\xc5\x4a\x50\x13\xad\x30\xb2\x06\x20\xca\xa8\x64\x02\x2a\x08\x42\x12\x9a\x2e\x4b\x48\xc9\x62\xf2\xc0\x27\x9c\x72\x3e\xf3\x07\xca\x30\x30\x0e\x55\x6f\x49\xa1\x04\x32\xf2\xc0\x28\xf4\x81\xfa\xe3\x54\x09\xe5\x4e\x1f\x9e\xd3\x29\x24\x7d\xbf\x17\x08\x79\x26\x77\xd2\x89\x33\xb5\x06\x13\x48\xed\xc1\x87\x83\x09\x24\xd3\xd9\x05\xa2\x43\x3e\xe6\xcf\x75\xa2\xd1\xde\x86\xa5\x8e\xe4\xa4\x8d\x63\x2d\x68\x0a\x99\x12\xec\xe0\xf7\xd4\x47\x8f\x4f\x9b\xc9\xe8\xbb\xb8\x18\x2d\x32\x70\xd9\x48\x80\xf5\x59\xe2\xcf\xa3\x0d\x24\x4b\xb4\xae\x14\xdb\xa8\xc0\xf7\x2a\x09\x81\x97\xdb\x0a\xff\xc9\xd5\xfb\xcd\x3f\x5c\x3b\x3b\x8f\xa4\x5a\xcd\xa9\x4c\x41\xcc\x0d\x50\xeb\x8b\x99\x53\xb3\x40\x19\x59\xa5\x1d\xd1\x2a\xf9\x87\xbd\xbd\x44\x06\x57\x6a\x52\x40\x6a\x51\xc9\xc3\xc7\x2b\xd0\x7d\x56\xea\xa8\xd7\x4a\xda\x34\xff\x54\xca\xf5\xcc\x78\x74\x17\xa5\x7c\xff\x91\x58\x59\xc7\x32\xb8\xc8\xec\x75\x2a\x75\x33\x57\x66\x57\xab\x0b\xc6\xfd\x51\x5b\xe3\x9a\x2c\xf7\x02\xe3\x5e\x14\x47\xad\x1c\xa5\x37\x1d\x0d\x86\xfe\xb0\xa1\xc9\xe1\x80\x0f\xe8\x2d\x8f\x82\x26\x20\x2a\x37\x5c\x49\xeb\xe4\xe4\x89\x4a\xd7\xf1\x54\xd4\xb2\x26\x80\xb7\x09\x9e\x5a\x6b\x8a\x5b\x70\xd5\xb6\x13\x1b\xc4\x64\xaa\xed\x4d\xac\xf0\xf1\xea\xa7\x46\x05\x3d\x77\xd6\x46\x09\xef\x61\x8d\x05\x26\x28\xd0\xee\x62\x92\x21\x63\x20\xdb\xc3\x85\xf4\x9e\x80\x3e\x5e\x31\xed\x02\x43\x7b\x37\x23\x94\x19\x18\xbc\x1d\x21\x47\x10\x2c\xfc\xfc\xad\x30\xcf\x31\xef\x89\x35\x18\x1e\x43\x6e\xcf\xad\x4d\xc0\x8d\x04\x96\x5e\xfe\x77\x73\xe4\xe4\x56\xf1\x4a\xfb\xb0\x3b\x7d\x9c\x5e\xbe\x2f\xa4\xd0\xd4\x37\x2b\xc3\xc2\x8d\xd7\x8a\x8e\x40\x09\x51\x22\x54\xba\x2c\x85\x67\x61\x6b\x23\x2a\x70\x21\x63\x52\x75\x63\x25\x6e\xa7\xec\x0d\x32\x9b\xc5\x64\x02\x79\x5b\x7f\x31\x47\x53\xd8\x28\xcd\xd0\xed\xa0\xd4\x2b\xfb\xcd\xee\x34\xfc\x97\x66\x90\x2e\xdd\xe4\xfc\x5e\xef\x7c\x1f\xce\xf4\x26\xfa\x21\xdd\x2f\xe4\xdf\xc7\x66\x09\xdc\x5e\x85\x77\xf1\x1e\xba\x4e\xb8\xc6\xab\x0c\xdd\x73\x0a\xb1\xf6\x7b\x1f\x04\xab\x95\x5e\xe9\xb2\xd2\xd4\xe5\xd0\x4f\x21\xad\x0a\x2c\x47\xac\xcb\x1e\x08\x6a\x71\x0d\xb3\x7a\xba\x8f\x79\x2e\x47\x6e\xb8\x04\x7c\xec\x61\x51\x8a\x90\x0b\xb5\x89\xbd\x6a\x04\x7c\xcc\xa0\xe1\x98\x26\xee\x3d\xb0\xb2\xb7\x1c\x3f\x75\x47\x65\x68\x84\x84\x81\x1b\xf5\xfd\xf2\xc2\xa3\x62\x3c\x1e\xcf\x1a\x69\xdd\x64\xe8\xd1\x0f\x0f\x8a\x51\x78\x4f\x1c\x3e\x66\xd7\x47\x5b\x65\x1d\x39\x25\xa6\x50\x6e\x6f\x0c\xd5\xe5\xf6\x7b\x54\x85\x58\x0e\xcf\xde\xa5\x90\xd7\x08\x9b\x2f\x52\xec\x7c\x3b\xd0\x24\xbc\x90\xce\xdb\x9e\xfc\x83\xb9\x56\xc6\x52\x79\xb1\xc9\x0e\x38\xc9\xca\x5d\x70\xf2\xf7\x40\xb4\x51\x1a\x8c\x45\x28\xbe\x86\xab\xb5\x7d\x6b\xee\xbb\xf9\xb3\x9f\x40\x27\xcb\x79\x68\x0d\x28\x6a\x37\x4e\xb3\x86\x7f\x08\x79\x57\x27\xfe\x0a\x00\x00\xff\xff\x6d\x6a\xf3\x97\xec\x0a\x00\x00")

func staticx_css_cbft_css_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_css_cbft_css,
		"staticx/css/cbft.css",
	)
}

func staticx_css_cbft_css() (*asset, error) {
	bytes, err := staticx_css_cbft_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/css/cbft.css", size: 2796, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_index_ft_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xfd\x6e\xe3\xb8\x11\xff\x3f\x4f\xc1\x15\x16\x67\x1b\x17\x4b\xb7\x77\x45\x51\xc4\x76\x80\xed\xa6\x57\xa4\xed\xed\x06\xb8\x6c\x8b\x22\x08\x0c\x5a\xa2\x6c\xee\x52\xa2\x4a\x52\x76\x7c\x77\x79\xf7\x0e\x49\x7d\x8b\x4a\xe4\x20\x40\x7b\x5a\x20\x12\xc9\x99\xdf\x0c\xe7\x8b\xc3\x6c\x96\x6f\xae\x3e\x7d\xb8\xfd\xf7\xcd\x5f\xd0\x4e\x25\xec\xf2\x6c\xa9\x5f\x88\xe1\x74\xbb\xf2\x48\xea\xe9\x09\x82\xa3\xcb\x33\x84\x96\x09\x51\x18\x85\x3b\x2c\x24\x51\x2b\x2f\x57\xf1\xfc\x4f\x9e\x59\xd8\x60\x49\xd0\x4e\x90\x78\xe5\x05\x30\xa3\xa7\x14\x55\x8c\x5c\x86\x9b\x58\xa1\x00\xd1\x34\x22\x0f\xdf\x2f\x03\x3b\x69\xd6\x19\x4d\xbf\x96\x2c\x52\x61\x45\xc3\x20\x94\x32\xc0\x59\xe6\xc3\xdb\x43\x82\xb0\x95\x27\xd5\x91\x11\xb9\x23\x44\x79\xc1\xe5\x13\x5c\x99\xa0\x32\x79\x01\xdf\x86\x73\x25\x95\xc0\x2f\x91\x19\x61\xb9\xdb\x70\x2c\xa2\x17\xf0\x0a\x1a\x7e\x95\x3b\x7c\xf0\x13\x9a\x0e\xb2\x0f\xf0\x33\xba\x09\xc0\x39\x39\xc3\x62\x9e\xd3\xb9\x12\x84\x04\x11\x95\xaa\x3b\x39\x0e\xbb\xbb\xd6\x16\xf6\x60\xb4\xd5\x4e\x34\x48\x7d\xc6\x1d\x17\x2a\xcc\x15\xa2\x21\x4f\x3b\xbc\x41\x8c\xf7\x7a\xda\x87\x1f\x9a\x73\x19\xd8\x38\x5a\x6e\x78\x74\x44\xe9\x76\x0e\xae\x5e\x79\xe1\x66\xab\xde\x67\x99\x0d\xa3\x88\xee\x51\xc8\xb0\x94\x30\xcf\x53\x85\x69\x4a\x84\x59\x69\xaf\x09\x7e\x28\x66\xbb\x3c\x6c\x2e\x93\xf9\xbb\xef\x50\xf1\xc5\xe3\x18\x22\x75\xfe\x0e\x25\x00\x55\xb1\x14\x4c\xa0\xc1\x9e\x92\xc3\xe5\x12\xac\xb7\xaf\xe0\xea\x41\xf5\x59\x7c\x2c\x03\xad\xb8\xb5\x80\x0c\x05\xcd\x14\x92\x22\x6c\xfb\xe5\xcb\x7f\x72\x22\x8e\xc5\x6b\xfe\xbd\xff\x0e\xfe\x7d\x91\x1e\xc8\xb0\x1c\x97\xe3\x99\x73\x6a\x1c\x38\x9a\x3b\xfa\xc1\xdf\xff\x30\x9e\xbc\x15\x81\xa3\xb9\x76\x79\x82\x53\xfa\x0b\x39\x8d\xab\xca\xb2\x46\xbe\x8d\x66\x2e\xa2\xba\x7c\x9f\xcc\x38\xaf\xa5\x43\x62\xd4\x0a\x9c\xb4\x83\xa7\xb1\xe6\x2a\x63\xf2\x65\x80\x82\xe7\x8a\xb4\x47\x2f\x03\x7a\xb6\x12\x8c\x0f\x43\xc9\xd3\x8c\xd3\x54\x91\x13\x8c\x6d\x0b\x70\x9b\x7c\x88\xfe\x8b\x0c\xc8\x43\xb6\x1f\xeb\x4b\x20\x37\xc7\xc7\x68\xea\x94\x47\x64\x34\x71\xc2\x53\xaa\xf8\x78\x55\x20\xfe\xf1\x76\x3c\x3c\xe3\x5b\x39\x9a\xd8\x24\xfe\x68\xea\xcd\x1f\xff\x30\xde\xe0\x31\x65\xe0\xcf\xf1\xaa\x48\x22\xa0\x78\x93\xf1\x0c\x11\x15\x24\x54\x74\xdf\x63\x19\xe0\x99\x6f\x18\xd9\x93\x79\x02\x87\x00\x4d\xb7\xd6\xb2\xf6\xd3\x38\xbb\x5c\x18\x25\x7f\x18\x4b\x1d\x33\x32\x00\x75\x32\x16\x38\x9e\x1d\x25\x1d\x67\x92\xe7\x61\xe6\xe6\xe3\x97\x91\x49\x36\x02\xef\xc0\x45\xc4\x20\xfb\x5f\x0b\x4f\xf7\x79\x36\x6c\x5e\x0b\x51\xf1\xaf\x44\x9f\x1e\xaf\x0b\xe8\xd4\x71\x00\xf3\xc1\x84\x2a\xd9\xe4\x23\xa3\x41\x93\xeb\x8e\x74\x6c\x16\xe8\xae\x45\x70\xc6\xfa\xa9\x76\xb6\x2c\xbf\xe2\x3c\x85\x44\xe1\x29\x32\xfb\xfb\x48\x0e\xd7\x3a\xe0\x7f\xb2\x7b\x9b\xce\xd0\xaf\xa6\xfb\x10\x44\xe5\x22\x2d\x06\xfa\xf1\x74\x2c\x4b\xef\x02\xfd\xfa\x78\x5e\x4f\x46\x24\xc6\x39\x53\xeb\xc2\x34\x7a\xb9\x5a\x34\x04\x24\xc5\x20\x27\x82\x05\x25\x72\x72\xde\x5e\x8c\x8e\x29\x4e\x68\x58\x2c\x56\x6b\x4d\x01\x5a\xea\x3a\xa6\x84\x69\x08\x6f\xad\x87\x9e\x43\xbe\x99\xd7\x04\xc5\x84\x8b\xa6\x0c\x78\x4d\x07\x26\x4b\x23\xe8\x9d\x5d\x74\x11\x56\x44\xd1\x84\xac\x33\x7d\xd1\x30\xe4\x7a\xea\x16\xa6\x3e\x65\xda\x72\x98\xb9\xd8\x6a\x25\x31\x6b\x11\x6c\x8e\x8a\xac\xb1\x10\xf8\xb8\x06\xff\xec\x89\x50\x16\x54\x1f\x74\x4d\xba\x32\xac\xfa\x46\x2c\x35\xef\x9a\xdf\x2c\xea\x3c\x59\x17\xf5\xd5\xb5\x5e\x45\xfd\xf0\xea\xb3\xec\xda\xbf\x76\xb5\x76\xd2\x99\xfd\xf9\xb8\x38\xeb\x84\xd4\x8d\x09\xa8\x6b\x38\xd7\x3e\x54\xe1\x38\xa5\x30\xfc\x3b\x94\xd6\x73\x7b\x17\xbb\xc1\x02\x27\xb2\x18\x7c\xbe\xb6\x32\xdf\xca\x90\x67\xe4\x1c\xbd\xdd\x29\x95\xc1\xcb\xb4\x23\xe5\xbb\xe4\x78\xcb\x78\x88\xb5\x30\xf3\xb9\x3d\xd7\x5c\x9a\x28\xa7\x9b\x9f\x78\x84\x59\x19\xc0\x34\x46\x95\x50\xb4\x5a\x21\x4f\x37\xdb\xde\xac\x61\x5a\x2b\xce\xd7\xf3\x9f\x52\x76\x44\x2b\x13\x85\x8b\x62\x5f\x0d\x8d\x7c\xa3\xe5\x2d\x49\x32\x06\x71\x20\x81\xd0\x3d\xff\xdb\x6f\x60\xa0\xc5\x30\xe3\x9d\x67\xec\xe3\xdd\xa3\x55\xed\x75\x77\xb5\x81\xd0\x53\x14\xb3\xa1\x53\x49\x5f\x91\xbd\x85\xd5\x11\x1a\x19\x54\xcc\x83\x66\xee\xa4\x5e\x34\x4c\x52\x59\x1f\x7d\xf3\x4d\xa5\x46\x63\xda\x2f\xc0\x9a\xa6\xaa\xf1\x1d\x84\x2d\x8b\x69\x6d\x68\x12\x1a\x4a\xaa\xfe\xac\xb5\x69\xaa\xd2\x88\x88\x8e\x1f\x6a\xb7\x5b\xaf\x96\xfe\x3c\x2f\x85\xd7\x71\xd9\xce\x8e\x32\x39\x3e\xe2\x84\xc8\x0b\x94\xe6\x8c\xb5\x43\xd8\x24\x2f\xd4\x87\x1b\x93\xce\x83\x64\x3a\x4d\xdf\xeb\x2c\xfd\x50\x26\xa9\x93\xf4\x71\xb6\x68\xc5\xc6\xa6\xbb\x45\xd8\x7a\x99\x0f\xd3\xa6\x0d\x8b\x8a\x0a\xc6\xb1\x61\xd1\x71\x0e\x64\x92\x3b\x91\xae\x78\x4a\x1a\x66\x8b\x60\xf8\x3f\x48\xa4\x4a\x54\x73\x4b\x8e\x60\xa8\x93\xa3\x67\x98\xd6\x4e\xcb\xeb\x54\xc2\xa3\x9c\x91\xe9\xa4\xb8\x87\x4f\x66\xbe\xa1\xa9\x0f\xb2\xe9\xc4\x04\xd1\xfb\xc2\xcb\x46\xb5\x0f\x4a\xb0\xc9\x39\x72\x2f\x0c\x21\x7c\x80\x3a\xf9\xa3\xa9\x73\x3d\x0c\xc7\xd2\x10\xca\x6d\x59\x4d\x7b\x20\xfd\x95\x27\x31\x06\x54\x71\xad\x0d\xe1\xfc\x0b\x3a\xae\x7f\x40\xc7\xd5\x03\xe9\x2d\xe8\x98\x7d\xde\xe2\x31\xdd\x4e\xef\x26\x45\x94\x08\xbe\xa7\x11\x11\x93\x3a\xf2\xab\xa8\x6e\x53\xcc\x3a\xf9\xd8\x5e\xf5\x0f\x3b\x92\x4e\x27\xb6\xe9\x09\x26\xed\x94\x33\xc9\xac\x8a\xf2\xf8\x59\xb0\x0b\x34\xa9\x1a\xa5\xaa\x02\xda\x76\x49\x57\x3c\x07\x77\xc3\x28\xc0\x7c\xa5\x49\x8d\x21\x1e\x8b\x58\x33\xf1\x76\x0f\x83\x66\x27\xf4\x66\x3e\x47\xf3\xd7\x78\x00\xa5\xd9\x59\x9d\x10\xd3\x26\x2f\xa0\x4c\x6b\x65\x7f\xbc\x05\xbf\xb5\x27\x66\xcd\x43\xb5\xbd\x34\x1d\x93\xdc\xb6\x0a\x8c\x4c\xf0\xe6\x59\x75\x45\x62\x7d\xbe\xe9\x92\x57\x96\x39\x2d\xc6\xdf\x12\x05\x4e\xc4\x19\xb5\x07\x51\xb9\x25\x99\x87\x70\x49\x93\xd3\x2a\x34\xa0\xd6\xe2\x66\x40\x98\xe3\xa0\x01\xdc\x97\xd5\x2d\xd5\x18\x8e\x25\xf3\x6e\x10\xf5\x66\xea\xaf\x42\xcb\x52\x16\x17\x74\x7b\x5d\xac\x95\xa7\x55\x09\x51\x0d\xee\x9a\xb6\xb2\x50\xba\xd4\xdf\x77\xb0\xa8\x7c\xcf\x28\xee\xaa\x38\xed\x33\xeb\xc3\x45\xb7\x18\x13\xac\xe9\x27\x33\x68\x04\xda\x2c\x2d\xad\x40\x93\xe6\xd8\x57\x1d\xee\x3a\x70\x4d\xe5\xb5\x4a\x74\x93\x2c\x08\xd0\xed\x8e\x20\xc3\x72\x8b\x05\xb8\x47\xa2\x03\x65\x0c\x6d\x08\x52\xb0\x90\xa7\x3a\x72\x78\x8c\xc2\x5c\x08\x92\x2a\x68\x6f\xf0\x1e\x53\xa6\x9b\xf1\x2e\x90\xd9\x03\xb4\x2f\x53\x68\x89\x2d\x22\x01\x79\x7a\xa0\x91\xc8\x03\x14\x12\x5d\xd8\x55\x21\x06\x40\x55\x29\xda\xef\x62\x7d\xe4\x4a\x2b\x80\x55\x9f\x2f\xc1\x47\xb4\xc3\x7b\x02\x2a\x92\x14\x45\x84\x11\x45\xe0\x14\xdb\xe4\x0a\x1d\x7a\x3a\x1d\x88\xdd\x0e\x40\xc0\x4f\x1e\xc7\x44\x68\xa9\x09\x02\x7f\x70\xd3\x84\x77\x64\x17\x81\xd5\x32\xc8\x0a\xdd\xdd\x2f\x5a\x54\x31\x17\x68\x5a\xc5\xa4\x76\x3a\x7c\xd5\x81\xd1\xb5\xf2\x00\xb0\x9f\xe5\x72\x37\xad\x20\x66\x6d\x19\x8f\x67\x2e\xc5\x24\xec\x37\x84\x0d\x5b\x88\xeb\xc2\xe4\x7d\x0d\xb5\xcf\x9b\xe1\xe1\x52\xa9\x0c\xf4\x7a\x9f\xd3\xbf\xfd\xfc\xe9\xa3\x6f\xee\x2b\x2d\x6e\x3d\x65\xce\x6c\xd3\x9a\xce\xfc\xc2\x17\x8b\x1e\x64\x65\x98\x1a\x57\x5b\xa6\x21\xc5\xa5\x48\xa9\xf0\x9b\x3a\xb5\x6a\x8e\xfb\x21\x8e\x27\xad\x5a\xf3\xcf\xfa\x5a\x3a\xcc\x3b\xc6\xcc\x23\x90\x1f\x47\xb8\x30\xcb\x2d\xa0\xab\x2a\x18\x1b\x96\x45\x30\x2d\xda\x6f\x1d\x1c\x8e\x23\xab\x7c\x4a\x32\x5d\x3e\xce\xab\x51\xb3\x82\x0f\xb1\xfd\xcc\x73\x11\x92\x8a\xcf\x0e\x9f\x97\x66\xe9\x3e\x7f\xbe\xbe\x6a\xb0\x8d\x91\x77\xc3\x70\x5a\xb6\x8d\x99\x20\x7b\xa3\xa8\xc1\x19\x66\x73\x7a\x62\x28\x24\x74\xe4\x75\x52\x57\xdf\xa4\x9c\xb4\x75\x0e\x03\xd5\x77\x0b\x78\x2d\xdd\xc2\x7c\x46\xd2\xad\xda\x01\xc5\xb7\xdf\x3e\x15\x8b\x1a\xcb\x01\x00\xe8\x4e\xd8\x3b\x7a\x3f\xa0\x99\x7e\x9a\xbb\xb8\x73\xf0\xdf\x3f\xb5\xb5\x52\x1b\x55\xd3\xdb\x73\xac\x7b\x6c\x3a\x91\xdd\xf9\xa2\x1f\x9d\xa3\x6d\xcc\xa7\xec\x31\x6a\x1b\x56\x17\x1d\x03\x8e\x4c\xe8\x3e\x6d\xd9\x7e\x9e\xd3\x68\x58\xd9\xc7\x53\xd2\xbe\x9d\x35\x77\x9e\xd1\xdb\x33\x46\x1e\x14\xe0\x15\x55\xd0\xbb\x40\xa6\x6c\x4a\x25\xe0\x9c\xa2\xf1\x71\xda\xdc\xf5\xcc\xad\xc6\x80\xe7\x3a\x25\x62\x6c\x09\x70\xec\xe4\xc4\x6a\xd0\x46\x78\x49\x61\x70\x21\x9c\x5a\x23\xda\x18\x83\xe5\xc2\x55\x78\x1b\x7d\x7a\x6d\xda\x66\xcb\x3b\xbe\xe1\xed\x3d\xcf\x76\xc0\xc5\x85\x14\xde\xcf\x5c\x49\x07\x6f\x47\x68\x52\x09\x69\x5e\x99\x06\xee\x4a\x8d\x5b\x77\xfb\xfa\xe4\xbe\x34\x15\x9d\x99\xeb\xda\x64\x9f\x67\x2f\x4f\x06\x21\x88\x55\x60\x7e\x33\x3f\x74\x89\xb2\x4f\xeb\x2a\x55\x14\xbb\xc6\x65\xea\x69\x15\xd7\xe0\xf7\x57\x50\x13\x50\x4e\xd6\xb2\xbe\x46\x8d\x51\xf4\xa2\xea\xdb\x82\x35\x89\xa8\xfa\xdd\x29\x1d\x32\x9e\x92\xff\x0b\xad\x7b\x17\x6b\xf3\x77\x1c\x97\x67\x3e\x1c\xd1\xc9\x5f\x61\x43\x59\x55\xd1\x4c\x90\x47\x54\x82\x6a\xc7\x0b\x94\xc2\x0e\x4c\xca\xd5\x94\x75\xe5\x1a\x22\x35\x8a\xff\x93\x92\x03\x98\xc7\xfc\x6e\x09\xb5\x7e\x8f\x86\xa0\xf7\xb3\xf7\x65\xbf\xf3\xdf\xcf\xf3\x1d\xdc\x65\x98\xc5\x85\xeb\x90\xe4\xb0\x1d\x9c\x2b\xae\x61\x41\x7b\xab\xf3\x32\xb0\x7f\x7d\xf4\xdf\x00\x00\x00\xff\xff\x43\x47\x87\x90\x8e\x24\x00\x00")

func staticx_index_ft_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_ft_html,
		"staticx/index-ft.html",
	)
}

func staticx_index_ft_html() (*asset, error) {
	bytes, err := staticx_index_ft_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index-ft.html", size: 9358, mode: os.FileMode(420), modTime: time.Unix(1447208223, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x19\x69\x6f\xdb\x38\xf6\x7b\x7e\x05\x57\x5b\xd4\x09\x60\x59\xdb\xed\x62\x31\x48\xec\x00\x99\x64\x8e\x62\x7a\xe4\x43\x8a\xc1\xa0\x28\x02\x4a\xa4\x64\xb6\x14\xa9\x21\x29\x27\x6e\x9b\xff\x3e\x8f\xd4\x61\x9d\x89\x9c\x69\x30\x2e\x10\x51\x7c\x27\xdf\x4d\x75\xf9\xaf\x8b\x77\xe7\x57\x7f\x5c\xfe\x84\xd6\x26\xe5\xa7\x07\x4b\xfb\x40\x1c\x8b\x64\xe5\x51\xe1\xd9\x0d\x8a\xc9\xe9\x01\x42\xcb\x94\x1a\x8c\xa2\x35\x56\x9a\x9a\x95\x97\x9b\xd8\xff\xc1\x73\x80\x10\x6b\x8a\xd6\x8a\xc6\x2b\x2f\x80\x1d\xbb\x65\x98\xe1\xf4\x34\x0a\x63\xb3\x0c\x8a\xb5\xdb\xe6\x4c\x7c\xae\x30\xb5\xc1\x86\x45\x41\xa4\x75\x80\xb3\x6c\x01\x4f\x0f\x29\xca\x57\x9e\x36\x5b\x4e\xf5\x9a\x52\xe3\x05\xa7\xf7\x50\x65\x8a\xe9\xf4\x11\x74\xa1\x94\x46\x1b\x85\x1f\x23\x93\x60\xbd\x0e\x25\x56\xe4\x11\xb4\x8a\x45\x9f\xf5\x1a\xdf\x2c\x52\x26\x46\xc9\x47\xe8\x39\x0b\x03\xf0\x49\xce\xb1\xf2\x73\xe6\x1b\x45\x69\x40\x98\x36\xdd\xcd\x69\xbc\xbb\xb0\xb6\xb0\x5b\xa7\xad\xf5\x9d\xe3\xd4\x27\x5c\x4b\x65\xa2\xdc\x20\x16\x49\xd1\xa1\x0d\x62\xbc\xb1\xdb\x0b\xf8\x63\x29\x97\x41\x11\x3e\xcb\x50\x92\x2d\x12\x89\x0f\xae\x5e\x79\x51\x98\x98\xb3\x2c\x2b\xa2\x87\xb0\x0d\x8a\x38\xd6\x1a\xf6\xa5\x30\x98\x09\xaa\x1c\xa4\x0d\x13\x78\x13\x62\x85\x8a\x87\xcf\xc4\x86\x42\x1c\x56\xaf\x31\xbb\xa5\xc4\x37\x32\x83\x73\x4b\x4e\x1d\x36\x4b\x40\x21\x29\x4a\x56\xf7\x0b\x1a\x16\xe6\x5b\xdd\x5b\x38\x80\x85\x2b\x1c\x09\x1a\x30\x42\xfd\x50\x61\x41\xbc\x46\xfc\xa3\xc6\x6f\xc9\xd2\xa4\x22\xe0\x32\x91\x1e\xd2\x2a\xda\x59\x0b\xa0\x60\xe8\x45\x26\x92\x22\x74\x6a\xb2\x00\x37\x14\x03\x4f\x6f\x1a\xaf\x39\x6f\xa8\x59\x59\x00\x1e\x6d\x3d\x39\x3b\x05\x5d\x4b\xad\x98\x20\xf4\x96\x6a\xd0\xee\x55\xb1\xb2\x02\x96\x10\x55\x4d\x29\x39\xff\x7b\x42\x84\x24\x4e\xc4\x5b\xfb\x7c\x0a\x01\xa9\x14\xcc\x48\x05\x22\xde\x14\xab\x27\x11\x82\x05\x4e\xa8\x95\xe1\x16\x4f\x21\x02\x02\xc1\xda\xe9\x35\x3c\x1e\xcd\xbe\x5a\x2a\x96\xac\x4d\x57\x56\x45\x42\x94\xcc\x88\xbc\x11\xdd\xa0\xc4\x5d\x04\x48\x9d\x24\xe1\xd4\x43\x04\x1b\x5c\xbe\x34\xc8\x5b\xd4\xf0\x2b\xce\xf1\xef\x2a\xd9\xc2\xdc\x18\x5b\x09\xb0\x62\xd8\xa7\xb7\x19\xe4\x03\x25\x2b\x2f\xc6\x5c\xd3\x8e\x68\xf8\xfd\x4a\x79\x86\x96\x1a\xb0\xea\x6c\xc4\x0a\x8a\x10\xd8\xc1\x6e\x76\x54\x6d\x26\x42\xc7\x20\xb5\xf2\x29\x15\x79\xa5\x8b\x5b\x77\x65\xb6\xcc\xbf\x36\x26\x3b\x0e\x02\x8e\x43\xbd\x88\x64\x1e\xad\x6d\xfb\x82\x55\xea\x4a\x5e\x37\x81\xeb\xdf\x2f\xd4\x18\x26\x12\x04\x99\xab\x0c\x25\x3d\xc5\xac\xae\x4d\x3f\xee\x2f\x99\xd0\x8d\x9f\xe4\x50\x52\x02\x5b\x5a\x36\x8c\xde\x8c\xe9\x72\x41\x37\x94\xcb\x8c\xaa\x99\x46\x8e\xe2\x09\xb4\xc1\x04\x5a\xc9\x44\x7d\xce\x2c\x2e\xb3\x3d\x15\x92\x72\x7f\x9d\x6a\x87\xb2\x0d\x73\xf5\x76\xaa\xee\xb1\x54\x79\xda\xd5\x7e\x4c\xc9\xf3\x0a\x0b\x01\x56\x9a\x43\x01\xd9\xa2\x82\xc1\x24\x4d\xdb\x79\xd9\xc5\x68\x42\x1b\xf5\xba\x5c\xf6\x9a\x99\x92\x37\x23\x7d\x89\xfb\x3a\xf5\x5f\xfc\x07\x95\x2b\x19\xc7\x30\x6d\xf9\x2f\x50\x0a\xed\xaa\xdb\xac\xa0\x9d\x5a\xaf\x9c\xb6\x1a\x44\x5f\x7a\xbd\x58\x06\xb6\x0b\x17\xed\x5c\x47\x8a\x65\xa6\xdd\x8d\xec\x90\xf1\xe9\xcf\x9c\xaa\x6d\xf9\xf0\xff\xbb\x78\x01\xff\x3e\x69\x97\x9c\x8e\xe2\x74\x3a\x71\xce\xdc\x34\x32\x99\x9a\xbc\x5c\x6c\x5e\x4e\x47\x6f\x8d\x53\x93\xa9\xd6\x39\x14\x78\xf6\x85\xee\x47\x55\x8f\x8c\x8d\xe1\x71\x32\x71\x39\xa2\x55\xcf\xbd\x09\xfd\x9d\x74\x98\xf2\x76\x0a\xec\x75\x82\xfb\x79\xf9\x26\xe3\xfa\x71\x0c\x95\xcc\x0d\x6d\xbf\x3d\x8e\xd1\x83\x63\xed\xf4\x30\xd4\x52\x64\x92\x09\x43\xf7\x30\x76\x71\x9b\x68\xa3\x8f\xe1\x7f\xd2\x01\xb4\xb9\xcd\x54\x5f\x02\xba\x1b\xc0\x26\x63\xdb\x49\x6a\x32\x72\x39\x15\x4d\xc7\x77\x73\xcd\x64\x74\x3b\xac\x4c\x46\x76\x89\x3f\x19\x3b\xfc\xff\xff\xa6\x1b\x3c\x66\x1c\xfc\x39\x5d\x15\x6d\x5b\x56\x44\xa7\x13\x10\xa6\x68\x64\xd8\xa6\x47\x32\x42\xe3\x87\x1c\xda\xb0\x9f\xc2\x8d\x06\xe6\x82\xc2\xb2\xc5\xd2\x39\xbb\x02\x4c\x92\x3f\xce\xcb\x6c\x33\x3a\xc2\x6a\x6f\x5e\xe0\x78\xbe\xd5\x6c\x9a\x49\x1e\x66\xe3\xbb\xc5\x97\x89\x49\x36\x81\xdf\x8d\x54\x84\x43\xf6\x7f\x2f\x7e\xf6\x5b\x45\x11\x36\xdf\x8b\xa3\x91\x9f\xa9\xed\x1e\xdf\x97\xe1\xa0\x8e\x23\x3c\x6f\x5d\xa8\xd2\x30\x9f\x18\x0d\x16\xdd\x7e\x5e\x99\x9a\x05\xf6\x66\x0c\x93\x34\xef\xa7\xda\xc1\xb2\x5a\xc5\xb9\x88\xec\xd5\x1a\xb9\xf3\xbd\xa5\x37\xee\x52\xf9\xa6\x38\xdb\xe1\x11\xfa\xea\xa6\x0f\x98\xe9\x73\x25\xca\x17\xfb\xf3\x6c\x2c\x6b\xef\x18\x7d\xbd\x9b\xef\x36\x09\x8d\x71\xce\xcd\x75\x69\x1a\x0b\x6e\xcd\x5d\x1e\x15\x18\xe4\x10\x00\x18\x95\xd3\x79\x1b\x48\xb6\x02\xa7\x2c\x2a\x81\x35\xac\x29\xc0\x4a\xbd\x8e\x19\xe5\x96\x85\x77\x6d\x5f\xbd\x01\xf9\x6e\xdf\x22\x94\x1b\x43\x38\x55\xc0\x5b\x3c\x30\x99\x20\x58\x91\x21\x3c\xb8\x45\x51\xc3\x52\x7a\x9d\xd9\x8f\x65\x0e\xdd\x6e\x5d\xc1\xd6\xbb\xcc\x5a\x0e\xf3\x21\xb2\x9d\x92\x98\xb7\x10\xc2\xad\xa1\xd7\x58\x29\xbc\xbd\x06\xff\xc0\x30\x6e\x0a\xa6\xb6\xd1\x35\xf1\xaa\xb0\xea\x1b\xb1\xd2\xbc\x6b\x7e\x07\xb4\x79\x72\x5d\xd6\xd7\x21\x78\x1d\xf5\xe3\xd0\x07\xc9\xad\x7f\x0b\xe8\xce\x49\x07\xc5\xdf\xbb\x93\x83\x4e\x48\x5d\xba\x80\x7a\x05\x7d\xed\xbc\x0e\xc7\x43\xb8\x61\x98\xdf\xa0\xb4\xce\x91\xab\xaf\x97\x58\xe1\x54\x97\x2f\xef\x5f\x15\x32\x9f\xe9\x08\xae\x45\x73\xf4\xcc\x5e\x10\xe0\xe1\xc6\x91\xea\x59\x51\x3c\xe3\x32\x72\x9f\x86\xdc\x32\x99\x5b\x2a\x8b\x94\xb3\xf0\x8d\x24\x98\x57\x01\xcc\x62\x54\x0b\x45\xab\x15\xf2\xdc\x15\xe8\xa8\x61\xda\x42\xdc\xc2\xee\xbf\x13\x7c\x8b\x56\x2e\x0a\x4f\xca\x73\x35\x34\x5a\x38\x2d\xaf\x68\x9a\x71\x88\x03\x0d\x88\xc3\xfb\xdf\xbe\x81\x81\x4e\xc6\x09\x3f\x78\xce\x3e\xde\x47\xb4\xda\x79\x7d\xb8\xda\x40\xe8\x19\x06\x37\xf0\x91\xae\x64\x3f\xf3\x7a\x27\x85\x8e\x30\xc8\xa0\x72\x1f\x34\x1b\x4e\xea\x93\x86\x49\x6a\xeb\xa3\xe7\xcf\x6b\x35\x1a\xdb\x8b\x92\x59\xd3\x54\x3b\xfe\x03\x88\x2d\x8b\x59\x6d\x58\x1a\x39\x4c\x66\x7e\xb4\xda\x34\x55\x69\x44\x44\xc7\x0f\x3b\xb7\x17\x5e\xad\xfc\x39\xaf\x84\xef\xe2\xb2\x9d\x1d\x55\x72\xbc\xc5\x29\xd5\xc7\x48\xe4\x9c\xb7\x43\xd8\x25\x2f\xd4\x87\x4b\x97\xce\xa3\x68\x36\x4d\xcf\x6c\x96\x9e\x57\x49\x3a\x88\x7a\x77\x74\xd2\x8a\x8d\xb0\x7b\x44\x38\x7a\x95\x0f\x87\x4d\x1b\x96\x15\x15\x8c\x53\x84\x45\xc7\x39\x90\x49\xc3\x89\x74\x21\x05\x6d\x98\x8d\xc0\xeb\x3f\x90\x48\xb5\xa8\xe6\x91\x06\x82\x61\x97\x1c\x3d\xc3\xb4\x4e\x5a\x5d\xa7\x52\x49\x72\x4e\x0f\x67\xe5\x47\xe5\xd9\xd1\xc2\xe1\xec\x1a\xd9\xe1\xcc\x05\xd1\x59\xe9\x65\xa7\xda\xb9\x51\x7c\x36\x47\xc3\x80\x31\x0e\xe7\x50\x27\x7f\x76\x75\xae\xc7\x63\x00\x34\xc6\xe5\xaa\xaa\xa6\x3d\x26\x7d\xc8\xbd\x3c\x46\x54\x19\x82\x8d\xf1\xf9\x1d\x26\xae\xd7\x30\x71\xf5\x98\xf4\x00\x36\x66\x1f\xb6\x78\xcc\x92\xc3\x0f\xb3\x32\x4a\x94\x74\x9f\x73\x66\xbb\xc8\xaf\xa3\xba\x8d\x71\xd4\xc9\xc7\x36\x74\x71\xb3\xa6\xe2\x70\x56\x0c\x3d\xc1\x6c\xde\xfb\xba\xf3\xd5\x94\xe5\xf1\xbd\xe2\xc7\x68\x56\x0f\x4a\x75\x05\x2c\xc6\x25\x5b\xf1\x06\xa8\x1b\x46\x01\xe2\x0b\x8b\xea\x0c\x71\x57\xc6\x9a\x8b\xb7\x8f\xf0\xb2\x9b\x84\x96\x41\xf1\x7f\x65\x7f\x05\x00\x00\xff\xff\xd2\xd6\x67\x41\x3c\x1b\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 6972, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_js_debug_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\x4d\x6f\x9c\x30\x10\xbd\xe7\x57\x58\x51\x24\x58\x25\x85\x1e\xaa\x5e\xa2\x56\xaa\xb2\xaa\x14\xf5\x43\x55\xd4\xee\xa5\xea\xc1\x0b\xb3\xc4\x8a\xb1\x91\x6d\x48\xa2\x8a\xff\xde\x01\x37\x8b\xed\x65\x81\xee\xa1\xb9\x64\x61\xde\xcc\xbc\xf7\x66\x86\x5d\x2d\x32\xc3\xa4\x20\x6b\xd8\xd6\xc5\x8d\x51\x3c\xbe\xd0\x99\xac\xe0\x8a\x5c\xdc\x1b\x53\xe1\x3f\x25\x6b\x03\xdf\xa8\xa2\xa5\xc6\x27\x2e\x8b\x15\xf9\x7d\x46\xf0\xcf\x02\x93\x8a\x89\x1c\x9e\xbe\xd2\x12\xc8\x3b\x72\x7e\x7e\xed\xc6\x72\x99\xdd\xe6\xa3\xaf\xef\x40\xd7\xdc\x68\x8c\x89\x9a\xf3\x30\xda\xb3\x99\x80\xec\x18\xf0\x5c\x4f\x00\x40\x29\xa9\xbe\x80\xd6\xb4\x80\xb1\x78\x49\x9f\x3e\x7d\x06\x81\xa1\xd7\xe1\xfb\xcd\xfe\xbd\x1b\x28\xc0\x7c\xec\x9b\x62\xe8\xc5\xb4\xf8\xc5\x89\x45\xcc\xe6\xd8\x0d\xa0\xce\xf8\xae\x61\x1c\xa5\xb4\x62\xa9\x35\xf8\xd5\x96\x43\x03\x69\x74\x79\x60\xfb\x65\x94\xda\xae\x69\xb4\x4a\xf6\x55\x74\x9d\x65\xd8\x21\xde\x93\xcd\xa9\xa1\x2e\xe1\x09\xd2\x1d\x74\x20\xdd\x3a\x55\x7b\xe6\x7e\xcd\x2b\x92\xc9\x1c\x8e\x54\x0e\x94\x86\x85\xed\xef\xd6\x73\x3a\xef\x66\xbf\x96\xd9\x8c\xd1\x47\x76\x68\xe1\x1e\x2d\x59\x95\xa9\x75\x99\x5c\x99\x13\x87\x88\x7c\x31\xe2\xb9\xf8\xd7\x74\xd1\x39\xfc\xe3\xee\xf6\x46\x96\x95\x14\x20\x4c\xec\xde\xd7\xea\xc4\xa9\x7b\x0e\xda\xc9\xf8\xb0\x93\x24\xf4\x96\x8f\xeb\xf8\x47\x2d\x8b\xf5\x38\x9a\x2a\x25\x3b\xfc\xda\x1f\xbd\xcd\xba\xf6\x92\xda\xa0\xd3\xe2\xcd\x76\xba\x4d\x6e\xb7\x6d\xf2\x3f\xcf\xc8\xff\x62\x8d\x5b\xe1\x5e\x55\xe8\xe5\xd1\xbb\x09\x96\x63\x87\xdc\x1b\xaa\x08\x23\x4c\x1c\x49\x0a\x75\x74\x70\x25\x1f\xb1\xd6\x38\xfe\x27\xfb\xe5\x3b\x87\xe0\xe4\x01\xe1\xd4\xc8\x6d\xdc\x3f\xc0\xf3\x2a\xd1\x15\x67\xb8\x8e\x51\x30\x4b\xb6\x23\x16\x93\x70\x10\x85\xb9\x27\xef\x83\xc3\x9d\x98\xe1\x70\xda\x6e\x85\x60\x8c\x87\xd4\x18\x26\x6c\xa9\x86\xb7\x6f\xd6\x90\x7d\x97\x1f\x94\xda\xb3\x3c\x14\xd2\xb8\x42\x1a\xca\x67\x85\x34\x63\x42\x36\xb3\x42\x36\x83\x90\x66\x46\x48\x7b\x16\x8e\xfd\x01\x13\x0c\x2b\xa1\xff\x50\xc2\x23\x41\x49\xf4\x39\x0e\x7c\x3c\xf8\xfa\x35\x33\x59\x9b\x21\x0b\xf7\xb3\xfd\x13\x00\x00\xff\xff\xe6\xe2\x76\x3a\x70\x08\x00\x00")

func staticx_js_debug_js_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_js_debug_js,
		"staticx/js/debug.js",
	)
}

func staticx_js_debug_js() (*asset, error) {
	bytes, err := staticx_js_debug_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/js/debug.js", size: 2160, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_debug_rows_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\xb1\x6e\x83\x30\x10\x86\xf7\x3c\xc5\xf5\xd4\x95\x92\xaa\xea\x06\x4c\xdd\xd2\x29\x43\x96\xaa\x83\xc1\xa7\x60\xe1\xd8\xc8\x36\x82\x08\xf9\xdd\x6b\x83\xa9\x50\xbb\x74\xe9\xe4\xff\xe4\x4f\xf7\xdd\x5d\xd1\xbe\x54\x67\x3d\xda\x22\x0f\xe1\x70\x28\x1c\xab\x25\x41\xad\x0d\x27\x53\xe2\x11\xa1\x91\xcc\xda\x12\x39\xd5\xc3\x15\xab\x03\x40\xe1\x4c\x7c\x62\x68\xa1\xd1\xd2\xf6\x4c\x95\x38\xcf\x37\x36\x9d\xde\x49\x79\x8f\xd5\x89\xee\x45\xee\xda\x84\x3d\x64\xd9\x6f\xf4\x92\xd0\x0b\x93\x03\x2d\x70\x96\x2d\xdd\xf3\xb5\x7d\xb0\x80\xba\x66\x86\x7a\x62\xae\x44\xa3\x47\x10\x0a\xb8\x6e\xde\xe2\x20\x67\xb2\x83\x74\x16\xb7\x41\xf8\x1a\x00\xe6\x39\x90\xde\xa7\xea\xc7\x36\xcf\xb8\x61\xbb\x2d\xb6\x92\xc3\x28\xb8\x6b\x4b\x7c\x3d\xf6\x13\xee\xdd\x4d\x1b\xd5\x9d\x24\xe5\xc4\x8d\x2c\x38\xc3\x9a\x0e\xea\x3b\x3c\x0a\xc5\x69\xc2\x6a\x91\x3e\x75\x1f\x6b\xfd\xe9\x7d\x58\x82\xef\x54\xf9\xde\xf5\x0f\x62\xf1\x17\x73\xc8\xf1\x18\xe9\x62\x09\x5b\x81\xef\xaf\xaf\x00\x00\x00\xff\xff\x63\x5f\x1c\x85\x0d\x02\x00\x00")

func staticx_partials_debug_rows_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_debug_rows_html,
		"staticx/partials/debug-rows.html",
	)
}

func staticx_partials_debug_rows_html() (*asset, error) {
	bytes, err := staticx_partials_debug_rows_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/debug-rows.html", size: 525, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_debug_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x0a\xcb\x97\xdd\x3d\x04\x53\xb8\x70\x48\x72\xaa\x40\x3d\x80\x10\x6f\xe0\xd8\xd3\xc4\x5a\x27\x8e\x6c\x67\xb7\x4b\xd5\x77\x67\xfc\x27\xa4\xe9\x22\x01\x85\x4a\x8d\x1c\xcf\xcc\xef\x1b\x7f\xd6\xa4\xec\xb6\x44\x68\xee\x5c\x45\x47\xde\x42\xd1\x01\x97\x60\x69\xbd\x83\x66\x6a\x4b\xd6\x6d\xeb\xcd\xa6\x94\xea\x89\x0c\x6d\xe1\x3a\xf3\x5c\x51\xb0\xd6\xd8\xcf\xe0\x1c\xa6\xd3\xb9\x96\x6b\xb0\x9e\xc4\x67\x21\xf9\xd0\x82\x0d\x05\x42\x1b\xfe\x48\x89\x35\x1a\x72\x0a\xad\x37\x84\x9c\x4e\x97\x8c\xf3\x79\x53\x32\x54\x08\x42\x07\x63\xfb\x19\x19\xd6\x45\x67\xac\xfa\x6e\x06\xcf\xf5\x8c\x09\xdb\x91\x12\xbb\xba\xcc\x6d\xad\x99\xc6\x18\xc2\xa0\xe6\x0d\x68\x82\xfb\x15\x55\xc3\x38\xf9\xaf\xfb\x41\xc2\xf1\x0b\xef\x97\x9e\x85\xd1\x85\xeb\x8b\x77\x44\xa0\x00\xc2\x8b\x58\x93\x01\x84\xa4\x0a\x12\x4a\x12\x92\xc5\x78\xe6\x5f\x88\x67\xce\x87\x9f\x95\x65\x54\x0c\x06\xf4\x46\x82\x46\x67\xd5\x22\xee\x5f\x46\x3c\x85\x87\xa3\xa7\xab\xee\x73\x13\x34\x33\xf2\x4f\xc9\x5f\xf4\x3f\x6a\x2e\xa0\x33\x1a\x2f\xaa\xa2\xf7\x8d\x86\x27\x20\x49\x82\x0c\x98\xf0\x30\x7b\x90\x5c\xbd\x5c\xfc\x95\x65\x3b\x23\xfe\xd4\x2b\x4c\x25\xfb\xdd\xbf\xda\x24\x8d\xd8\xcb\x9b\x1d\x8a\xed\xae\xad\x41\x20\xc6\x6f\xf5\xe3\x75\xef\xe6\x70\x70\xe0\xa3\x0b\xf1\x7d\xfb\x76\x39\x4c\x33\x79\x6f\x86\xdc\xbc\x9b\x9a\x5e\x2d\xed\x37\x7e\x20\xf8\x2f\x46\xab\x7a\x6e\x5f\xae\x4e\x90\x26\x45\x89\x47\x74\x20\x4c\x1d\x1e\xe4\xfe\x21\x4f\x60\x70\xb6\x64\x89\xfd\x7f\xa5\x5a\xf0\x1f\x15\x68\xe9\x82\xd6\x27\xf0\x24\xbd\xad\xc5\xae\x2d\x2b\x59\xb0\xe9\xd5\x27\xe1\x10\x4b\xbf\x81\x9b\xb4\x77\x69\x38\xbb\xf7\xf5\x0c\xc4\x65\xd8\x19\x2d\xd4\xa7\xd3\x2a\xf5\x7c\x2e\x59\xd8\x5e\x3e\x00\x2b\x2c\x5e\xdf\x35\x33\xda\xb1\x02\x2e\x49\xbf\xa7\x45\x4b\x67\x64\x88\xa8\x41\xe8\x49\xa6\xf9\x26\xce\x8a\x8a\xde\x31\xe7\xb9\x57\xe2\xc8\x46\x6e\xbd\xe2\xda\xb1\x78\x29\x85\x35\xcf\xee\x4d\xe7\x7b\x7d\x47\x19\xb2\x7f\x04\x00\x00\xff\xff\xd5\x2e\xf4\xc1\x38\x05\x00\x00")

func staticx_partials_debug_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_debug_html,
		"staticx/partials/debug.html",
	)
}

func staticx_partials_debug_html() (*asset, error) {
	bytes, err := staticx_partials_debug_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/debug.html", size: 1336, mode: os.FileMode(420), modTime: time.Unix(1446874443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_ft_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x30\xda\xdd\x78\x03\x44\xd6\x2e\xd0\x4b\x12\xcb\x45\x8b\xa2\x40\x0f\x4d\x2f\xb9\x17\x94\x38\x91\xd8\xd0\x12\x41\x52\xb1\x0d\xc3\xff\xbd\x43\x52\x9f\xae\x9c\x04\x69\x92\xe6\x10\x03\xb1\x29\x6a\xf8\x66\xde\x70\x86\x2f\x9c\x33\x7e\x4b\x8a\x2c\xd4\x79\xb9\x8a\x03\x50\xaa\x54\x5f\x41\x6b\x9a\x41\x40\x52\x41\xb5\x8e\x03\x2a\x40\x19\xe2\xbe\x43\x46\x8b\x0c\x94\x5d\x90\x8a\x92\xde\x04\x44\x95\x02\x6a\x93\x60\x31\x21\x64\xbb\xed\x63\xec\x76\x93\x79\x84\x1e\x16\x93\x49\xe3\x88\x5f\xc7\x01\x2f\x18\xac\x2f\xe9\x12\xf4\x4c\x40\x91\x99\xdc\x2e\x75\x06\xb5\x4b\xc1\xb5\xf9\x62\x8d\x40\x3b\xd4\xfe\x3b\x55\xae\xdc\x1c\xce\x52\x92\x2b\x40\xbc\x88\x7b\xdb\xe8\x7b\x01\xab\xf7\xee\xe1\x6a\x23\x21\x4e\x04\xdc\xc2\xb1\x2e\x2b\x95\x82\x9b\x48\xcb\x2a\xcd\x13\xaa\x21\x70\x00\xf8\xa9\x41\x65\x25\x44\xa8\x78\x96\x9b\x1a\x1b\xd1\x93\xca\x98\xb2\x68\x2c\x12\x53\x10\xfc\x0b\x19\x5c\xd3\x4a\x18\x37\xd6\x4b\xd2\x5b\x48\x8c\x75\x11\xe8\x2a\x59\xf2\x0e\x06\x81\x78\x83\x91\x89\x8d\xcc\x79\x8a\xa0\xed\x28\x94\xa2\x42\x8e\xf3\x88\x2f\xc8\x25\xac\x88\x63\xdd\x44\x10\xf9\x10\x6a\xb6\x11\xad\x07\x5a\xd2\x36\xac\x82\xde\x26\x54\x85\x06\xd6\xe8\xf2\x33\x06\x43\xae\x70\x48\xea\xe4\xcd\x23\x6b\xeb\x32\x58\x6f\x03\x8e\x0c\xc5\xbc\x34\xeb\xfd\x83\xfb\x0e\xb5\x51\x5c\x02\x6b\xb2\x6b\x54\x8f\x83\xc9\x49\x51\xae\x14\x95\x0b\x07\x4d\xec\xee\xcd\x23\x93\x8f\x99\x90\x15\x67\x26\x8f\x83\xb3\xb3\x7f\x82\xc5\xc7\x2a\xbd\x01\x73\xc8\x74\xd1\xbd\xc0\x91\x6a\x3d\xdb\x4a\x51\x20\x81\x9a\x38\xf8\xb7\x2d\x97\x53\xe2\x86\x9f\xe0\xfa\x04\x47\xed\x83\x6e\x77\x73\x50\x60\xf8\x66\x66\xb7\x84\x1c\xc5\x64\x4a\x05\xa7\x7a\xda\xdf\x15\xc3\xda\x18\x7e\xa9\xa3\xed\xb6\xf5\xb9\xdb\x05\x8b\xc1\xa3\xdd\x07\x8c\x95\x8d\x42\xb5\x73\xcd\x36\xed\x07\xd4\x15\xa3\x0b\xab\x2d\xc8\x7e\x68\xf6\x53\xbb\x1c\x2e\xc1\x76\xea\xdb\x1c\x17\x89\x96\x17\x91\xff\xe9\x7b\x6e\x77\xfd\x20\x9a\xa7\xd2\x31\x78\x00\x9f\xae\x23\x5c\xf7\xf3\xf4\x06\xcf\x0b\xc6\x7d\x9f\x76\x7b\x74\x12\x0c\xd6\x34\x1f\xdf\x1b\x1e\x20\xb8\xbb\xa7\xf6\x32\xd1\xe5\xf2\x8e\x2e\xb2\x81\xd8\x2e\x72\xc4\x89\x7d\x1a\x46\x3e\xe8\xa4\xc3\x7c\xf0\x50\x2b\xe0\x55\x10\xb2\xc7\x42\xa8\x79\x56\x74\xac\x5c\x70\x8f\xa2\xc5\x40\x80\x79\x1d\xbc\x8c\xa2\x3a\x6f\x39\xdd\xc3\xa6\x2b\xcb\xe6\x70\xc0\x5f\x7b\x54\x59\xb9\x68\x0e\xb4\x51\xdd\xf8\x60\xdb\xfd\xf7\xc4\xc3\x9d\x18\x7d\xf1\x28\xb8\x78\xdd\xb2\x41\x1c\xeb\xc7\x8a\x47\x2d\x19\xa4\x4e\xdd\xf3\x49\x87\x73\xf0\x70\x01\xb9\xa2\x2a\x83\x9e\xa2\xfd\x41\x21\x89\x9f\x5f\x48\x46\x15\xa4\x25\x60\x5c\x2e\x3c\x03\x3f\xfe\x96\xfc\x18\x50\x98\x49\xaa\xe8\x52\xe3\xf4\xcc\x1b\xe8\xbd\x2e\x1d\x8b\xb1\x83\xb5\x41\xee\x35\xf5\xf0\xb5\x0b\xba\x89\xcb\xff\xd3\x78\xf4\x37\xd6\x03\x16\xd0\xe9\x88\xf0\xec\xcf\xbc\x09\xcd\x9b\xd0\xbc\x0c\xaf\xa7\x16\x9a\xb1\x7b\xcc\xd1\xe8\x45\x86\xb4\x26\x45\x2a\x2a\x86\x24\xa7\x91\x36\xd4\xf0\x34\xc2\xe6\x34\x9c\x0a\xed\x7b\xcf\xce\x2a\x33\xcb\xcd\x52\x4c\x83\xc8\x9f\xb0\x3d\xad\xe2\x85\xac\x4c\x98\xa9\xb2\x92\x4f\x70\xe1\xb9\x47\x9f\xa4\xe2\x4b\xaa\x36\x2f\x74\x89\xd9\xcf\xa9\x36\x1b\x9b\xeb\x59\xef\xde\x77\x4a\x66\xfb\x6a\x4e\xb6\xb8\x54\x52\xc6\x38\x26\x37\x29\x11\x75\x79\x4e\xde\xfd\x27\xd7\x17\x93\xdd\x64\xb0\xd8\xab\xd2\x18\x84\x17\x2d\x0b\x94\x94\x8a\x81\x3a\x27\xff\xcb\x35\xd1\xa5\xe0\x8c\xfc\xc5\x18\x73\x50\x23\x58\x04\xa5\xc4\xb0\x3e\x22\xe8\x21\xa6\x37\x38\xb4\x34\xbf\x6f\x69\xee\x82\x5a\xe5\xdc\xa0\x9a\x4a\x9a\xc2\x79\x7d\x34\xda\x88\xb0\x8a\x7d\x86\x7e\x06\x00\x00\xff\xff\x0b\x45\xb2\x43\xaf\x0f\x00\x00")

func staticx_partials_index_ft_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_ft_list_html,
		"staticx/partials/index/ft/list.html",
	)
}

func staticx_partials_index_ft_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_ft_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/ft/list.html", size: 4015, mode: os.FileMode(420), modTime: time.Unix(1447209314, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_ft_new_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x59\xd9\x6e\xdb\x38\x17\xbe\xcf\x53\x30\xba\xa8\x1d\xc0\x8a\xfa\xf7\xbf\x98\x41\xc6\x36\xd0\xe9\x2c\x28\x30\x53\x14\x68\x7b\x55\xf4\x82\x92\x18\x9b\x30\x25\x0a\x24\x95\xa5\xae\xdf\x7d\xb8\x89\xa4\x36\x5b\x4e\x33\xc5\x08\x48\xb4\x9d\x8d\xe7\x3b\xfc\x78\x44\x2f\x73\x7c\x07\xca\x4d\x8c\x6f\x57\x51\x81\x04\x8c\xd6\x17\x17\x4b\x4a\x40\x46\x20\xe7\xab\x28\x65\x08\xe6\x19\xab\x8b\x54\xbe\x00\x60\x49\xf0\x7a\xc9\x2b\x58\x36\xef\x37\xe4\xb1\xda\xe2\x8c\x96\xc0\x5d\xc5\x29\xa5\xbb\x68\xbd\x4c\xa4\xac\x55\x91\x27\x79\x01\xc1\x96\x21\xe9\x26\xc1\x65\x8e\x1e\x10\x8f\xcc\x73\x00\xde\x9a\x7b\x23\x95\x40\xad\xe5\xb5\x55\x74\x7c\x4b\xef\x57\x11\xe6\xbf\xe7\x58\x44\xeb\xfd\xbe\x44\xf7\x5a\xe9\x1d\x2c\xd0\xe1\x30\x28\x7c\xd9\x48\x6b\xb3\xef\xd0\xbd\x71\x63\x9c\xe8\x21\xd8\x51\x37\xb6\x3e\x3e\x56\x08\xbc\x78\x01\x5a\xf7\xab\x15\x98\x41\x82\x21\x9f\x45\xeb\xd7\xea\xbc\x4c\x94\xae\x0f\x71\x99\x50\xa2\x52\x66\xd3\x68\x7c\x23\xc6\x28\xfb\x1b\x71\x0e\x37\x28\x6a\x52\x05\x09\x62\x02\xe8\xff\x71\x0e\xcb\x0d\x62\x4a\x21\x23\x14\xee\x22\xc0\x28\x41\x56\x44\x47\xbc\xdf\x87\x36\x0e\x07\xe9\x47\x7a\x50\x8e\x6e\x29\x2b\x1a\x93\xfa\x5a\xfd\x8b\xb7\x94\xe1\xaf\xb4\x14\x90\x34\xb6\xd4\x63\x83\x99\x0a\x2d\x50\x88\x37\x8c\xd6\x95\x56\xfb\x53\x5d\xb9\x44\xda\x54\x2d\x09\x4c\x11\x51\xef\x65\xc6\xcb\xaa\x16\x5e\xc0\xe2\xa5\x0f\x6b\x31\xa3\x24\xe6\x45\xfc\x0a\x48\xe4\x85\xf4\x1c\x6b\xed\x36\xb4\xf6\xfa\x59\xb2\xae\xc1\x94\xb1\xd8\x62\xd1\xde\x6c\xdc\xc1\x38\x6d\x54\xff\x7b\x19\x84\xac\x93\xad\xdf\xee\x67\x5b\xc8\x63\x9d\xe0\xd9\x0d\xd0\xe7\x3f\x30\x22\x39\xbf\xc6\xae\xa8\xdc\x08\xda\xc8\xda\xa2\x1a\x48\x04\xf6\x69\xec\xd7\xa7\xc6\xce\xda\xd3\x39\xed\xd7\xa9\x7a\x52\xd0\x1c\x11\x9f\x9b\x5e\xce\x01\x10\x32\x3d\xab\x48\xa0\x07\x11\xb5\x30\xb5\xd9\xef\x48\xe3\xbc\x07\x21\xa8\x08\xcc\xd0\x96\x92\x1c\x49\x7c\x2b\x82\x20\x47\x00\x95\x42\x56\x23\x04\xa5\x92\x48\x6c\x3a\x9b\xa0\xfd\xc5\x94\x42\x52\xf8\x1d\x2d\x24\x2d\x70\x46\x21\x69\x25\xa0\xb4\x26\xa0\xed\x92\xcc\x11\x41\x99\x18\xc8\x69\xdb\xbd\x7c\x4f\x2b\x81\x69\x29\xad\x08\x83\xbe\x2e\x40\xc8\x81\xb8\x36\xe1\x9b\x41\xa6\x8f\xf2\x41\x06\x05\xda\x50\xf6\xa8\x86\x04\x04\xc0\x25\x70\x1a\xfc\x35\x63\xce\xbb\xf4\x6f\xac\x82\x3b\x48\x6a\x89\x57\xb4\x8e\x63\x90\x6d\x29\x95\xb9\xd6\x2a\x1a\x47\x10\xc7\x92\x3d\xb4\xa0\x8b\x3b\x31\x81\x3f\x15\x82\x0f\xb4\x66\x19\x3a\x86\x41\x20\x71\x06\x08\x46\xeb\x59\x50\x18\x0a\xa0\x0d\x03\x77\x12\x93\x71\xf0\x2a\xd3\x81\x30\x3a\xff\x2e\x12\xad\x19\xec\xa6\x7c\x2b\x0b\x96\xfc\x82\x07\x97\x92\xfd\x4a\x4c\x66\xc7\x21\x3c\x97\x90\x7f\xad\xb3\x1d\x12\x9a\x3b\xcf\x81\xd0\xb1\x55\x17\xc1\x27\x90\x93\xe7\xa3\x51\x13\x2d\x76\x4a\x75\xc8\xf1\xf7\xb1\x92\x71\xf5\x1e\x32\x58\xf0\x27\x43\xa1\xde\xc0\xfc\x0e\x96\x19\xca\x8f\xc3\xd2\x71\x34\x7d\x6e\x19\xc5\x73\x57\x34\x86\x2a\x04\xc5\x2a\x9a\xfb\x19\xb0\x00\xd5\x95\x9a\x13\x6e\x24\xbd\x90\xa6\xac\x84\x3c\x50\xfd\xec\x8d\x7f\x09\x16\x46\x05\x34\x94\xfd\xe1\x50\x75\xf4\x15\x3b\x40\xcb\x83\xd1\x7b\x15\xc2\xbe\x52\xb2\xef\xea\xe2\x2f\x5c\xa2\xb6\xaf\x43\x5f\xe9\xf4\xa2\x37\x0e\xaf\x6c\x2b\x78\x40\x90\xcb\xa4\x19\xc1\xf7\xd5\xd6\xa7\x4f\x6f\x7f\xfb\x01\x95\xd5\x72\x33\xbd\xae\x94\xda\xb3\x4c\xf8\x9e\xff\xf3\x27\xfc\x80\x89\xd6\x84\x9f\x1b\x0e\x86\x04\xd8\xa9\x5f\xd7\x38\xbf\x3a\x31\xf7\x47\x1a\x4a\xb3\x34\xa3\x42\x3a\x10\x88\xf7\x9f\x7c\x0e\x15\x7c\x75\x4e\xe9\x6f\x1a\x1b\x6d\xbc\x4e\xc0\x71\x0a\x83\x9f\xdb\x1d\x67\xd8\x55\xaa\xfe\x50\xae\x74\xbe\xad\x54\x41\x1c\x0e\xe1\x32\xd7\x24\xa2\xcc\x48\x9d\x23\xab\x37\x36\xd6\xc4\x2f\x72\xae\x31\x1d\x4f\xae\x2b\xe7\xf1\x7e\x5d\x15\x73\x2a\x81\xdc\x49\x20\xd1\x6c\xf0\xb5\x69\xe7\xd5\xab\xf9\x65\x07\x9a\x6f\xdf\xc0\xe5\xb1\x78\xaf\xc2\xc9\xe5\x08\xcf\xb5\x5e\x01\xdf\x69\x1d\x4b\x77\xfd\x44\x8f\x62\x3a\x44\x90\xce\xcf\x6e\x01\xee\xb4\xfd\xaa\x2d\x30\x90\x16\xc9\x2f\x38\xcc\xd1\xbc\x99\xd8\x7a\x88\xcd\x8d\x21\xd8\xcf\xbb\x60\x5c\x67\x7c\x9c\x58\x62\x75\x7e\xbe\x48\x43\x01\x27\x4f\x28\x45\xe0\xed\xa8\x4f\x15\xfd\x0c\x7f\x45\xf3\xdd\x95\xfe\x92\xf6\x45\x7a\x8a\x2a\x46\x97\x80\xb7\x63\x81\xf6\x99\x7a\x6c\x15\xd8\x0d\x92\xff\x30\xfd\xf7\x88\x7c\x4a\x61\x1f\xa9\x89\x8f\x90\x6d\x90\xb0\x9b\x12\x83\xc4\x3e\xe5\xcb\x55\x13\xbb\xba\x32\xe6\xf8\x18\xb9\x0f\x7b\x0b\xc6\x3a\x46\x28\x46\xb1\xd9\x3c\x79\x42\x5b\xee\xc8\x79\x3c\x04\x79\x14\x35\x11\xb8\x52\x3b\x0a\x82\xd5\xdd\x76\x6d\xca\x72\xec\x4b\xc3\xf8\x45\xf9\x51\x7f\xe1\xb7\x80\xfb\xa6\xd6\x9d\xbe\xbf\x93\xb3\x71\x20\xb5\xdf\xdf\xb4\xbf\x27\xb0\x3c\xd2\x29\x1e\x27\xc0\x00\xf6\x13\xeb\xf9\x80\x9b\x09\x78\x2b\xad\xe9\x5d\xe2\x89\x2e\x2d\x08\x61\x64\x06\xce\x2a\x27\x32\x9b\xdc\x89\xf9\x9a\x0a\x1c\x3c\xbd\xd1\x6a\x72\xfc\xa1\x4e\x0b\xb7\x95\x37\x30\x5e\x7a\x7b\xcb\x65\xb7\xa0\x52\xd6\x1b\xff\x79\xab\x58\xb3\xeb\xe4\x29\xae\xdb\x0f\x39\x70\x6d\xf7\x93\x6d\x51\xb6\x4b\xe9\x83\xdf\xe7\x6b\xa3\x6f\x8e\x0f\xd2\xbd\xab\x0b\x20\x83\x15\xb8\xdc\x70\xef\x25\xd1\x6e\x02\xb7\x29\x1b\x5a\xa5\x07\x76\x51\x93\x30\xd8\xb4\x16\x82\xba\xcd\xd9\x54\x94\x40\xfe\xc5\x99\xf2\x2a\x2b\xe8\x8d\x3e\x2f\x13\x23\xe5\xcd\x7b\xda\xb4\xfa\x53\xf6\xe8\x82\x6c\xf5\x67\x70\x46\x70\xb6\x5b\x45\xcd\x9e\xcf\x3c\xdc\xd1\x5a\xb4\xec\x2c\x3a\xeb\xf6\xa2\xdd\x27\x07\xb7\x4e\xd7\xf7\x92\x8b\xee\x47\x8e\x7e\xe0\x4b\x4f\xb6\x06\x0c\xdd\x69\xeb\x4a\xfc\xaa\x1b\xa9\x41\x90\x9b\xea\xea\x66\x2d\x47\xb7\x50\x72\x5f\x98\xde\x66\x03\x73\x68\x87\xd9\x1c\x6f\x64\x91\x0b\xd4\xda\xf6\xd4\xb4\x14\xec\x5e\xf6\xec\x0c\x98\xf9\x54\xe5\xa7\xcc\xf4\x60\x3c\x03\xbb\xd5\x19\xd8\xe9\xfd\xd7\xff\x08\x80\x0b\x30\xb8\x84\xfc\x60\x5c\x81\x4e\xc9\x33\xa1\x7b\xd4\x58\x1b\xe3\x2e\x6d\x2e\x13\x45\x95\xea\x37\x81\xe6\xb7\x01\x2e\x1e\x09\x5a\x5f\xe8\x9f\x05\xae\x03\x1e\xdd\x5f\x28\xba\x46\x90\xdd\x80\x94\x8a\xed\x2f\x17\x87\xbe\x8c\x34\xe1\xb7\xbf\xb5\x46\x05\xf3\x5c\xb2\x54\x2c\x68\x75\x03\x7e\xaa\x1e\x06\xd5\x6c\x2f\xa1\xe4\x0b\x89\x09\x2e\x8f\x8b\xeb\x75\x2b\xe8\x64\xb5\xa2\x5a\x1d\x62\xc1\x60\xc9\x95\xe4\x0d\xc8\x60\x85\x05\x54\x4d\xa9\xb3\xa1\xe9\xf1\xda\x11\x68\xe0\x4e\x0e\x48\x50\xa9\xf4\xff\x97\xa1\xcb\xf6\xca\xd1\x0b\xef\x95\x15\x96\xe9\x36\x29\xfb\x27\x00\x00\xff\xff\x37\x25\xa2\xd8\x07\x1b\x00\x00")

func staticx_partials_index_ft_new_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_ft_new_html,
		"staticx/partials/index/ft/new.html",
	)
}

func staticx_partials_index_ft_new_html() (*asset, error) {
	bytes, err := staticx_partials_index_ft_new_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/ft/new.html", size: 6919, mode: os.FileMode(420), modTime: time.Unix(1447209193, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_start_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x41\x4f\x03\x21\x10\x46\xef\xfc\x8a\x2f\x3d\xdb\xd6\x7a\x54\xe4\xee\xc5\x78\xf3\x0c\xec\x20\x24\x2c\x18\x18\xda\x6d\x8c\xff\x5d\x68\x76\x13\x7b\x22\xbc\xc9\x7b\x0c\x72\x0a\x67\xd8\xa8\x6b\x7d\xdd\x85\x34\xd1\xf2\x49\xd1\xe6\x99\x76\x4a\x00\xd2\x9f\xd4\x7a\x07\x67\x58\xe3\x58\x1e\x3b\x1b\xa3\xee\xa9\x01\x10\x2a\x34\x5c\x8b\x71\xcf\xb4\x30\x2a\x95\x33\x15\xb8\x5c\x60\x73\xb3\xde\xe8\x4a\x98\x34\xeb\x83\x3c\x0e\x67\x73\x3f\x22\xdd\x26\xe4\x42\x22\x5c\x73\xeb\x4e\x28\xb5\xf7\xc6\x16\xb8\x04\xf6\x60\x4f\x78\xa7\x0b\xde\x6e\xc8\x34\xe6\x9c\xb6\xcc\x7a\x08\x59\xf9\x1a\x49\x89\xc3\xff\xed\xe1\x4f\x0f\xb8\x27\xe3\x9f\x3f\xfd\xf1\x59\x97\xaf\x90\xf6\x26\xf7\xd8\xfc\x8c\xa7\xc7\xef\xe5\x45\xfc\xf6\xdc\xda\xf9\x0b\x00\x00\xff\xff\x3c\xde\xdc\xcd\x11\x01\x00\x00")

func staticx_partials_index_start_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_start_html,
		"staticx/partials/index/start.html",
	)
}

func staticx_partials_index_start_html() (*asset, error) {
	bytes, err := staticx_partials_index_start_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/start.html", size: 273, mode: os.FileMode(420), modTime: time.Unix(1447042892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/css/cbft.css":                staticx_css_cbft_css,
	"staticx/index-ft.html":               staticx_index_ft_html,
	"staticx/index.html":                  staticx_index_html,
	"staticx/js/debug.js":                 staticx_js_debug_js,
	"staticx/partials/debug-rows.html":    staticx_partials_debug_rows_html,
	"staticx/partials/debug.html":         staticx_partials_debug_html,
	"staticx/partials/index/ft/list.html": staticx_partials_index_ft_list_html,
	"staticx/partials/index/ft/new.html":  staticx_partials_index_ft_new_html,
	"staticx/partials/index/start.html":   staticx_partials_index_start_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"css": &_bintree_t{nil, map[string]*_bintree_t{
			"cbft.css": &_bintree_t{staticx_css_cbft_css, map[string]*_bintree_t{}},
		}},
		"index-ft.html": &_bintree_t{staticx_index_ft_html, map[string]*_bintree_t{}},
		"index.html":    &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"js": &_bintree_t{nil, map[string]*_bintree_t{
			"debug.js": &_bintree_t{staticx_js_debug_js, map[string]*_bintree_t{}},
		}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"debug-rows.html": &_bintree_t{staticx_partials_debug_rows_html, map[string]*_bintree_t{}},
			"debug.html":      &_bintree_t{staticx_partials_debug_html, map[string]*_bintree_t{}},
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"ft": &_bintree_t{nil, map[string]*_bintree_t{
					"list.html": &_bintree_t{staticx_partials_index_ft_list_html, map[string]*_bintree_t{}},
					"new.html":  &_bintree_t{staticx_partials_index_ft_new_html, map[string]*_bintree_t{}},
				}},
				"start.html": &_bintree_t{staticx_partials_index_start_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
