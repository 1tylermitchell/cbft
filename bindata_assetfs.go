package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_css_cbft_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x78\x91\xdd\x45\x64\x38\x7e\xc5\x96\x71\x03\xdc\x1a\x28\xb2\x09\xba\xe8\xb2\xe8\x82\x12\x87\xd6\xc0\x14\x49\x50\xf4\x2b\x45\xff\xbd\x94\x48\xdb\xb2\xfc\x88\xdc\x76\x65\x91\xf4\x9c\x39\x33\x73\x66\xc8\x6e\x22\x60\x0d\x6f\x8a\x51\x41\xba\x79\xf9\x13\x25\x8a\xed\x48\x97\x2b\x93\x47\x0b\xa3\x56\x9a\xfc\xe8\x10\xa2\x29\x63\x28\x17\xee\xd0\x5a\x95\xc7\xe4\xa9\xa7\xb7\xb3\xce\xcf\x4e\xa7\x8b\x92\xc1\xf6\x8d\x6a\xed\x8e\x49\x97\xca\xc5\x4a\x50\x13\xad\x30\xb2\x06\x20\xca\xa8\x64\x02\x2a\x08\x42\x12\x9a\x2e\x4b\x48\xc9\x62\xf2\xc0\x27\x9c\x72\x3e\xf3\x07\xca\x30\x30\x0e\x55\x6f\x49\xa1\x04\x32\xf2\xc0\x28\xf4\x81\xfa\xe3\x54\x09\xe5\x4e\x1f\x9e\xd3\x29\x24\x7d\xbf\x17\x08\x79\x26\x77\xd2\x89\x33\xb5\x06\x13\x48\xed\xc1\x87\x83\x09\x24\xd3\xd9\x05\xa2\x43\x3e\xe6\xcf\x75\xa2\xd1\xde\x86\xa5\x8e\xe4\xa4\x8d\x63\x2d\x68\x0a\x99\x12\xec\xe0\xf7\xd4\x47\x8f\x4f\x9b\xc9\xe8\xbb\xb8\x18\x2d\x32\x70\xd9\x48\x80\xf5\x59\xe2\xcf\xa3\x0d\x24\x4b\xb4\xae\x14\xdb\xa8\xc0\xf7\x2a\x09\x81\x97\xdb\x0a\xff\xc9\xd5\xfb\xcd\x3f\x5c\x3b\x3b\x8f\xa4\x5a\xcd\xa9\x4c\x41\xcc\x0d\x50\xeb\x8b\x99\x53\xb3\x40\x19\x59\xa5\x1d\xd1\x2a\xf9\x87\xbd\xbd\x44\x06\x57\x6a\x52\x40\x6a\x51\xc9\xc3\xc7\x2b\xd0\x7d\x56\xea\xa8\xd7\x4a\xda\x34\xff\x54\xca\xf5\xcc\x78\x74\x17\xa5\x7c\xff\x91\x58\x59\xc7\x32\xb8\xc8\xec\x75\x2a\x75\x33\x57\x66\x57\xab\x0b\xc6\xfd\x51\x5b\xe3\x9a\x2c\xf7\x02\xe3\x5e\x14\x47\xad\x1c\xa5\x37\x1d\x0d\x86\xfe\xb0\xa1\xc9\xe1\x80\x0f\xe8\x2d\x8f\x82\x26\x20\x2a\x37\x5c\x49\xeb\xe4\xe4\x89\x4a\xd7\xf1\x54\xd4\xb2\x26\x80\xb7\x09\x9e\x5a\x6b\x8a\x5b\x70\xd5\xb6\x13\x1b\xc4\x64\xaa\xed\x4d\xac\xf0\xf1\xea\xa7\x46\x05\x3d\x77\xd6\x46\x09\xef\x61\x8d\x05\x26\x28\xd0\xee\x62\x92\x21\x63\x20\xdb\xc3\x85\xf4\x9e\x80\x3e\x5e\x31\xed\x02\x43\x7b\x37\x23\x94\x19\x18\xbc\x1d\x21\x47\x10\x2c\xfc\xfc\xad\x30\xcf\x31\xef\x89\x35\x18\x1e\x43\x6e\xcf\xad\x4d\xc0\x8d\x04\x96\x5e\xfe\x77\x73\xe4\xe4\x56\xf1\x4a\xfb\xb0\x3b\x7d\x9c\x5e\xbe\x2f\xa4\xd0\xd4\x37\x2b\xc3\xc2\x8d\xd7\x8a\x8e\x40\x09\x51\x22\x54\xba\x2c\x85\x67\x61\x6b\x23\x2a\x70\x21\x63\x52\x75\x63\x25\x6e\xa7\xec\x0d\x32\x9b\xc5\x64\x02\x79\x5b\x7f\x31\x47\x53\xd8\x28\xcd\xd0\xed\xa0\xd4\x2b\xfb\xcd\xee\x34\xfc\x97\x66\x90\x2e\xdd\xe4\xfc\x5e\xef\x7c\x1f\xce\xf4\x26\xfa\x21\xdd\x2f\xe4\xdf\xc7\x66\x09\xdc\x5e\x85\x77\xf1\x1e\xba\x4e\xb8\xc6\xab\x0c\xdd\x73\x0a\xb1\xf6\x7b\x1f\x04\xab\x95\x5e\xe9\xb2\xd2\xd4\xe5\xd0\x4f\x21\xad\x0a\x2c\x47\xac\xcb\x1e\x08\x6a\x71\x0d\xb3\x7a\xba\x8f\x79\x2e\x47\x6e\xb8\x04\x7c\xec\x61\x51\x8a\x90\x0b\xb5\x89\xbd\x6a\x04\x7c\xcc\xa0\xe1\x98\x26\xee\x3d\xb0\xb2\xb7\x1c\x3f\x75\x47\x65\x68\x84\x84\x81\x1b\xf5\xfd\xf2\xc2\xa3\x62\x3c\x1e\xcf\x1a\x69\xdd\x64\xe8\xd1\x0f\x0f\x8a\x51\x78\x4f\x1c\x3e\x66\xd7\x47\x5b\x65\x1d\x39\x25\xa6\x50\x6e\x6f\x0c\xd5\xe5\xf6\x7b\x54\x85\x58\x0e\xcf\xde\xa5\x90\xd7\x08\x9b\x2f\x52\xec\x7c\x3b\xd0\x24\xbc\x90\xce\xdb\x9e\xfc\x83\xb9\x56\xc6\x52\x79\xb1\xc9\x0e\x38\xc9\xca\x5d\x70\xf2\xf7\x40\xb4\x51\x1a\x8c\x45\x28\xbe\x86\xab\xb5\x7d\x6b\xee\xbb\xf9\xb3\x9f\x40\x27\xcb\x79\x68\x0d\x28\x6a\x37\x4e\xb3\x86\x7f\x08\x79\x57\x27\xfe\x0a\x00\x00\xff\xff\x6d\x6a\xf3\x97\xec\x0a\x00\x00")

func staticx_css_cbft_css_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_css_cbft_css,
		"staticx/css/cbft.css",
	)
}

func staticx_css_cbft_css() (*asset, error) {
	bytes, err := staticx_css_cbft_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/css/cbft.css", size: 2796, mode: os.FileMode(420), modTime: time.Unix(1446870543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x79\x6f\xdb\x36\x14\xff\x3f\x9f\x82\xd3\x8a\x26\x01\x22\x6b\x5d\x87\x61\x68\xec\x00\x59\xba\xa3\x58\x8f\xfc\x91\x61\x18\x86\x21\xa0\xc4\x67\x99\x2d\x45\x6a\x24\xe5\xc4\x3d\xbe\xfb\x1e\xa9\xc3\x92\x2c\xa5\x72\xd6\x60\x2e\x10\x52\x7c\xd7\x4f\xef\x20\x1f\xd5\xf9\x57\xcf\xdf\x5c\x5c\xfd\x79\xf9\x13\x59\xd9\x4c\x9c\x1d\xcc\xdd\x40\x04\x95\xe9\x22\x00\x19\xb8\x05\xa0\xec\xec\x80\x90\x79\x06\x96\x92\x64\x45\xb5\x01\xbb\x08\x0a\xbb\x0c\x7f\x08\x3c\x21\xa6\x06\xc8\x4a\xc3\x72\x11\x44\xb8\xe2\x96\x2c\xb7\x02\xce\x92\x78\x69\xe7\x51\x39\xf7\xcb\x82\xcb\x77\x35\xa7\xb1\xd4\xf2\x24\x4a\x8c\x89\x68\x9e\xcf\x70\x0c\x88\x06\xb1\x08\x8c\xdd\x08\x30\x2b\x00\x1b\x44\x67\x77\x48\xe5\x9a\x9b\xec\x1e\x72\xb1\x52\xd6\x58\x4d\xef\x63\x93\x51\xb3\x8a\x15\xd5\xec\x1e\xb2\x9a\x27\xef\xcc\x8a\xde\xcc\x32\x2e\x47\xc5\x47\xe4\x05\x8f\x23\x8c\x49\x21\xa8\x0e\x0b\x1e\x5a\x0d\x10\x31\x6e\x6c\x7f\x71\x9a\xee\x3e\xad\x6b\xec\xd6\xa3\x75\xb1\xf3\x9a\x76\x05\x57\x4a\xdb\xa4\xb0\x84\x27\x4a\xf6\x64\xa3\x25\x5d\xbb\xe5\x19\xfe\x71\x92\xf3\xa8\x4c\x9f\x79\xac\xd8\x86\xc8\x34\xc4\x50\x2f\x82\x24\x4e\xed\x79\x9e\x97\xd9\xc3\xf8\x9a\x24\x82\x1a\x83\xeb\x4a\x5a\xca\x25\x68\x4f\xe9\xd2\x24\x5d\xc7\x54\x93\x72\x08\xb9\x5c\x03\xe6\x61\xfd\xb8\xe4\xb7\xc0\x42\xab\x72\x7c\x6f\x25\xc0\x73\xf3\x14\x01\x29\x59\xa9\xba\xdb\xd0\xb0\xb1\xd0\x61\xef\xf0\x20\x17\xad\x79\x14\x22\xe0\x0c\xc2\x58\x53\xc9\x82\x56\xfe\x93\xd6\x6f\xce\xb3\xb4\x16\x10\x2a\x55\x01\x31\x3a\xd9\x7a\x0b\xa9\xe8\xe8\x59\x2e\xd3\x32\x75\x1a\xb1\x88\xb6\x80\x61\xa4\xd7\xad\xc7\x42\xb4\x60\xd6\x1e\xc0\xa1\x8b\x53\xf0\x33\xc4\x5a\xa1\xe2\x92\xc1\x2d\x18\x44\xf7\xa2\x9c\x39\x03\x73\xcc\xaa\xb6\x95\x42\xfc\x37\x23\x52\x31\x6f\xe2\xb5\x1b\x1f\xc2\x40\xa6\x24\xb7\x4a\xa3\x89\x57\xe5\xec\x41\x8c\x50\x49\x53\x70\x36\xfc\xe4\x21\x4c\x60\x22\x38\x3f\xbd\xc4\xe1\xde\xea\xeb\xa9\xe6\xe9\xca\xf6\x6d\xd5\x22\x4c\xab\x9c\xa9\x1b\xd9\x4f\x4a\xda\x67\xc0\xd2\x49\x53\x01\x01\x61\xd4\xd2\xea\xa1\x25\xde\x91\xc6\x5f\xf9\x1e\x5f\xd7\xc5\x16\x17\xd6\xba\x9d\x80\x6a\x4e\x43\xb8\xcd\xb1\x1e\x80\x2d\x82\x25\x15\x06\x7a\xa6\xf1\xf7\x2b\x88\x9c\xcc\x0d\x72\x35\xd5\x48\x35\x6e\x42\xe8\x07\xb7\xd8\x83\xda\x2e\x84\x9e\x43\x1a\xf0\x19\xc8\xa2\xc6\xe2\xe7\x7d\x9b\x1d\xf7\xaf\xac\xcd\x9f\x45\x91\xa0\xb1\x99\x25\xaa\x48\x56\xee\xf8\xc2\x59\xe6\xb7\xbc\x7e\x01\x37\xbf\x5f\xc0\x5a\x2e\x53\x82\x95\xab\x2d\xb0\x1d\x60\x0e\x6b\x3b\x8e\xfb\x5b\x66\xb0\x0e\xd3\x02\xb7\x94\xc8\x6d\x2d\x6b\x0e\x37\x63\x58\x9e\xc3\x1a\x84\xca\x41\x1f\x1a\xe2\x25\x1e\x00\x0d\x65\x78\x94\x4c\xc4\x73\xee\x78\xb9\x3b\x53\xb1\x28\xf7\xc7\xd4\x04\x94\xaf\xb9\xdf\x6f\xa7\x62\x5f\x2a\x5d\x64\x7d\xf4\x63\x20\x2f\x6a\x2e\x82\x5c\x59\x81\x1b\xc8\x86\x94\x0a\x26\x21\xed\xd6\x65\x9f\xa3\x4d\x6d\xed\xd7\xd5\x74\xe7\x30\xd3\xea\x66\xe4\x5c\x12\xa1\xc9\xc2\x27\xdf\x90\x6a\xa6\x96\x4b\xec\xb6\xc2\x27\x24\xc3\xe3\xaa\x7f\x58\xe1\x71\xea\xa2\x72\xd6\x39\x20\x76\xad\x37\x93\x79\xe4\x4e\xe1\xf2\x38\x37\x89\xe6\xb9\xed\x9e\x46\xae\xc9\x78\xfb\x4f\x01\x7a\x53\x0d\xe1\xb7\xb3\x27\xf8\xef\xad\xf1\xc5\xe9\x25\xce\xa6\x0b\x17\xdc\x77\x23\x93\xa5\xd9\xd3\xd9\xfa\xe9\x74\xf6\x4e\x3b\x35\x59\x6a\x55\xe0\x06\xcf\xdf\xc3\x7e\x52\x4d\xcb\xd8\x6a\x1e\x27\x0b\x57\x2d\x5a\x3d\xee\x2d\x18\x6e\xad\x63\x97\xb7\x05\xb0\xd7\x1b\xdc\xad\x2b\xb4\xb9\x30\xf7\x53\xa8\x55\x61\xa1\xfb\x74\x3f\x45\x9f\x6d\x6b\xa7\xa7\xa1\x51\x32\x57\x5c\x5a\xd8\xc3\xd9\xe5\x6d\xa2\xcb\x3e\xc6\xff\xd6\x44\x78\xcc\xad\xa7\xc6\x12\xd9\x7d\x03\x36\x99\xdb\x75\x52\x93\x99\xab\xae\x68\x3a\xbf\xef\x6b\x26\xb3\xbb\x66\x65\x32\xb3\x2f\xfc\xc9\xdc\x0c\xe2\x22\x9d\xcc\x1d\x7f\xff\xdd\xf4\xf0\x2c\xb9\xc0\xe8\x4f\x07\x6e\xdc\x01\x97\xc0\x74\x01\xc6\x35\x24\x96\xaf\x77\x44\x46\x64\xc2\x58\xe0\xa1\x1d\x66\x78\xff\xc1\x2e\xa2\x8c\x43\x39\xf5\xa9\x51\x13\x26\xd9\x1f\xd7\x65\x37\x39\x8c\xa8\xda\x5b\x17\xa6\x89\xd8\x18\x3e\xcd\x25\x9f\x57\x13\xfa\xc9\xfb\x89\x25\x39\x41\xdf\x8d\xd2\x4c\xe0\x5e\xf1\xa5\xf4\xb9\x2f\x1b\x65\xda\x7c\x29\x8d\x56\xbd\x03\x77\xd6\x7c\x59\x85\x83\x18\xef\xc8\x54\xf7\x71\x65\x6a\x56\xbb\x7b\x31\xf6\xd1\x62\xb7\x74\x0e\xe6\xf5\x6c\x59\xc8\xc4\x5d\xac\x89\xc7\xfb\x1a\x6e\xfc\x95\xf2\x55\x89\xf5\xe8\x98\x7c\xf0\xbd\x07\x76\xf4\x85\x96\xd5\x83\xfb\x05\x2e\x37\x4d\xf0\x8c\x7c\xf8\x74\xb2\x5d\x64\xb0\xa4\x85\xb0\xd7\xd5\xab\x3a\x72\xa7\xeb\x0a\x40\x52\xb4\xc3\x90\x60\x75\x01\x27\x5d\x22\xdb\x48\x9a\xf1\xa4\x22\x36\xb4\xb6\x01\x67\xf5\x7a\xc9\x41\x38\x15\xc1\xb5\x7b\x0c\x06\xec\xfb\x75\xc7\x50\x2d\x0c\xf1\xd4\x09\xec\xf8\xd0\x65\x92\x51\xcd\x86\xf8\xf0\x0e\x05\x96\x67\x70\x9d\xbb\x4f\x65\x9e\xdd\x2d\x5d\xe1\xd2\x9b\xdc\x79\x8e\x8a\x21\xb1\x2d\x48\x2a\x3a\x0c\xf1\xc6\xc2\x35\xd5\x9a\x6e\xae\x31\x3e\xd8\x8a\xdb\x52\xa9\x3b\xe6\xda\x7c\x75\x9a\xec\x3a\xb1\x46\xde\x77\xbf\x27\xba\xbc\xbf\xae\xf6\xcb\x21\x7a\x93\xc5\xe3\xd4\xcf\x8a\xbb\xf8\x96\xd4\x6d\x90\x0e\xca\xbf\x9f\x4e\x0f\x7a\x29\x75\xe9\x13\xea\x05\x9e\x6a\x17\x4d\x3a\x1e\xe1\xfd\xc2\xfe\x86\x5b\xe5\x09\xf1\xfb\xe5\x25\xd5\x34\x33\xd5\xc3\xef\x2f\x4a\x9b\x8f\x4c\x82\x97\xa2\x13\xf2\xc8\x5d\x0f\x70\xf0\xcd\x48\x3d\xd6\x12\x8f\x84\x4a\xfc\x87\x21\x3f\x4d\x4f\x9c\x94\x63\x2a\x78\xfc\x4a\x31\x2a\xea\x04\xe6\x4b\xd2\x18\x25\x8b\x05\x09\xfc\x05\xe8\xb8\xe5\xda\xd2\xdc\xcc\xad\xbf\x91\x62\x43\x16\x3e\x0b\x4f\xab\xf7\x6a\x21\x9a\x79\x94\x57\x90\xe5\x02\xf3\xc0\x20\xe3\xf0\xfa\xc7\x8f\xe8\xa0\xd3\x71\xc1\xbf\x02\xef\x9f\xe0\x6f\xb2\xd8\x46\x7d\x78\xf7\xc0\xd4\xb3\x1c\xef\xdf\x23\xa7\x8c\xfb\xc8\x1b\x9c\x96\x18\xb1\x8d\x21\xd5\x3a\x22\x1b\x2e\xea\xd3\x96\x4b\x1a\xef\x93\xc7\x8f\x1b\x18\xad\xe5\x59\xa5\xac\xed\xaa\xad\xfe\x01\xc6\x8e\xc7\x1c\x1a\x9e\x25\x9e\x93\xdb\x1f\x1d\x9a\x36\x94\x56\x46\xf4\xe2\xb0\x0d\x7b\x19\xd5\x3a\x9e\x27\xb5\xf1\x6d\x5e\x76\xab\xa3\x2e\x8e\xd7\x34\x03\xf3\x8c\xc8\x42\x88\x6e\x0a\xfb\xe2\xc5\xfd\xe1\xd2\x97\xf3\x28\x9b\x2b\xd3\x73\x57\xa5\x17\x75\x91\x0e\xb2\x7e\x3a\x3e\xed\xe4\x46\xdc\x7f\x45\x7c\xf5\xba\x1e\x8e\xda\x3e\xac\x76\x54\x74\x4e\x99\x16\xbd\xe0\x60\x25\x0d\x17\xd2\x73\x25\xa1\xe5\x36\x86\x8f\xff\x43\x21\x35\xa6\xda\xaf\x34\x90\x0c\xdb\xe2\xd8\x71\x4c\xe7\x4d\xeb\xcb\x54\xa6\x58\x21\xe0\xe8\xb0\xfa\xa4\x7c\x78\x3c\xf3\x3c\xdb\x83\xec\xe8\xd0\x27\xd1\x79\x15\x65\x0f\xed\xc2\x6a\x71\x78\x42\x86\x09\x63\x1a\x2e\x70\x9f\xfc\xd9\xef\x73\x3b\x3a\x06\x48\x63\x5a\xae\xea\xdd\x74\x47\xc9\x2e\xe5\x4e\x1d\x23\x50\x86\x68\x63\x7a\xfe\xc0\x0e\xea\x25\x76\x50\x3b\x4a\x76\x08\xe8\xf9\x6d\x2b\x30\x8f\xca\xff\x2a\xfa\x37\x00\x00\xff\xff\x6c\x5d\x7f\xe9\x3b\x1a\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 6715, mode: os.FileMode(420), modTime: time.Unix(1446870869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x6e\xdb\x30\x0c\x3d\x37\x5f\xc1\x69\x18\xb0\x01\x73\xbd\xee\xd6\xd6\xf1\x7d\x87\x15\xbb\xed\x38\xc8\x36\x63\x09\x95\x25\x43\xa2\x9b\x06\x41\xfe\x7d\x94\xe4\x38\x69\x87\x22\x3b\x35\x40\x64\x49\xe4\xe3\x7b\x22\x45\x55\xce\x80\xed\x0b\xbd\x59\x0b\x6d\x3b\x7c\x7e\x90\x03\x86\x6b\x83\xb6\x27\x25\x56\xc0\xbf\xd6\xc8\x10\xd6\xa2\xf1\x28\xbb\xd6\x4f\x43\x23\x6a\xde\xaf\x8c\xae\xab\x30\x4a\x7b\xb4\xf7\x66\x37\x2a\xdd\x3a\x0b\xcb\xac\x68\x9c\x7b\x14\x75\x55\xb2\xef\x11\x22\x41\x79\x64\xb2\x8f\xa2\xfe\x11\xf9\x30\x54\xa5\x9c\x5d\xaa\xd2\x99\x7a\xb5\xaa\x3a\xfd\x14\x35\x05\xe5\xb6\x6b\x81\xde\x3b\xff\x13\x43\x90\x3d\x8a\x23\x99\x34\xe8\x09\xd2\x58\x74\xd2\xf6\xe8\x23\xa0\x35\x4e\x3e\x0a\xf0\xce\xe0\xec\x92\xa4\xee\xf7\xe7\x31\x0e\x07\xe6\x61\x86\x48\x44\xb2\x31\x78\xe1\xf8\xa7\x0c\x64\xef\x34\x16\x81\xbc\x1e\xb1\xe3\xf8\x57\x15\x79\x1e\xf9\xa3\x60\xab\x3b\x52\x6b\x71\x7b\xfb\x49\xd4\x31\x52\x55\x92\x9a\x6d\xf5\x3c\xe7\x8f\xcf\xa0\xc8\xeb\x71\x44\x49\x67\xdc\xa0\x2d\x9c\x84\x88\x0c\xee\x4e\x69\x2b\x75\x4e\x5a\xb9\xdf\x2f\x6e\x87\x83\xa8\x5f\x2c\x73\x46\x19\x96\xd1\x10\x68\x17\x33\xb2\x55\x9a\x58\xf9\x28\x5b\xbc\x03\xeb\xb6\x5e\x8e\xf7\x89\xe1\xaa\x6a\x26\x22\xae\x5c\xca\xa1\x6e\x1f\x39\xeb\x9d\xa6\x54\x9f\xcf\x4b\xdc\x2f\x22\xba\xc2\xf1\x47\xbb\x91\x63\x66\xe0\x52\x97\x86\x2c\xf0\xbf\xe8\x70\x23\x27\x43\x69\x1e\x86\x4c\x72\x75\xf1\xba\x44\xd2\x78\x5d\xa2\x5f\x0d\x71\x95\xc4\x95\x99\xe4\x0d\xa5\x5c\x74\x8b\xef\x2e\x75\x34\x53\x28\x82\xee\xed\x49\x6f\x12\xf2\x1f\x82\x3b\x34\x48\xef\xaf\x98\xbc\x0c\x6a\x51\xfb\x5a\xe7\x7c\x5d\xf2\xed\xe4\x31\x5e\xf2\xb3\x56\x8c\xfd\xf1\xe1\xad\x06\x99\x49\x93\xf9\x37\x9a\xd6\x0d\x98\x9f\x08\x75\x53\xcf\x6b\x20\x07\x6d\xb3\xa1\xaa\xe4\xbd\x68\x8a\x0d\x18\x37\x40\x07\x90\xb0\x99\x8c\x29\x08\x9f\x09\x02\xfa\x27\x6e\xe6\x8d\xf3\xd0\xba\xa9\x55\x8d\x0c\x08\x9d\x24\x79\x3d\x37\xed\x8c\xfd\x65\x30\x59\x70\xa3\x2d\xc2\xce\x4d\x8c\xd1\x3e\x50\x6e\x1e\x6e\x44\xee\x46\x52\x08\x0f\xb8\x85\x94\x6a\xc8\x67\x3d\x86\x59\x9e\x80\x78\xc0\xe5\x00\xe3\x44\x45\xef\xdd\x34\x66\xfd\xff\x34\xdd\x1f\x8b\xdb\x64\x62\xe3\x5c\xd7\xd7\xc5\x19\xbd\x1e\xa4\xdf\x89\xb9\x84\x61\x6a\x06\x4d\x33\x86\x51\xfa\xd2\xa5\x8a\x15\xd2\xf5\x49\x77\x26\x5b\x2a\x15\xe7\xf2\x4c\x7e\x6a\xed\x7a\x75\x7d\x9e\x7c\x50\x37\x5f\xe1\xe5\x4e\x3c\xe5\x9e\xc1\x2c\xad\xd7\xf1\x5d\xe6\x68\xc3\x1d\x7c\xff\x36\x3e\xdf\xaf\xe2\x83\x98\xe3\xfc\x0d\x00\x00\xff\xff\x52\x12\x88\xe9\x0d\x06\x00\x00")

func staticx_partials_index_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_list_html,
		"staticx/partials/index/list.html",
	)
}

func staticx_partials_index_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/list.html", size: 1549, mode: os.FileMode(420), modTime: time.Unix(1443737395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/css/cbft.css":             staticx_css_cbft_css,
	"staticx/index.html":               staticx_index_html,
	"staticx/partials/index/list.html": staticx_partials_index_list_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"css": &_bintree_t{nil, map[string]*_bintree_t{
			"cbft.css": &_bintree_t{staticx_css_cbft_css, map[string]*_bintree_t{}},
		}},
		"index.html": &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"list.html": &_bintree_t{staticx_partials_index_list_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
