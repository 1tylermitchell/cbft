package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_css_cbft_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x78\x91\xdd\x45\x68\x38\x7e\xc5\x96\x71\x03\xdc\x66\x93\x4d\xd0\x0f\x28\xba\x20\xc5\xa1\x35\x30\x45\x12\x14\xfd\x4a\xd1\x7f\x2f\x25\xca\xb6\xe2\x87\x22\x03\x5d\x59\x22\x3d\x67\xce\x19\x9e\x19\xb1\xcf\x15\x6c\xe0\xdd\x08\xa6\x48\x3f\x2f\x7f\x28\x37\x62\x4f\xfa\xd2\xb8\x9c\x2e\x9d\x59\x5b\xf2\xab\x47\x88\x65\x42\xa0\x5e\x86\x4d\xef\x4d\x9e\x90\xa7\x81\xdd\x2d\x7a\xbf\x7b\xbd\x3e\x6a\x01\xbb\x77\x66\x6d\xd8\x26\x7d\xa6\x97\x6b\xc5\x1c\x5d\x23\xf5\x0e\x80\x66\x4c\x0b\x05\x15\x04\x21\x9c\xa5\xab\x12\x52\x8b\x84\x3c\xc8\x99\x64\x52\x2e\xe2\x86\x71\x02\x5c\x40\xb5\x3b\x52\x18\x85\x82\x3c\x08\x06\x43\x60\x71\x3b\x35\xca\x84\xdd\x87\xe7\x74\x0e\x7c\x18\xd7\x6a\x42\x91\xc9\x9d\x74\x92\xcc\x6c\xc0\xd5\xa4\x0e\xe0\xe3\xd1\x0c\xf8\x7c\x71\x85\xe8\x58\x4e\xe5\x73\x93\x28\x3d\xc4\x88\x34\x90\x9c\x75\x49\x6c\x15\x4b\x21\x33\x4a\x1c\xf3\x7e\xce\x31\x90\xf3\xf3\x62\x0c\x83\x2e\xc1\x8a\x0c\x42\x35\x38\x88\xa1\xe0\x71\x9f\x6e\x81\xaf\xd0\x87\xa3\xd8\xd1\x02\x3f\xaa\x22\xd4\xbc\xc2\x52\xfd\x9f\xdc\x7c\xb4\xfe\xe1\xd6\xde\xa5\x92\xea\xed\x95\xe9\x14\xd4\xab\x03\xe6\xe3\x61\xe6\xcc\x2d\x51\x53\x6f\x6c\x20\x5a\x15\xff\xb8\x76\xb0\xc8\xe8\xc6\x99\x14\x90\x7a\x34\xfa\xf8\xf0\x06\xec\x50\x95\x26\xea\xad\x23\x3d\x0f\xff\x56\xda\xf5\x22\x78\x72\x17\xa5\xfc\xf0\xc0\xbd\x6e\x62\x39\x5c\x66\xfe\x36\x95\x66\x58\x38\xe6\x70\x56\x57\x82\x87\x93\xae\xc1\x0d\x5b\x1e\x0c\x26\xa3\x29\x4e\x5e\x39\x59\x6f\x3e\x19\x8d\xe3\xe6\x99\x27\xc7\x23\x39\x62\x6d\x19\x15\xe3\xa0\xaa\x34\xd2\x68\x1f\xec\x14\x89\xea\xd0\xf1\x4c\x35\xaa\xa6\x40\x76\x11\xcf\xbc\x77\x45\x1b\x5c\xb5\x1c\xcc\x06\x09\x99\x5b\xdf\x8a\x55\x3f\xbc\xc5\xa9\x51\x41\xbf\x86\x68\x67\x54\xcc\xb0\xc1\x02\x39\x2a\xf4\xfb\x84\x64\x28\x04\xe8\xee\x70\x75\x79\x3f\x81\x3e\xde\x08\xed\x83\x40\x7f\x37\x23\xd4\x19\x38\x6c\x57\x28\x11\x94\xa8\x7f\xfe\x96\xcc\x4b\xcc\x7b\xb4\xd6\x81\x27\xc9\xdd\xb9\x75\x11\x7c\x56\xc0\x32\xcb\xff\x61\x8e\x7c\xfa\xaa\x44\xa7\x7d\xd9\x9d\x51\x67\xb4\xef\x0b\x29\x2c\x8b\xcd\x2a\xb0\x08\xe3\xb5\xa2\xa3\x50\x03\xe5\xca\xa4\xab\xd2\x78\x1e\x76\x9e\x32\x85\x4b\x9d\x90\xaa\x1b\x2b\x73\x07\x67\x6f\x51\xf8\x2c\x21\x33\xc8\xbb\xe6\x4b\x24\xba\xc2\xd3\x34\xc3\xb0\x82\xda\xae\xfd\x0f\xbf\xb7\xf0\x5f\x9a\x41\xba\x0a\x93\xf3\x67\xb3\xf3\xa3\x9c\x79\x2b\xfa\xb1\xdc\x2f\xe4\xdf\xc7\xf3\x23\x08\x6b\x15\xde\xd5\xef\xd0\x6d\xc2\x0d\x5e\xa5\xf4\xc8\xa9\xd6\x3a\x1c\x7c\x21\xd6\x1a\xbb\xb6\xe5\x49\xb3\x50\xc3\x38\x85\xac\x29\xb0\x1c\xb1\xa1\x7a\xa0\x98\xc7\x0d\x2c\x9a\xe5\x3e\xd5\xb9\x1c\xb9\xf5\x47\x20\x6a\xaf\x5f\x4a\x13\x4a\x65\xb6\x49\x74\x8d\x82\xaf\x19\x9c\x25\x66\x3c\xdc\x07\xd6\xbe\x2d\xf1\x53\x7f\x52\x4a\x23\xa4\x1e\xb8\x74\x18\x5f\xaf\x5c\x2a\xa6\xd3\xe9\xe2\xac\xac\xdb\x0c\x23\xfa\xf1\x42\x31\xa9\xef\x13\xc7\x87\xc5\xed\xd1\x56\x45\xd3\xe0\xc4\x14\xca\xe5\xad\x63\xb6\x5c\xfe\xa0\x95\xc4\x72\x78\x0e\xae\x49\xde\x20\x6c\xbf\x6b\xb5\x8f\xed\xc0\x78\x7d\x43\xba\x6c\x7b\xf2\x0f\xe6\xd6\x38\xcf\xf4\xd5\x26\x3b\xe2\xf0\x75\xf8\xc0\xe9\x6e\x20\x7f\x02\x00\x00\xff\xff\x26\x41\xb7\x9d\xf3\x09\x00\x00")

func staticx_css_cbft_css_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_css_cbft_css,
		"staticx/css/cbft.css",
	)
}

func staticx_css_cbft_css() (*asset, error) {
	bytes, err := staticx_css_cbft_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/css/cbft.css", size: 2547, mode: os.FileMode(420), modTime: time.Unix(1446869950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x79\x6f\xdb\x36\x14\xff\x3f\x9f\x82\xd3\x8a\x26\x01\x22\x6b\x5d\x87\x61\x68\xec\x00\x59\xba\xa3\x58\x8f\xfc\x91\x61\x18\x86\x21\xa0\xc4\x67\x99\x2d\x45\x6a\x24\xe5\xc4\x3d\xbe\xfb\x1e\x29\xc9\x3a\x2c\xa5\x72\xd6\x60\x2e\x10\x52\xe4\x3b\x7e\x7a\x07\xdf\xa3\x3a\xff\xea\xf9\x9b\x8b\xab\x3f\x2f\x7f\x22\x2b\x9b\x89\xb3\x83\xb9\x1b\x88\xa0\x32\x5d\x04\x20\x03\xb7\x00\x94\x9d\x1d\x10\x32\xcf\xc0\x52\x92\xac\xa8\x36\x60\x17\x41\x61\x97\xe1\x0f\x81\xdf\x88\xa9\x01\xb2\xd2\xb0\x5c\x04\x11\xae\xb8\x25\xcb\xad\x80\xb3\x24\x5e\xda\x79\x54\xce\xfd\xb2\xe0\xf2\x5d\x4d\x69\x2c\xb5\x3c\x89\x12\x63\x22\x9a\xe7\x33\x1c\x03\xa2\x41\x2c\x02\x63\x37\x02\xcc\x0a\xc0\x06\xd1\xd9\x1d\x5c\xb9\xe6\x26\xbb\x07\x5f\xac\x94\x35\x56\xd3\xfb\xe8\x64\xd4\xac\x62\x45\x35\xbb\x07\xaf\xe6\xc9\x3b\xb3\xa2\x37\xb3\x8c\xcb\x51\xf6\x11\x7e\xc1\xe3\x08\x7d\x52\x08\xaa\xc3\x82\x87\x56\x03\x44\x8c\x1b\xdb\x5f\x9c\x26\xbb\xbf\xd7\x55\x76\xeb\xd1\x3a\xdf\x79\x49\xbb\x8c\x2b\xa5\x6d\x52\x58\xc2\x13\x25\x7b\xbc\xd1\x92\xae\xdd\xf2\x0c\xff\x38\xce\x79\x54\x86\xcf\x3c\x56\x6c\x43\x64\x1a\xa2\xab\x17\x41\x12\xa7\xf6\x3c\xcf\xcb\xe8\x61\x7c\x4d\x12\x41\x8d\xc1\x75\x25\x2d\xe5\x12\xb4\xdf\xe9\xee\x49\xba\x8e\xa9\x26\xe5\x10\x72\xb9\x06\x8c\xc3\xfa\x71\xc9\x6f\x81\x85\x56\xe5\xf8\xde\x4a\x80\xa7\xe6\x29\x02\x52\xb2\x12\x75\xb7\xa2\x61\x65\xa1\xc3\xde\xa1\x41\x2a\x5a\xd3\x28\x44\xc0\x19\x84\xb1\xa6\x92\x05\xad\xf8\x27\xad\xdf\x9c\x67\x69\xcd\x20\x54\xaa\x02\x62\x74\xd2\x58\x0b\x77\xd1\xd0\xb3\x5c\xa6\x65\xe8\x6c\xd9\x22\xda\x02\x86\x9e\x5e\xb7\x1e\x0b\xd1\x82\x59\x5b\x00\x87\x2e\x4e\xc1\xcf\x10\x6b\x85\x8a\x4b\x06\xb7\x60\x10\xdd\x8b\x72\xe6\x14\xcc\x31\xaa\xda\x5a\x0a\xf1\xdf\x94\x48\xc5\xbc\x8a\xd7\x6e\x7c\x08\x05\x99\x92\xdc\x2a\x8d\x2a\x5e\x95\xb3\x07\x51\x42\x25\x4d\xc1\xe9\xf0\x93\x87\x50\x81\x81\xe0\xec\xf4\x12\x87\x7b\x8b\xaf\xa7\x9a\xa7\x2b\xdb\xd7\x55\xb3\x30\xad\x72\xa6\x6e\x64\x3f\x28\x69\x9f\x00\x53\x27\x4d\x05\x04\x84\x51\x4b\xab\x87\x16\x7b\x87\x1b\x7f\xe5\x7b\x7c\x5d\x27\x5b\x5c\x58\xeb\x4e\x02\xaa\x39\x0d\xe1\x36\xc7\x7c\x00\xb6\x08\x96\x54\x18\xe8\xa9\xc6\xdf\xaf\x20\x72\x32\x37\x48\xb5\xcd\x46\xaa\xf1\x10\x42\x3b\xb8\xc5\x1e\xd4\x76\x22\xf4\x0c\xb2\x05\x9f\x81\x2c\x6a\x2c\x7e\xde\xd7\xd9\x31\xff\xca\xda\xfc\x59\x14\x09\x1a\x9b\x59\xa2\x8a\x64\xe5\xca\x17\xce\x32\x7f\xe4\xf5\x13\x78\xfb\xfb\x05\xac\xe5\x32\x25\x98\xb9\xda\x02\xdb\x01\xe6\xb0\xb6\xfd\xb8\xbf\x66\x06\xeb\x30\x2d\xf0\x48\x89\xdc\xd1\xb2\xe6\x70\x33\x86\xe5\x39\xac\x41\xa8\x1c\xf4\xa1\x21\x9e\xe3\x01\xd0\x50\x86\xa5\x64\x22\x9e\x73\x47\xcb\x5d\x4d\xc5\xa4\xdc\x1f\xd3\xd6\xa1\x7c\xcd\xfd\x79\x3b\x15\xfb\x52\xe9\x22\xeb\xa3\x1f\x03\x79\x51\x53\x11\xa4\xca\x0a\x3c\x40\x36\xa4\x14\x30\x09\x69\x37\x2f\xfb\x14\xed\xdd\xd6\x79\x5d\x4d\x77\x8a\x99\x56\x37\x23\x75\x49\x84\x26\x0b\x9f\x7c\x43\xaa\x99\x5a\x2e\xb1\xdb\x0a\x9f\x90\x0c\xcb\x55\xbf\x58\x61\x39\x75\x5e\x39\xeb\x14\x88\x5d\xed\xdb\xc9\x3c\x72\x55\xb8\x2c\xe7\x26\xd1\x3c\xb7\xdd\x6a\xe4\x9a\x8c\xb7\xff\x14\xa0\x37\xd5\x10\x7e\x3b\x7b\x82\xff\xde\x1a\x9f\x9c\x9e\xe3\x6c\x3a\x73\xc1\x7d\x37\x32\x99\x9b\x3d\x9d\xad\x9f\x4e\x27\xef\xb4\x53\x93\xb9\x56\x05\x1e\xf0\xfc\x3d\xec\xc7\xb5\x6d\x19\x5b\xcd\xe3\x64\xe6\xaa\x45\xab\xc7\xbd\x19\xc3\x46\x3b\x76\x79\x0d\x80\xbd\xde\xe0\x6e\x59\xa1\xcd\x85\xb9\x9f\x40\xad\x0a\x0b\xdd\xa7\xfb\x09\xfa\x6c\x5b\x3b\x3d\x0c\x8d\x92\xb9\xe2\xd2\xc2\x1e\xc6\x2e\x6f\x13\x5d\xf2\x31\xfa\xb7\x26\xc2\x32\xb7\x9e\xea\x4b\x24\xf7\x0d\xd8\x64\x6a\xd7\x49\x4d\x26\xae\xba\xa2\xe9\xf4\xbe\xaf\x99\x4c\xee\x9a\x95\xc9\xc4\x3e\xf1\x27\x53\x33\x88\x8b\x74\x32\x75\xfc\xfd\x77\xd3\xdd\xb3\xe4\x02\xbd\x3f\x1d\xb8\x71\x05\x2e\x81\xe9\x0c\x8c\x6b\x48\x2c\x5f\xef\xb0\x8c\xf0\x84\xb1\xc0\xa2\x1d\x66\x78\xff\xc1\x2e\xa2\xf4\x43\x39\xf5\xa1\x51\x6f\x4c\xd2\x3f\x2e\xcb\x6e\x72\x18\x11\xb5\xb7\x2c\x0c\x13\xb1\x31\x7c\x9a\x49\x3e\x2f\x26\xf4\x93\xf7\x13\x53\x72\x82\xbc\x1b\xa5\x99\xc0\xb3\xe2\x4b\xc9\x73\x5f\x36\xca\xb0\xf9\x52\x12\xad\x7a\x07\xae\xd6\x7c\x59\x81\x83\x18\xef\x88\x54\xf7\x71\x65\x6a\x54\xbb\x7b\x31\xf6\xd1\x62\x37\x75\x0e\xe6\xf5\x6c\x59\xc8\xc4\x5d\xac\x89\xc7\xfb\x1a\x6e\xfc\x95\xf2\x55\x89\xf5\xe8\x98\x7c\xf0\xbd\x07\x76\xf4\x85\x96\xd5\x83\xfb\x05\x2e\x36\x4d\xf0\x8c\x7c\xf8\x74\xd2\x2c\x32\x58\xd2\x42\xd8\xeb\xea\x55\xdd\x76\xa7\xeb\x0a\x40\x52\xd4\xc3\x70\xc3\xea\x02\x1a\xce\xb6\x10\x27\xf9\x7a\xc9\x41\x38\xb2\xe0\xda\x3d\x06\x03\x3a\xfc\xba\x23\xa8\x16\x86\x68\xea\x20\x75\x74\x68\x16\xc9\xa8\x66\x43\x74\x78\x4f\x02\xcb\x33\xb8\xce\xdd\xe7\x30\x4f\xee\x96\xae\x70\xe9\x4d\xee\xac\x43\xc5\x10\x5b\x03\x92\x8a\x0e\x41\xbc\xb1\x70\x4d\xb5\xa6\x9b\x6b\xf4\x01\xb6\xdb\xb6\x14\xea\x4a\x59\x9b\xae\x0e\x85\x5d\x43\xd5\xc8\xfb\x26\xf6\x9b\x2e\xb6\xaf\xab\x33\x71\x68\x7f\x1b\xa9\xe3\xbb\x9f\x65\x77\x3e\x2c\x77\x1b\x27\x1d\x94\x7f\x3f\x9d\x1e\xf4\xc2\xe6\xd2\x07\xcd\x0b\xac\x5c\x17\xdb\x90\x3b\xc2\x3b\x84\xfd\x0d\x8f\xc3\x13\xe2\xcf\xc4\x4b\xaa\x69\x66\xaa\x87\xdf\x5f\x94\x3a\x1f\x99\x04\x2f\x3e\x27\xe4\x91\xbb\x02\xe0\xe0\x1b\x8e\x7a\xac\x39\x1e\x09\x95\xf8\x8f\x3f\x7e\x9a\x9e\x38\x2e\x47\x54\xf0\xf8\x95\x62\x54\xd4\x41\xca\x97\x64\xab\x94\x2c\x16\x24\xf0\x97\x9c\xe3\x96\x69\x4b\x75\x33\xb7\xfe\x46\x8a\x0d\x59\xf8\x30\x3c\xad\xde\xab\x85\x68\xe6\x51\x5e\x41\x96\x0b\x8c\x03\x83\x84\xc3\xeb\x1f\x3f\xa2\x81\x4e\xc7\x19\xff\x0a\xbc\x7d\x82\xbf\xc9\xa2\xf1\xfa\xf0\x09\x81\xa1\x67\x39\xde\xb1\x47\x2a\x89\xfb\x90\x1b\x9c\x96\x18\xb1\x55\x21\xd5\x3a\x22\x1b\x4e\xdc\xd3\x96\x49\xb6\xd6\x27\x8f\x1f\x6f\x61\xb4\x96\x67\x95\xb0\xb6\xa9\x1a\xf9\x03\x84\x1d\x8b\x39\x34\x3c\x4b\x3c\x25\xb7\x3f\x3a\x34\x6d\x28\xad\x88\xe8\xf9\xa1\x71\x7b\xe9\xd5\xda\x9f\x27\xb5\xf2\x26\x2e\xbb\xd9\x51\x27\xc7\x6b\x9a\x81\x79\x46\x64\x21\x44\x37\x84\x7d\xf2\xe2\xf9\x70\xe9\xd3\x79\x94\xcc\xa5\xe9\xb9\xcb\xd2\x8b\x3a\x49\x07\x49\x3f\x1d\x9f\x76\x62\x23\xee\xbf\x22\xbe\x7a\x9d\x0f\x47\x6d\x1b\x56\xa7\x26\x1a\xa7\x0c\x8b\x9e\x73\x30\x93\x86\x13\xe9\xb9\x92\xd0\x32\x1b\xc3\xc7\xff\x21\x91\xb6\xaa\xda\xaf\x34\x10\x0c\x4d\x72\xec\x18\xa6\xf3\xa6\xf5\x85\x29\x53\xac\x10\x70\x74\x58\x7d\x36\x3e\x3c\x9e\x79\x9a\xa6\x58\x1d\x1d\xfa\x20\x3a\xaf\xbc\xec\xa1\x5d\x58\x2d\x0e\x4f\xc8\xf0\xc6\x98\x84\x0b\x3c\x27\x7f\xf6\xe7\xdc\x8e\x8c\x81\xad\x31\x29\x57\xf5\x69\xba\x23\x64\x77\xe7\x4e\x19\x23\x50\x86\xf6\xc6\xe4\xfc\x81\x5d\xd2\x4b\xec\x92\x76\x84\xec\x6c\xa0\xe5\x9b\x72\x3f\x8f\xca\xff\x0e\xfa\x37\x00\x00\xff\xff\x17\x8f\x87\x20\x1f\x1a\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 6687, mode: os.FileMode(420), modTime: time.Unix(1446870319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x6e\xdb\x30\x0c\x3d\x37\x5f\xc1\x69\x18\xb0\x01\x73\xbd\xee\xd6\xd6\xf1\x7d\x87\x15\xbb\xed\x38\xc8\x36\x63\x09\x95\x25\x43\xa2\x9b\x06\x41\xfe\x7d\x94\xe4\x38\x69\x87\x22\x3b\x35\x40\x64\x49\xe4\xe3\x7b\x22\x45\x55\xce\x80\xed\x0b\xbd\x59\x0b\x6d\x3b\x7c\x7e\x90\x03\x86\x6b\x83\xb6\x27\x25\x56\xc0\xbf\xd6\xc8\x10\xd6\xa2\xf1\x28\xbb\xd6\x4f\x43\x23\x6a\xde\xaf\x8c\xae\xab\x30\x4a\x7b\xb4\xf7\x66\x37\x2a\xdd\x3a\x0b\xcb\xac\x68\x9c\x7b\x14\x75\x55\xb2\xef\x11\x22\x41\x79\x64\xb2\x8f\xa2\xfe\x11\xf9\x30\x54\xa5\x9c\x5d\xaa\xd2\x99\x7a\xb5\xaa\x3a\xfd\x14\x35\x05\xe5\xb6\x6b\x81\xde\x3b\xff\x13\x43\x90\x3d\x8a\x23\x99\x34\xe8\x09\xd2\x58\x74\xd2\xf6\xe8\x23\xa0\x35\x4e\x3e\x0a\xf0\xce\xe0\xec\x92\xa4\xee\xf7\xe7\x31\x0e\x07\xe6\x61\x86\x48\x44\xb2\x31\x78\xe1\xf8\xa7\x0c\x64\xef\x34\x16\x81\xbc\x1e\xb1\xe3\xf8\x57\x15\x79\x1e\xf9\xa3\x60\xab\x3b\x52\x6b\x71\x7b\xfb\x49\xd4\x31\x52\x55\x92\x9a\x6d\xf5\x3c\xe7\x8f\xcf\xa0\xc8\xeb\x71\x44\x49\x67\xdc\xa0\x2d\x9c\x84\x88\x0c\xee\x4e\x69\x2b\x75\x4e\x5a\xb9\xdf\x2f\x6e\x87\x83\xa8\x5f\x2c\x73\x46\x19\x96\xd1\x10\x68\x17\x33\xb2\x55\x9a\x58\xf9\x28\x5b\xbc\x03\xeb\xb6\x5e\x8e\xf7\x89\xe1\xaa\x6a\x26\x22\xae\x5c\xca\xa1\x6e\x1f\x39\xeb\x9d\xa6\x54\x9f\xcf\x4b\xdc\x2f\x22\xba\xc2\xf1\x47\xbb\x91\x63\x66\xe0\x52\x97\x86\x2c\xf0\xbf\xe8\x70\x23\x27\x43\x69\x1e\x86\x4c\x72\x75\xf1\xba\x44\xd2\x78\x5d\xa2\x5f\x0d\x71\x95\xc4\x95\x99\xe4\x0d\xa5\x5c\x74\x8b\xef\x2e\x75\x34\x53\x28\x82\xee\xed\x49\x6f\x12\xf2\x1f\x82\x3b\x34\x48\xef\xaf\x98\xbc\x0c\x6a\x51\xfb\x5a\xe7\x7c\x5d\xf2\xed\xe4\x31\x5e\xf2\xb3\x56\x8c\xfd\xf1\xe1\xad\x06\x99\x49\x93\xf9\x37\x9a\xd6\x0d\x98\x9f\x08\x75\x53\xcf\x6b\x20\x07\x6d\xb3\xa1\xaa\xe4\xbd\x68\x8a\x0d\x18\x37\x40\x07\x90\xb0\x99\x8c\x29\x08\x9f\x09\x02\xfa\x27\x6e\xe6\x8d\xf3\xd0\xba\xa9\x55\x8d\x0c\x08\x9d\x24\x79\x3d\x37\xed\x8c\xfd\x65\x30\x59\x70\xa3\x2d\xc2\xce\x4d\x8c\xd1\x3e\x50\x6e\x1e\x6e\x44\xee\x46\x52\x08\x0f\xb8\x85\x94\x6a\xc8\x67\x3d\x86\x59\x9e\x80\x78\xc0\xe5\x00\xe3\x44\x45\xef\xdd\x34\x66\xfd\xff\x34\xdd\x1f\x8b\xdb\x64\x62\xe3\x5c\xd7\xd7\xc5\x19\xbd\x1e\xa4\xdf\x89\xb9\x84\x61\x6a\x06\x4d\x33\x86\x51\xfa\xd2\xa5\x8a\x15\xd2\xf5\x49\x77\x26\x5b\x2a\x15\xe7\xf2\x4c\x7e\x6a\xed\x7a\x75\x7d\x9e\x7c\x50\x37\x5f\xe1\xe5\x4e\x3c\xe5\x9e\xc1\x2c\xad\xd7\xf1\x5d\xe6\x68\xc3\x1d\x7c\xff\x36\x3e\xdf\xaf\xe2\x83\x98\xe3\xfc\x0d\x00\x00\xff\xff\x52\x12\x88\xe9\x0d\x06\x00\x00")

func staticx_partials_index_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_list_html,
		"staticx/partials/index/list.html",
	)
}

func staticx_partials_index_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/list.html", size: 1549, mode: os.FileMode(420), modTime: time.Unix(1443737395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/css/cbft.css":             staticx_css_cbft_css,
	"staticx/index.html":               staticx_index_html,
	"staticx/partials/index/list.html": staticx_partials_index_list_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"css": &_bintree_t{nil, map[string]*_bintree_t{
			"cbft.css": &_bintree_t{staticx_css_cbft_css, map[string]*_bintree_t{}},
		}},
		"index.html": &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"list.html": &_bintree_t{staticx_partials_index_list_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
