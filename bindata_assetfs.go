package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x5b\x6f\xa4\x36\x14\x7e\xcf\xaf\x70\xe9\x4a\xdd\x95\x02\x6c\xba\x55\x55\xb5\xcc\x48\xab\xdd\xaa\x8d\x7a\xcb\x43\xfb\xd0\x47\x83\x0f\xe0\xc4\xd8\xd4\x36\x24\xb3\x55\xff\x7b\x8f\xcd\x40\x80\x5c\x64\x66\x15\x22\xc5\xb7\xf3\xf9\x7c\xd8\x3e\x3e\x1f\x93\x7d\xf1\xf1\x8f\x0f\x7f\xfe\x7d\xf5\x23\xa9\x6d\x23\xf6\x67\x99\x2b\x88\xa0\xb2\xda\x45\x20\x23\xd7\x01\x94\xed\xcf\x08\xc9\x1a\xb0\x94\x14\x35\xd5\x06\xec\x2e\xea\x6c\x19\x7f\x17\xdd\x0f\x48\xda\xc0\x2e\x62\x60\x0a\xcd\x5b\xcb\x95\x8c\x48\xa1\xa4\x05\x89\xb6\x83\x59\x4e\x0d\x90\x5a\x43\xb9\x8b\x52\xec\x71\x5d\x82\xcb\x9b\xb1\xcb\x58\x6a\x79\x91\x16\xc6\xa4\xb4\x6d\x13\x2c\x23\xa2\x41\xec\x22\x63\x0f\x02\x4c\x0d\x60\xa3\x74\xff\x0c\xaa\xd5\xdc\x34\x27\xe0\x72\xa5\xac\xb1\x9a\x9e\xe2\x93\x51\x53\xe7\x8a\x6a\x76\x02\x56\xf3\xe2\xc6\xd4\xf4\x36\x69\xb8\xdc\x08\x17\x3c\x4f\x71\x8b\x3a\x41\x75\x6c\x35\x40\xcf\xe1\x76\xec\x48\xc6\x8e\x27\xe7\x9c\x26\x1d\xc6\x6a\xa5\x6d\xd1\x59\xc2\x0b\xb7\x69\x4b\x47\x25\xed\x5d\x77\x82\xff\x1c\x32\x4b\x87\xd3\x90\xe5\x8a\x1d\x88\xac\x62\xdc\xa9\x5d\xd4\x1c\xde\xb7\xed\xb0\xc7\x8c\xf7\xa4\x10\xd4\x98\x5d\xe4\x76\x9f\x72\x09\xda\x8f\x2c\xc7\x24\xed\x73\xaa\xc9\x50\xc4\x5c\xf6\x80\x87\x6a\x6c\x96\xfc\x0e\x58\x6c\x55\x8b\xe4\x95\x00\x6f\xcd\x2b\xea\xcf\xd4\x30\xd5\xf3\x8e\x1e\x77\x16\x3b\xe6\x0b\x1b\xb4\xa2\xa3\x8d\x42\x06\x9c\x41\x9c\x6b\x2a\x59\x34\x3b\xa5\x64\xf6\x64\xbc\xa9\x46\x80\x50\x95\x8a\x88\xd1\xc5\xfd\x5a\xe1\x68\x5a\xe4\x49\x2b\xab\x61\xe3\x26\x58\x4a\x67\xc4\x52\x64\x36\x6b\x76\x62\x46\x73\x5c\x01\x2c\x96\x3c\x05\xdf\x23\xd7\x23\x2b\x2e\x19\xdc\x81\x41\x76\x97\x43\xcd\x39\xc8\xf0\x4c\xcc\xbd\x74\xe2\xf3\x9c\x48\xc5\xbc\x8b\xdf\x5d\xf9\x12\x0e\x1a\x25\xb9\x55\x1a\x5d\xfc\x36\xd4\x5e\xc4\x09\x95\xb4\x02\xe7\xc3\x57\x5e\xc2\x05\x1e\x04\xb7\x4e\xbf\x62\x71\xf2\xf4\x63\x55\xf3\xaa\xb6\x6b\x5f\x23\x84\x69\xd5\x32\x75\x2b\xd7\x87\x92\xae\x0d\x30\x74\xaa\x4a\x40\x44\x18\xb5\xf4\xd8\x98\xc1\x17\x68\x7c\x86\xf7\xf8\x72\x0c\xb6\xbc\xb3\xd6\xdd\x03\x54\x73\x1a\xc3\x5d\x8b\xf1\x00\x6c\x17\x95\x54\x18\x58\xb9\xc6\xe7\x67\x10\x2d\xc9\x0c\x5a\x4d\xd1\x48\x35\xde\x32\xb8\x0e\xae\x73\x45\x75\x1e\x08\xab\x05\x99\xc8\x37\x20\xbb\x91\x8b\xaf\xaf\x7d\x2e\x96\xbf\xb6\xb6\xfd\x3e\x4d\x05\xcd\x4d\x52\xa8\xae\xa8\x5d\x92\xc1\x5a\x83\x91\x58\xda\x75\x00\x4f\xcf\x4f\x60\x2d\x97\x15\xc1\xc8\xd5\x16\xd8\x03\x62\x8e\xeb\x7c\x1f\xb7\x7b\x66\xd0\xc7\x55\x87\x57\x4a\xea\xae\x16\x77\x1d\x3f\xc5\xe5\x23\xf4\x20\x54\x0b\xfa\x2b\x43\x3c\xe2\x05\xd8\x50\x86\x39\x26\x90\xcf\x7b\x67\xcb\x5d\x42\xc4\xa0\xdc\xce\x69\xda\x50\xde\x73\x7f\xdf\x86\x72\x2f\x95\xee\x9a\x35\xfb\xa7\x48\x7e\x18\xad\x50\x64\x34\x4d\x87\x17\xc8\x81\x0c\x13\x04\x31\x5d\xc6\xe5\xda\x62\x3e\x3a\xbb\xaf\x8f\xd5\x07\xc9\x4c\xab\xdb\x27\xf2\x92\x88\x4d\x13\x5f\xbc\x25\xc7\x9a\x2a\x4b\x94\x4e\xf1\x05\x69\x30\x5d\xad\x93\x15\x26\x53\xb7\x2b\xfb\x45\x82\x78\xe8\x7d\xaa\x64\xa9\xcb\xc1\x43\x32\x1f\x34\xd7\x32\x1b\x39\x89\x70\xfd\x4f\x07\xfa\x70\x2c\xe2\xaf\x93\x0b\xfc\xbb\x36\x3e\x38\x3d\x62\x1f\x0e\xee\xb8\x97\x29\xc1\x68\xf6\x2e\xe9\xdf\x85\x9b\x2f\xb4\x50\x30\xaa\xee\xf0\x82\xe7\x9f\x60\x1b\x6a\xd2\x7b\x33\xe5\x17\x0c\x3e\x8a\xac\x49\x6c\x6d\x05\xc6\x5a\x75\x16\x96\xad\xed\x93\x3c\xad\xf9\x36\xad\xc4\xf8\x32\x06\x15\x20\xcd\xc5\x06\x22\xf7\x6b\xd8\xf1\x78\x6a\xc4\xb6\x15\x26\x7e\x9b\x5c\x5c\x24\x6f\x4f\x63\xd2\x28\x46\x45\x38\x6c\x90\xfc\xe1\x47\xda\x28\xd9\x2a\x8e\x5f\x25\x81\x1b\x77\x6d\x52\x4c\x81\x7d\xe8\x3e\x5f\x0f\x9f\x2e\xa1\xb6\xc6\x5d\xc4\x05\x98\x60\x80\x53\xba\x98\x19\x05\xaa\xe5\x60\x4c\xc9\x85\xdd\x62\xcf\xb8\x86\xc2\xf2\x7e\x03\x2d\x2f\x48\x83\xad\x9d\xb2\x0c\x36\x3e\xaa\xc4\x70\x7b\xaf\xf3\x82\xcd\x9d\x78\x0b\x36\xf6\x17\x61\xf8\x3a\x42\xde\x55\xc1\xd6\xf9\xb7\xdf\xac\x6c\x9f\x7d\xc9\xb6\x45\xf5\x32\x96\x1b\x16\x67\xc0\xe1\x1a\x89\x83\xe1\xe1\x6f\xbe\x06\xc6\xbe\xf2\x69\x43\x14\x3d\x98\xe1\x56\x69\x26\x50\x65\x9c\x3e\x83\xfb\x25\x62\x38\xdc\xa7\xcf\x61\xd5\x0d\xb8\x04\xf2\xb9\x53\x3c\xca\xe3\x2c\x1b\x6b\x65\x27\x0b\xf7\xf9\x4a\xf0\x8e\xed\xe1\xca\x7f\xb6\x5d\xe2\xc1\xfe\x30\xc5\xf3\xeb\xfb\xd0\xfe\x05\xc3\xe9\x9c\xf8\x98\xba\xa2\x9a\x36\xe6\xd8\xf8\xeb\xf2\xdc\x0b\x81\x57\xa6\x40\xb5\x78\x4e\x5e\x39\xdd\x84\x85\x4f\x21\x63\x39\x22\x5e\x09\x55\xf8\x2f\x66\x5f\xad\xce\x1d\x0a\xde\x90\x7f\xfd\x0c\xe8\xcb\xa0\xbe\x4e\x70\xe0\x75\x54\x83\x10\x8a\x94\x5a\x35\x03\xbb\x25\xaf\xe8\x9c\xac\x98\x4d\xaa\xe5\x31\x86\x6f\x7e\x38\xfb\xef\xec\x7e\x05\xb2\x74\xf8\x51\xe9\xff\x00\x00\x00\xff\xff\x2b\xab\xd2\xc7\x65\x12\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 4709, mode: os.FileMode(420), modTime: time.Unix(1445807954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x6e\xdb\x30\x0c\x3d\x37\x5f\xc1\x69\x18\xb0\x01\x73\xbd\xee\xd6\xd6\xf1\x7d\x87\x15\xbb\xed\x38\xc8\x36\x63\x09\x95\x25\x43\xa2\x9b\x06\x41\xfe\x7d\x94\xe4\x38\x69\x87\x22\x3b\x35\x40\x64\x49\xe4\xe3\x7b\x22\x45\x55\xce\x80\xed\x0b\xbd\x59\x0b\x6d\x3b\x7c\x7e\x90\x03\x86\x6b\x83\xb6\x27\x25\x56\xc0\xbf\xd6\xc8\x10\xd6\xa2\xf1\x28\xbb\xd6\x4f\x43\x23\x6a\xde\xaf\x8c\xae\xab\x30\x4a\x7b\xb4\xf7\x66\x37\x2a\xdd\x3a\x0b\xcb\xac\x68\x9c\x7b\x14\x75\x55\xb2\xef\x11\x22\x41\x79\x64\xb2\x8f\xa2\xfe\x11\xf9\x30\x54\xa5\x9c\x5d\xaa\xd2\x99\x7a\xb5\xaa\x3a\xfd\x14\x35\x05\xe5\xb6\x6b\x81\xde\x3b\xff\x13\x43\x90\x3d\x8a\x23\x99\x34\xe8\x09\xd2\x58\x74\xd2\xf6\xe8\x23\xa0\x35\x4e\x3e\x0a\xf0\xce\xe0\xec\x92\xa4\xee\xf7\xe7\x31\x0e\x07\xe6\x61\x86\x48\x44\xb2\x31\x78\xe1\xf8\xa7\x0c\x64\xef\x34\x16\x81\xbc\x1e\xb1\xe3\xf8\x57\x15\x79\x1e\xf9\xa3\x60\xab\x3b\x52\x6b\x71\x7b\xfb\x49\xd4\x31\x52\x55\x92\x9a\x6d\xf5\x3c\xe7\x8f\xcf\xa0\xc8\xeb\x71\x44\x49\x67\xdc\xa0\x2d\x9c\x84\x88\x0c\xee\x4e\x69\x2b\x75\x4e\x5a\xb9\xdf\x2f\x6e\x87\x83\xa8\x5f\x2c\x73\x46\x19\x96\xd1\x10\x68\x17\x33\xb2\x55\x9a\x58\xf9\x28\x5b\xbc\x03\xeb\xb6\x5e\x8e\xf7\x89\xe1\xaa\x6a\x26\x22\xae\x5c\xca\xa1\x6e\x1f\x39\xeb\x9d\xa6\x54\x9f\xcf\x4b\xdc\x2f\x22\xba\xc2\xf1\x47\xbb\x91\x63\x66\xe0\x52\x97\x86\x2c\xf0\xbf\xe8\x70\x23\x27\x43\x69\x1e\x86\x4c\x72\x75\xf1\xba\x44\xd2\x78\x5d\xa2\x5f\x0d\x71\x95\xc4\x95\x99\xe4\x0d\xa5\x5c\x74\x8b\xef\x2e\x75\x34\x53\x28\x82\xee\xed\x49\x6f\x12\xf2\x1f\x82\x3b\x34\x48\xef\xaf\x98\xbc\x0c\x6a\x51\xfb\x5a\xe7\x7c\x5d\xf2\xed\xe4\x31\x5e\xf2\xb3\x56\x8c\xfd\xf1\xe1\xad\x06\x99\x49\x93\xf9\x37\x9a\xd6\x0d\x98\x9f\x08\x75\x53\xcf\x6b\x20\x07\x6d\xb3\xa1\xaa\xe4\xbd\x68\x8a\x0d\x18\x37\x40\x07\x90\xb0\x99\x8c\x29\x08\x9f\x09\x02\xfa\x27\x6e\xe6\x8d\xf3\xd0\xba\xa9\x55\x8d\x0c\x08\x9d\x24\x79\x3d\x37\xed\x8c\xfd\x65\x30\x59\x70\xa3\x2d\xc2\xce\x4d\x8c\xd1\x3e\x50\x6e\x1e\x6e\x44\xee\x46\x52\x08\x0f\xb8\x85\x94\x6a\xc8\x67\x3d\x86\x59\x9e\x80\x78\xc0\xe5\x00\xe3\x44\x45\xef\xdd\x34\x66\xfd\xff\x34\xdd\x1f\x8b\xdb\x64\x62\xe3\x5c\xd7\xd7\xc5\x19\xbd\x1e\xa4\xdf\x89\xb9\x84\x61\x6a\x06\x4d\x33\x86\x51\xfa\xd2\xa5\x8a\x15\xd2\xf5\x49\x77\x26\x5b\x2a\x15\xe7\xf2\x4c\x7e\x6a\xed\x7a\x75\x7d\x9e\x7c\x50\x37\x5f\xe1\xe5\x4e\x3c\xe5\x9e\xc1\x2c\xad\xd7\xf1\x5d\xe6\x68\xc3\x1d\x7c\xff\x36\x3e\xdf\xaf\xe2\x83\x98\xe3\xfc\x0d\x00\x00\xff\xff\x52\x12\x88\xe9\x0d\x06\x00\x00")

func staticx_partials_index_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_list_html,
		"staticx/partials/index/list.html",
	)
}

func staticx_partials_index_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/list.html", size: 1549, mode: os.FileMode(420), modTime: time.Unix(1443737395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/index.html":               staticx_index_html,
	"staticx/partials/index/list.html": staticx_partials_index_list_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"list.html": &_bintree_t{staticx_partials_index_list_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
