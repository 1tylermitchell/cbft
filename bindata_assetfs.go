package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xdf\x6f\xe4\x26\x10\x7e\xcf\x5f\xc1\xb9\x91\x7a\x27\x85\x75\xd2\xab\xaa\xaa\xdd\x8d\x74\xcd\x55\x6d\xd4\x5f\x79\x68\x1f\xfa\x88\xcd\xd8\x26\xc1\xe0\x02\x76\xb2\x57\xf5\x7f\xef\x80\xd7\x1b\xdb\xc9\xde\xe1\x3d\xc5\x91\x02\x98\xf9\x98\xcf\x03\x03\x1f\xbb\x7e\xf5\xfe\x8f\xab\x3f\xff\xbe\xf9\x91\x54\xae\x96\x97\x27\x6b\x5f\x10\xc9\x54\xb9\x49\x40\x25\x44\x95\x94\x35\xcd\x26\xa9\xb7\xef\x9a\x26\xf1\xfd\xc0\xf8\xe5\x09\x21\xeb\x1a\x1c\x23\x79\xc5\x8c\x05\xb7\x49\x5a\x57\xd0\x6f\x93\xc7\x0e\xc5\x6a\xd8\x24\x1c\x6c\x6e\x44\xe3\x84\xc6\xa1\x72\xad\x1c\x28\xb4\x45\x33\x6f\xf7\x8a\x52\xf2\x83\xd6\xce\x3a\xc3\x1a\x42\x69\x00\x4b\xa1\xee\x48\x65\xa0\xd8\x24\xa9\x75\xcc\x89\x3c\xcd\xad\x4d\x1b\x23\x6c\xbd\xc2\x5a\x42\x0c\xc8\x4d\x62\xdd\x56\x82\xad\x00\x5c\x92\xf6\xa3\x1d\x00\x22\xf9\x83\xb0\xc3\xa8\x6c\xa0\x75\x04\x96\x33\x5b\x65\x9a\x19\x7e\x04\xd6\x88\xfc\xce\x56\xec\x7e\x55\x0b\xb5\x10\x2e\x45\x96\xe2\xac\xb5\x92\x19\xea\x0c\x40\x27\xe0\x7e\x78\xb1\x1a\x5e\x7c\x3a\x82\x7d\x5f\xa5\x8d\xcb\x5b\x47\x44\xee\x27\x6e\xea\xa8\x60\x9d\x7f\xbd\xc2\x7f\x1e\xb9\x4e\xfb\x15\xb1\xce\x34\xdf\x06\x72\x5c\x74\x24\x97\xcc\xda\x4d\xe2\xa7\x9c\x09\x05\x26\xac\x8c\x69\x9f\x62\x5d\xc6\x0c\xe9\x0b\x2a\x54\x07\xb8\x92\x86\x66\x21\x1e\x80\x53\xa7\x1b\x64\xab\x25\x04\x6b\x51\xb2\xb0\x90\xfa\xa1\x3e\xee\xe8\x79\x67\xd4\x53\x9d\xd8\xa0\x15\x1b\x6c\x34\x32\x10\x1c\x68\x66\x98\xe2\xfb\xaf\x9e\x18\xa3\xb9\xa8\xcb\x01\x20\x75\xa9\x13\x62\x4d\xfe\x18\x1c\xec\x4d\xf3\x6c\xd5\xa8\xb2\x9f\xa9\x3d\x2c\x65\x23\x62\x29\x32\x1b\x35\x5b\x39\xa2\x39\x44\x00\x8b\x29\x4f\x29\x2e\x91\xeb\x8e\x95\x50\x1c\x1e\xc0\x22\xbb\xeb\xbe\xe6\x1d\xac\x71\x11\x8c\xbd\xb4\xf2\xf3\x9c\x28\xcd\x83\x8b\xdf\x7d\xf9\x12\x0e\x6a\xad\x84\xd3\x06\x5d\xfc\xd6\xd7\x5e\xc4\x09\x53\xac\x04\xef\x23\x54\x5e\xc2\x05\x2e\x04\x1f\xa7\x5f\xb1\x38\x7a\xf8\xa1\x6a\x44\x59\xb9\xb9\xaf\x01\xc2\x8d\x6e\xb8\xbe\x57\xf3\x45\xc9\xe6\x06\x98\x3a\x65\x29\x21\x21\x9c\x39\xb6\x6b\x8c\xe0\x13\x34\x3e\xfd\x77\x7c\x31\x24\x5b\xd6\x3a\xe7\x13\x9f\x19\xc1\x28\x3c\x34\x98\x0f\xc0\x37\x49\xc1\xa4\x85\x99\x6b\x7c\x7e\x06\xd9\x90\xb5\x45\xab\x7d\x36\x32\x83\xdb\x0a\xc6\xc1\xbf\x9c\x51\x1d\x27\xc2\x2c\x20\x7b\xf2\x35\xa8\x76\xe0\x12\xea\x73\x9f\x93\xf0\x57\xce\x35\xdf\xa5\xa9\x64\x99\x5d\xe5\xba\xcd\xab\x8c\x59\xc0\x5a\x8d\x99\x58\xb8\x79\x02\xef\x9f\x9f\xc0\x39\xa1\x4a\x82\x99\x6b\x1c\xf0\x27\xc4\x3c\xd7\xf1\x3c\x2e\xf7\xcc\xa1\xa3\x65\x8b\x5b\x4a\xea\xb7\x16\xbf\xff\x1e\xe2\xf2\x1e\x3a\x90\xba\x01\xf3\xa5\x25\x01\xf1\x02\x6c\x18\xc7\x43\x25\x92\xcf\x3b\x6f\x2b\xfc\x09\x88\x49\xb9\x9c\xd3\x7e\x42\x45\x27\xc2\x7e\x1b\xcb\xbd\xd0\xa6\xad\xe7\xec\x0f\x91\xbc\x1a\xac\x50\x59\xd4\x75\x8b\x1b\xc8\x96\xf4\x03\x44\x31\x9d\xe6\xe5\xdc\x62\xdc\x3b\xda\xaf\x77\xd5\x27\x87\x99\xd1\xf7\x07\xce\x25\x49\x6d\x4d\x2f\xce\xc9\xae\xa6\x8b\x02\xf5\x12\xbd\x20\x35\x1e\x57\xf3\xc3\x0a\xc5\x96\x9f\x95\xcb\xc9\x01\xf1\xd4\xfb\x98\xc6\xba\x17\x58\xd3\x53\xc8\x6b\x81\xdb\x7f\x5a\x30\xdb\x5d\x41\xbf\x5a\x5d\xe0\xdf\xad\x0d\x49\x19\x10\x97\xf1\xe0\x56\x04\x3d\x12\x8d\xe6\x6f\x57\xdd\xdb\x78\xf3\x89\xe8\x89\x46\x55\x2d\x6e\xec\xe2\x03\x2c\x43\xed\x85\xdd\x48\xe2\x45\x83\x77\x6a\x6a\xaf\xaa\x96\x02\xa9\xd1\xad\x83\x69\x6b\xf9\x20\x87\xc5\xdd\xa2\x48\x0c\x1f\x63\x51\xea\xb1\x4c\x2e\x20\xf2\x18\xc3\x56\xd0\x7d\x83\xba\x46\x5a\x7a\xbe\xba\xb8\x58\x9d\x1f\xc7\xa4\xd6\x9c\xc9\x78\x58\x7f\x25\x88\x5f\xd2\x56\xab\x46\x0b\xbc\x82\x44\x4e\xdc\xad\x4d\xf1\xe8\xeb\x62\xe7\xf9\xb6\xbf\x6b\xc4\xda\x5a\xbf\x01\xe7\x60\xa3\x01\x5e\xe1\xe2\x89\x28\x51\x25\x47\x63\x0a\x21\xdd\x12\x7b\x2e\x0c\xe4\x4e\x74\x0b\x68\x05\x21\x1a\x6d\xed\x15\x65\xb4\xf1\x4e\x1d\xc6\xdb\x07\x7d\x17\x6d\xee\x45\x5b\xb4\x71\xd8\x08\xe3\xe3\x08\x59\x5b\x46\x5b\x67\xdf\x7c\x3d\xb3\xfd\xe8\x47\x36\x0d\xaa\x96\xa1\x5c\x10\x9c\x1e\x87\x31\x92\x5b\x2b\xe2\xbf\x7c\x0e\xa4\xa1\xf2\x61\x41\x16\x3d\x19\xe1\x5e\x1b\x2e\x51\x5d\x1c\x3f\x82\xff\xd9\xa1\x5f\xdc\xc7\x8f\xe1\xf4\x1d\xf8\x03\xe4\x73\x87\x78\x96\xc7\x3a\xed\xaf\xc3\x27\xeb\xe1\x4d\xd1\xaa\xdc\x5f\x5f\x09\xee\xb5\x1d\xdc\x84\x6b\xdb\x35\x2e\xf0\xab\x7d\x5e\xbf\x7e\x4c\xf1\x5f\x30\xad\xce\x48\xc8\xad\x1b\x66\x58\x6d\x77\x8d\xbf\xae\xcf\x82\x10\x38\xb5\x39\xaa\xc5\x33\x72\xea\x75\x13\x16\xe1\x28\x19\xca\x01\x71\x2a\x75\x1e\x6e\xcc\xa1\x5a\x9e\x79\x14\xbc\x21\xff\x86\x11\xd0\x97\x45\x7d\xbd\xc2\x8e\xd7\x49\x05\x52\x6a\x52\x18\x5d\xf7\xec\xa6\xbc\x92\x33\x32\x63\xb6\x57\x2d\xcf\x31\x7c\xf3\xfd\xc9\x7f\x27\xe3\x48\xf4\x3f\x2c\xfd\x1f\x00\x00\xff\xff\x36\x0c\x86\xb4\x69\x12\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 4713, mode: os.FileMode(420), modTime: time.Unix(1445721416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x6e\xdb\x30\x0c\x3d\x37\x5f\xc1\x69\x18\xb0\x01\x73\xbd\xee\xd6\xd6\xf1\x7d\x87\x15\xbb\xed\x38\xc8\x36\x63\x09\x95\x25\x43\xa2\x9b\x06\x41\xfe\x7d\x94\xe4\x38\x69\x87\x22\x3b\x35\x40\x64\x49\xe4\xe3\x7b\x22\x45\x55\xce\x80\xed\x0b\xbd\x59\x0b\x6d\x3b\x7c\x7e\x90\x03\x86\x6b\x83\xb6\x27\x25\x56\xc0\xbf\xd6\xc8\x10\xd6\xa2\xf1\x28\xbb\xd6\x4f\x43\x23\x6a\xde\xaf\x8c\xae\xab\x30\x4a\x7b\xb4\xf7\x66\x37\x2a\xdd\x3a\x0b\xcb\xac\x68\x9c\x7b\x14\x75\x55\xb2\xef\x11\x22\x41\x79\x64\xb2\x8f\xa2\xfe\x11\xf9\x30\x54\xa5\x9c\x5d\xaa\xd2\x99\x7a\xb5\xaa\x3a\xfd\x14\x35\x05\xe5\xb6\x6b\x81\xde\x3b\xff\x13\x43\x90\x3d\x8a\x23\x99\x34\xe8\x09\xd2\x58\x74\xd2\xf6\xe8\x23\xa0\x35\x4e\x3e\x0a\xf0\xce\xe0\xec\x92\xa4\xee\xf7\xe7\x31\x0e\x07\xe6\x61\x86\x48\x44\xb2\x31\x78\xe1\xf8\xa7\x0c\x64\xef\x34\x16\x81\xbc\x1e\xb1\xe3\xf8\x57\x15\x79\x1e\xf9\xa3\x60\xab\x3b\x52\x6b\x71\x7b\xfb\x49\xd4\x31\x52\x55\x92\x9a\x6d\xf5\x3c\xe7\x8f\xcf\xa0\xc8\xeb\x71\x44\x49\x67\xdc\xa0\x2d\x9c\x84\x88\x0c\xee\x4e\x69\x2b\x75\x4e\x5a\xb9\xdf\x2f\x6e\x87\x83\xa8\x5f\x2c\x73\x46\x19\x96\xd1\x10\x68\x17\x33\xb2\x55\x9a\x58\xf9\x28\x5b\xbc\x03\xeb\xb6\x5e\x8e\xf7\x89\xe1\xaa\x6a\x26\x22\xae\x5c\xca\xa1\x6e\x1f\x39\xeb\x9d\xa6\x54\x9f\xcf\x4b\xdc\x2f\x22\xba\xc2\xf1\x47\xbb\x91\x63\x66\xe0\x52\x97\x86\x2c\xf0\xbf\xe8\x70\x23\x27\x43\x69\x1e\x86\x4c\x72\x75\xf1\xba\x44\xd2\x78\x5d\xa2\x5f\x0d\x71\x95\xc4\x95\x99\xe4\x0d\xa5\x5c\x74\x8b\xef\x2e\x75\x34\x53\x28\x82\xee\xed\x49\x6f\x12\xf2\x1f\x82\x3b\x34\x48\xef\xaf\x98\xbc\x0c\x6a\x51\xfb\x5a\xe7\x7c\x5d\xf2\xed\xe4\x31\x5e\xf2\xb3\x56\x8c\xfd\xf1\xe1\xad\x06\x99\x49\x93\xf9\x37\x9a\xd6\x0d\x98\x9f\x08\x75\x53\xcf\x6b\x20\x07\x6d\xb3\xa1\xaa\xe4\xbd\x68\x8a\x0d\x18\x37\x40\x07\x90\xb0\x99\x8c\x29\x08\x9f\x09\x02\xfa\x27\x6e\xe6\x8d\xf3\xd0\xba\xa9\x55\x8d\x0c\x08\x9d\x24\x79\x3d\x37\xed\x8c\xfd\x65\x30\x59\x70\xa3\x2d\xc2\xce\x4d\x8c\xd1\x3e\x50\x6e\x1e\x6e\x44\xee\x46\x52\x08\x0f\xb8\x85\x94\x6a\xc8\x67\x3d\x86\x59\x9e\x80\x78\xc0\xe5\x00\xe3\x44\x45\xef\xdd\x34\x66\xfd\xff\x34\xdd\x1f\x8b\xdb\x64\x62\xe3\x5c\xd7\xd7\xc5\x19\xbd\x1e\xa4\xdf\x89\xb9\x84\x61\x6a\x06\x4d\x33\x86\x51\xfa\xd2\xa5\x8a\x15\xd2\xf5\x49\x77\x26\x5b\x2a\x15\xe7\xf2\x4c\x7e\x6a\xed\x7a\x75\x7d\x9e\x7c\x50\x37\x5f\xe1\xe5\x4e\x3c\xe5\x9e\xc1\x2c\xad\xd7\xf1\x5d\xe6\x68\xc3\x1d\x7c\xff\x36\x3e\xdf\xaf\xe2\x83\x98\xe3\xfc\x0d\x00\x00\xff\xff\x52\x12\x88\xe9\x0d\x06\x00\x00")

func staticx_partials_index_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_list_html,
		"staticx/partials/index/list.html",
	)
}

func staticx_partials_index_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/list.html", size: 1549, mode: os.FileMode(420), modTime: time.Unix(1443737395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/index.html":               staticx_index_html,
	"staticx/partials/index/list.html": staticx_partials_index_list_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"list.html": &_bintree_t{staticx_partials_index_list_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
