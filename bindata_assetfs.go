package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x4d\x8f\xa4\x36\x10\xbd\xef\xaf\xf0\x92\x43\x4e\x86\xe9\x6c\x14\x45\x51\x77\x4b\x9b\xdd\x28\x89\x94\xaf\x43\x2e\x39\x1a\x5c\x80\x67\x8c\x4d\x6c\x43\x4f\xef\xaf\x4f\xd9\x34\x0c\x30\xdb\x1b\xd3\xa3\x61\xa4\xb1\xc1\xef\xb9\x1e\x65\x97\xab\xe8\xfd\xdb\x8f\x7f\x7e\xf8\xfb\x9f\xbf\x7e\x22\xb5\x6b\xe4\xf1\xcd\xde\x37\x44\x32\x55\x1d\x12\x50\x09\x51\x15\x65\x6d\x7b\x48\x9a\xf3\xfb\xb6\x4d\xfc\x38\x30\x7e\x7c\x43\xc8\xbe\x01\xc7\x48\x51\x33\x63\xc1\x1d\x92\xce\x95\xf4\xfb\xe4\x69\x40\xb1\x06\x0e\x09\x07\x5b\x18\xd1\x3a\xa1\x71\xaa\x42\x2b\x07\x0a\xb1\x08\xf3\xb8\xb7\x94\x92\x1f\xb5\x76\xd6\x19\xd6\x12\x4a\x03\x59\x0a\xf5\x40\x6a\x03\xe5\x21\xc9\xac\x63\x4e\x14\x59\x61\x6d\xd6\x1a\x61\x9b\x14\x7b\x09\x31\x20\x0f\x89\x75\x67\x09\xb6\x06\x70\x49\x36\xcc\x76\x85\x88\xe2\xaf\xd2\xae\xb3\xf2\x51\xd6\x0d\x5c\xce\x6c\x9d\x6b\x66\xf8\x0d\x5c\x23\x8a\x07\x5b\xb3\x53\xda\x08\xb5\x91\x2e\x45\x9e\xe1\xaa\x75\x92\x19\xea\x0c\x40\x2f\xe0\x34\x3e\x48\xc7\x07\xff\xef\xc1\x61\xac\xd6\xc6\x15\x9d\x23\xa2\xf0\x0b\xb7\x34\x54\xb2\xde\x3f\x4e\xf1\x9f\x67\xee\xb3\x61\x47\xec\x73\xcd\xcf\x41\x1c\x17\x3d\x29\x24\xb3\xf6\x90\xf8\x25\x67\x42\x81\x09\x3b\x63\x39\xa6\x58\x9f\x33\x43\x86\x86\x0a\xd5\x03\xee\xa4\xf1\xb6\x14\x8f\xc0\xa9\xd3\x2d\xaa\xd5\x12\x02\x5a\x54\x2c\x6c\xa4\x61\xaa\x2f\x1b\xfa\xbc\x31\xea\xa5\x2e\x30\x88\x62\x23\x46\xa3\x02\xc1\x81\xe6\x86\x29\x3e\xbd\xf5\x02\x8c\x70\xd1\x54\x23\x41\xea\x4a\x27\xc4\x9a\xe2\xc9\x39\x38\x9a\x15\x79\xda\xaa\x6a\x58\xa9\x89\x96\xb1\x99\xb0\x0c\x95\xcd\x6e\x3b\x39\x93\x39\x7a\x00\x9b\xa5\x4e\x29\x8e\xa8\xf5\xa2\x4a\x28\x0e\x8f\x60\x51\xdd\xaf\x43\xcf\x1b\xd8\xe3\x26\x98\x5b\xe9\xe4\xcb\x8c\x28\xcd\x83\x89\x3f\x7c\xfb\x1a\x06\x1a\xad\x84\xd3\x06\x4d\xfc\x3e\xf4\x5e\xc5\x08\x53\xac\x02\x6f\x23\x74\x5e\xc3\x04\x6e\x04\xef\xa7\xdf\xb0\xb9\x79\xfa\xb1\x6b\x44\x55\xbb\xb5\xad\x91\xc2\x8d\x6e\xb9\x3e\xa9\xf5\xa6\x64\x6b\x00\x86\x4e\x55\x49\x48\x08\x67\x8e\x5d\x6e\x66\xf4\x05\x1b\xaf\xe1\x3d\xbe\x1a\x83\x2d\xef\x9c\xf3\x81\xcf\x8c\x60\x14\x1e\x5b\x8c\x07\xe0\x87\xa4\x64\xd2\xc2\xca\x34\x5e\xbf\x80\x6c\xc9\xde\x22\x6a\x8a\x46\x66\xf0\x58\x41\x3f\xf8\x87\x2b\xa9\xf3\x40\x58\x39\x64\x12\xdf\x80\xea\x46\x2d\xa1\xbf\xb6\xb9\x70\x7f\xed\x5c\xfb\x43\x96\x49\x96\xdb\xb4\xd0\x5d\x51\xe7\xcc\x02\xf6\x1a\x8c\xc4\xd2\xad\x03\x78\xba\x7e\x06\xe7\x84\xaa\x08\x46\xae\x71\xc0\x9f\x09\xf3\x5a\xe7\xeb\xb8\xdd\x32\x87\x9e\x56\x1d\x1e\x29\x99\x3f\x5a\xfc\xf9\x7b\x4d\xcb\x47\xe8\x41\xea\x16\xcc\xd7\x96\x04\xc6\x2b\xa8\x61\x1c\x93\x4a\xa4\x9e\xf7\x1e\x2b\x7c\x06\xc4\xa0\xdc\xae\x69\x5a\x50\xd1\x8b\x70\xde\xc6\x6a\x2f\xb5\xe9\x9a\xb5\xfa\x6b\x22\x3f\x8c\x28\xac\x2c\x9a\xa6\xc3\x03\xe4\x4c\x86\x09\xa2\x94\x2e\xe3\x72\x8d\x98\x8f\xce\xce\xeb\x4b\xf7\x59\x32\x33\xfa\x74\x25\x2f\x49\x6a\x1b\xba\xbb\x23\x97\x9e\x2e\x4b\xac\x97\xe8\x8e\x34\x98\xae\xd6\xc9\x0a\x8b\x2d\xbf\x2a\xc7\x45\x82\x78\x6e\x7d\x2e\x63\x3f\x14\x58\xcb\x2c\xe4\x6b\x81\xfb\x7f\x3b\x30\xe7\x4b\x43\xbf\x49\x77\xf8\x77\x6f\x43\x50\x06\xc6\x31\x9e\xdc\x89\x50\x8f\x44\xb3\xf9\xbb\xb4\x7f\x17\x0f\x5f\x14\x3d\xd1\xac\xba\xc3\x83\x5d\x7c\x82\x6d\xac\xa9\xb0\x9b\x95\x78\xd1\xe4\x4b\x35\x35\x55\x55\x5b\x89\xd4\xe8\xce\xc1\xf2\x6e\xfb\x24\xd7\x8b\xbb\x4d\x9e\x18\x5f\xc6\x62\xa9\xc7\x72\xb9\x41\xc8\x93\x0f\x3b\x41\xa7\x1b\xea\x5a\x69\xe9\x5d\xba\xdb\xa5\x77\xb7\x29\x69\x34\x67\x32\x9e\x36\x7c\x12\xc4\x6f\x69\xab\x55\xab\x05\x7e\x82\x44\x2e\xdc\xbd\xcd\x30\xf5\xf5\xb1\xeb\x7c\x3f\x7c\x6b\xc4\x62\xad\x3f\x80\x0b\xb0\xd1\x04\x5f\xe1\x62\x46\x94\x58\x25\x47\x73\x4a\x21\xdd\x16\x3c\x17\x06\x0a\x27\xfa\x0d\xb2\x42\x21\x1a\x8d\xf6\x15\x65\x34\xf8\x52\x1d\xc6\xe3\x43\x7d\x17\x0d\xf7\x45\x5b\x34\x38\x1c\x84\xf1\x7e\x84\xbc\xab\xa2\xd1\xf9\x77\xdf\xae\xb0\x5f\x7c\xc9\xb6\xc5\xaa\x65\x6c\x37\x38\x67\xe0\xa1\x8f\xe4\xd9\x8a\xf8\x37\x5f\x13\x69\xe8\x7c\xda\x10\x45\xcf\x66\x38\x69\xc3\x25\x56\x17\xb7\xcf\xe0\x7f\x76\x18\x36\xf7\xed\x73\x38\xfd\x00\x3e\x81\xbc\x74\x8a\xcf\xea\xd8\x67\xc3\xe7\x30\x7e\x1d\x87\x9f\x55\xfe\x0b\x00\x00\xff\xff\x7b\x3e\xa3\xed\x67\x11\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 4455, mode: os.FileMode(420), modTime: time.Unix(1435013003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x6e\xdb\x30\x0c\x3d\x37\x5f\xc1\x69\x18\xb0\x01\x73\xbd\xee\xd6\xd6\xf1\x7d\x87\x15\xbb\xed\x38\xc8\x36\x63\x09\x95\x25\x43\xa2\x9b\x06\x41\xfe\x7d\x94\xe4\x38\x69\x87\x22\x3b\x35\x40\x64\x49\xe4\xe3\x7b\x22\x45\x55\xce\x80\xed\x0b\xbd\x59\x0b\x6d\x3b\x7c\x7e\x90\x03\x86\x6b\x83\xb6\x27\x25\x56\xc0\xbf\xd6\xc8\x10\xd6\xa2\xf1\x28\xbb\xd6\x4f\x43\x23\x6a\xde\xaf\x8c\xae\xab\x30\x4a\x7b\xb4\xf7\x66\x37\x2a\xdd\x3a\x0b\xcb\xac\x68\x9c\x7b\x14\x75\x55\xb2\xef\x11\x22\x41\x79\x64\xb2\x8f\xa2\xfe\x11\xf9\x30\x54\xa5\x9c\x5d\xaa\xd2\x99\x7a\xb5\xaa\x3a\xfd\x14\x35\x05\xe5\xb6\x6b\x81\xde\x3b\xff\x13\x43\x90\x3d\x8a\x23\x99\x34\xe8\x09\xd2\x58\x74\xd2\xf6\xe8\x23\xa0\x35\x4e\x3e\x0a\xf0\xce\xe0\xec\x92\xa4\xee\xf7\xe7\x31\x0e\x07\xe6\x61\x86\x48\x44\xb2\x31\x78\xe1\xf8\xa7\x0c\x64\xef\x34\x16\x81\xbc\x1e\xb1\xe3\xf8\x57\x15\x79\x1e\xf9\xa3\x60\xab\x3b\x52\x6b\x71\x7b\xfb\x49\xd4\x31\x52\x55\x92\x9a\x6d\xf5\x3c\xe7\x8f\xcf\xa0\xc8\xeb\x71\x44\x49\x67\xdc\xa0\x2d\x9c\x84\x88\x0c\xee\x4e\x69\x2b\x75\x4e\x5a\xb9\xdf\x2f\x6e\x87\x83\xa8\x5f\x2c\x73\x46\x19\x96\xd1\x10\x68\x17\x33\xb2\x55\x9a\x58\xf9\x28\x5b\xbc\x03\xeb\xb6\x5e\x8e\xf7\x89\xe1\xaa\x6a\x26\x22\xae\x5c\xca\xa1\x6e\x1f\x39\xeb\x9d\xa6\x54\x9f\xcf\x4b\xdc\x2f\x22\xba\xc2\xf1\x47\xbb\x91\x63\x66\xe0\x52\x97\x86\x2c\xf0\xbf\xe8\x70\x23\x27\x43\x69\x1e\x86\x4c\x72\x75\xf1\xba\x44\xd2\x78\x5d\xa2\x5f\x0d\x71\x95\xc4\x95\x99\xe4\x0d\xa5\x5c\x74\x8b\xef\x2e\x75\x34\x53\x28\x82\xee\xed\x49\x6f\x12\xf2\x1f\x82\x3b\x34\x48\xef\xaf\x98\xbc\x0c\x6a\x51\xfb\x5a\xe7\x7c\x5d\xf2\xed\xe4\x31\x5e\xf2\xb3\x56\x8c\xfd\xf1\xe1\xad\x06\x99\x49\x93\xf9\x37\x9a\xd6\x0d\x98\x9f\x08\x75\x53\xcf\x6b\x20\x07\x6d\xb3\xa1\xaa\xe4\xbd\x68\x8a\x0d\x18\x37\x40\x07\x90\xb0\x99\x8c\x29\x08\x9f\x09\x02\xfa\x27\x6e\xe6\x8d\xf3\xd0\xba\xa9\x55\x8d\x0c\x08\x9d\x24\x79\x3d\x37\xed\x8c\xfd\x65\x30\x59\x70\xa3\x2d\xc2\xce\x4d\x8c\xd1\x3e\x50\x6e\x1e\x6e\x44\xee\x46\x52\x08\x0f\xb8\x85\x94\x6a\xc8\x67\x3d\x86\x59\x9e\x80\x78\xc0\xe5\x00\xe3\x44\x45\xef\xdd\x34\x66\xfd\xff\x34\xdd\x1f\x8b\xdb\x64\x62\xe3\x5c\xd7\xd7\xc5\x19\xbd\x1e\xa4\xdf\x89\xb9\x84\x61\x6a\x06\x4d\x33\x86\x51\xfa\xd2\xa5\x8a\x15\xd2\xf5\x49\x77\x26\x5b\x2a\x15\xe7\xf2\x4c\x7e\x6a\xed\x7a\x75\x7d\x9e\x7c\x50\x37\x5f\xe1\xe5\x4e\x3c\xe5\x9e\xc1\x2c\xad\xd7\xf1\x5d\xe6\x68\xc3\x1d\x7c\xff\x36\x3e\xdf\xaf\xe2\x83\x98\xe3\xfc\x0d\x00\x00\xff\xff\x52\x12\x88\xe9\x0d\x06\x00\x00")

func staticx_partials_index_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_list_html,
		"staticx/partials/index/list.html",
	)
}

func staticx_partials_index_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/list.html", size: 1549, mode: os.FileMode(420), modTime: time.Unix(1435013101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/index.html":               staticx_index_html,
	"staticx/partials/index/list.html": staticx_partials_index_list_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"list.html": &_bintree_t{staticx_partials_index_list_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
