package cbft

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _staticx_css_cbft_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x78\x91\xdd\x45\x68\x38\x7e\xc5\x96\x71\x03\xdc\x66\x93\x4d\xd0\x0f\x28\xba\x20\xc5\xa1\x35\x30\x45\x12\x14\xfd\x4a\xd1\x7f\x2f\x25\xca\xb6\xe2\x87\x22\x03\x5d\x59\x22\x3d\x67\xce\x19\x9e\x19\xb1\xcf\x15\x6c\xe0\xdd\x08\xa6\x48\x3f\x2f\x7f\x28\x37\x62\x4f\xfa\xd2\xb8\x9c\x2e\x9d\x59\x5b\xf2\xab\x47\x88\x65\x42\xa0\x5e\x86\x4d\xef\x4d\x9e\x90\xa7\x81\xdd\x2d\x7a\xbf\x7b\xbd\x3e\x6a\x01\xbb\x77\x66\x6d\xd8\x26\x7d\xa6\x97\x6b\xc5\x1c\x5d\x23\xf5\x0e\x80\x66\x4c\x0b\x05\x15\x04\x21\x9c\xa5\xab\x12\x52\x8b\x84\x3c\xc8\x99\x64\x52\x2e\xe2\x86\x71\x02\x5c\x40\xb5\x3b\x52\x18\x85\x82\x3c\x08\x06\x43\x60\x71\x3b\x35\xca\x84\xdd\x87\xe7\x74\x0e\x7c\x18\xd7\x6a\x42\x91\xc9\x9d\x74\x92\xcc\x6c\xc0\xd5\xa4\x0e\xe0\xe3\xd1\x0c\xf8\x7c\x71\x85\xe8\x58\x4e\xe5\x73\x93\x28\x3d\xc4\x88\x34\x90\x9c\x75\x49\x6c\x15\x4b\x21\x33\x4a\x1c\xf3\x7e\xce\x31\x90\xf3\xf3\x62\x0c\x83\x2e\xc1\x8a\x0c\x42\x35\x38\x88\xa1\xe0\x71\x9f\x6e\x81\xaf\xd0\x87\xa3\xd8\xd1\x02\x3f\xaa\x22\xd4\xbc\xc2\x52\xfd\x9f\xdc\x7c\xb4\xfe\xe1\xd6\xde\xa5\x92\xea\xed\x95\xe9\x14\xd4\xab\x03\xe6\xe3\x61\xe6\xcc\x2d\x51\x53\x6f\x6c\x20\x5a\x15\xff\xb8\x76\xb0\xc8\xe8\xc6\x99\x14\x90\x7a\x34\xfa\xf8\xf0\x06\xec\x50\x95\x26\xea\xad\x23\x3d\x0f\xff\x56\xda\xf5\x22\x78\x72\x17\xa5\xfc\xf0\xc0\xbd\x6e\x62\x39\x5c\x66\xfe\x36\x95\x66\x58\x38\xe6\x70\x56\x57\x82\x87\x93\xae\xc1\x0d\x5b\x1e\x0c\x26\xa3\x29\x4e\x5e\x39\x59\x6f\x3e\x19\x8d\xe3\xe6\x99\x27\xc7\x23\x39\x62\x6d\x19\x15\xe3\xa0\xaa\x34\xd2\x68\x1f\xec\x14\x89\xea\xd0\xf1\x4c\x35\xaa\xa6\x40\x76\x11\xcf\xbc\x77\x45\x1b\x5c\xb5\x1c\xcc\x06\x09\x99\x5b\xdf\x8a\x55\x3f\xbc\xc5\xa9\x51\x41\xbf\x86\x68\x67\x54\xcc\xb0\xc1\x02\x39\x2a\xf4\xfb\x84\x64\x28\x04\xe8\xee\x70\x75\x79\x3f\x81\x3e\xde\x08\xed\x83\x40\x7f\x37\x23\xd4\x19\x38\x6c\x57\x28\x11\x94\xa8\x7f\xfe\x96\xcc\x4b\xcc\x7b\xb4\xd6\x81\x27\xc9\xdd\xb9\x75\x11\x7c\x56\xc0\x32\xcb\xff\x61\x8e\x7c\xfa\xaa\x44\xa7\x7d\xd9\x9d\x51\x67\xb4\xef\x0b\x29\x2c\x8b\xcd\x2a\xb0\x08\xe3\xb5\xa2\xa3\x50\x03\xe5\xca\xa4\xab\xd2\x78\x1e\x76\x9e\x32\x85\x4b\x9d\x90\xaa\x1b\x2b\x73\x07\x67\x6f\x51\xf8\x2c\x21\x33\xc8\xbb\xe6\x4b\x24\xba\xc2\xd3\x34\xc3\xb0\x82\xda\xae\xfd\x0f\xbf\xb7\xf0\x5f\x9a\x41\xba\x0a\x93\xf3\x67\xb3\xf3\xa3\x9c\x79\x2b\xfa\xb1\xdc\x2f\xe4\xdf\xc7\xf3\x23\x08\x6b\x15\xde\xd5\xef\xd0\x6d\xc2\x0d\x5e\xa5\xf4\xc8\xa9\xd6\x3a\x1c\x7c\x21\xd6\x1a\xbb\xb6\xe5\x49\xb3\x50\xc3\x38\x85\xac\x29\xb0\x1c\xb1\xa1\x7a\xa0\x98\xc7\x0d\x2c\x9a\xe5\x3e\xd5\xb9\x1c\xb9\xf5\x47\x20\x6a\xaf\x5f\x4a\x13\x4a\x65\xb6\x49\x74\x8d\x82\xaf\x19\x9c\x25\x66\x3c\xdc\x07\xd6\xbe\x2d\xf1\x53\x7f\x52\x4a\x23\xa4\x1e\xb8\x74\x18\x5f\xaf\x5c\x2a\xa6\xd3\xe9\xe2\xac\xac\xdb\x0c\x23\xfa\xf1\x42\x31\xa9\xef\x13\xc7\x87\xc5\xed\xd1\x56\x45\xd3\xe0\xc4\x14\xca\xe5\xad\x63\xb6\x5c\xfe\xa0\x95\xc4\x72\x78\x0e\xae\x49\xde\x20\x6c\xbf\x6b\xb5\x8f\xed\xc0\x78\x7d\x43\xba\x6c\x7b\xf2\x0f\xe6\xd6\x38\xcf\xf4\xd5\x26\x3b\xe2\xf0\x75\xf8\xc0\xe9\x6e\x20\x7f\x02\x00\x00\xff\xff\x26\x41\xb7\x9d\xf3\x09\x00\x00")

func staticx_css_cbft_css_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_css_cbft_css,
		"staticx/css/cbft.css",
	)
}

func staticx_css_cbft_css() (*asset, error) {
	bytes, err := staticx_css_cbft_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/css/cbft.css", size: 2547, mode: os.FileMode(420), modTime: time.Unix(1446869950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x7b\x6f\xdb\x36\x10\xff\x3f\x9f\x82\xd3\x8a\x26\x01\x22\x6b\x5d\x87\x61\x68\xec\x00\x59\xba\x47\xb1\x3e\xf2\x47\x86\x61\x18\x86\x80\x12\x4f\x32\x5b\x8a\xd4\x48\xca\x89\xfb\xf8\xee\x3b\x52\x92\x2d\xc9\x52\x2a\x67\xcd\x5c\x20\xa2\xc8\x7b\xfc\x78\x0f\xde\x51\x9d\x7f\xf5\xfc\xcd\xc5\xd5\x9f\x97\x3f\x91\xa5\xcd\xc5\xd9\xc1\xdc\x3d\x88\xa0\x32\x5b\x04\x20\x03\x37\x01\x94\x9d\x1d\x10\x32\xcf\xc1\x52\x92\x2c\xa9\x36\x60\x17\x41\x69\xd3\xf0\x87\xc0\x2f\xc4\xd4\x00\x59\x6a\x48\x17\x41\x84\x33\x6e\xca\x72\x2b\xe0\x2c\x89\x53\x3b\x8f\xaa\xb1\x9f\x16\x5c\xbe\x6b\x28\x8d\xa5\x96\x27\x51\x62\x4c\x44\x8b\x62\x86\xcf\x80\x68\x10\x8b\xc0\xd8\xb5\x00\xb3\x04\xb0\x41\x74\x76\x07\x57\xa1\xb9\xc9\xef\xc1\x17\x2b\x65\x8d\xd5\xf4\x3e\x3a\x19\x35\xcb\x58\x51\xcd\xee\xc1\xab\x79\xf2\xce\x2c\xe9\xcd\x2c\xe7\x72\x94\x7d\x84\x5f\xf0\x38\x42\x9f\x94\x82\xea\xb0\xe4\xa1\xd5\x00\x11\xe3\xc6\xf6\x27\xa7\xc9\xee\xaf\x75\x95\xdd\x7a\xb4\xce\x77\x5e\xd2\x2e\xe3\x52\x69\x9b\x94\x96\xf0\x44\xc9\x1e\x6f\x94\xd2\x95\x9b\x9e\xe1\x1f\xc7\x39\x8f\xaa\xf0\x99\xc7\x8a\xad\x89\xcc\x42\x74\xf5\x22\x48\xe2\xcc\x9e\x17\x45\x15\x3d\x8c\xaf\x48\x22\xa8\x31\x38\xaf\xa4\xa5\x5c\x82\xf6\x2b\xdd\x35\x49\x57\x31\xd5\xa4\x7a\x84\x5c\xae\x00\xe3\xb0\x79\x4d\xf9\x2d\xb0\xd0\xaa\x02\xf7\xad\x04\x78\x6a\x9e\x21\x20\x25\x6b\x51\x77\x2b\x1a\x56\x16\x3a\xec\x1d\x1a\xa4\xa2\x0d\x8d\x42\x04\x9c\x41\x18\x6b\x2a\x59\xd0\x8a\x7f\xd2\xfa\xcd\x79\x9e\x35\x0c\x42\x65\x2a\x20\x46\x27\x5b\x6b\xe1\x2a\x1a\x7a\x56\xc8\xac\x0a\x9d\x0d\x5b\x44\x5b\xc0\xd0\xd3\xab\xd6\x6b\x29\x5a\x30\x1b\x0b\xe0\xa3\x8b\x53\xf0\x33\xc4\x5a\xa3\xe2\x92\xc1\x2d\x18\x44\xf7\xa2\x1a\x39\x05\x73\x8c\xaa\xb6\x96\x52\xfc\x37\x25\x52\x31\xaf\xe2\xb5\x7b\x3e\x84\x82\x5c\x49\x6e\x95\x46\x15\xaf\xaa\xd1\x83\x28\xa1\x92\x66\xe0\x74\xf8\xc1\x43\xa8\xc0\x40\x70\x76\x7a\x89\x8f\x7b\x8b\x6f\x86\x9a\x67\x4b\xdb\xd7\xd5\xb0\x30\xad\x0a\xa6\x6e\x64\x3f\x28\x69\x9f\x00\x53\x27\xcb\x04\x04\x84\x51\x4b\xeb\x97\x16\x7b\x87\x1b\x7f\xd5\x3e\xbe\x6e\x92\x2d\x2e\xad\x75\x27\x01\xd5\x9c\x86\x70\x5b\x60\x3e\x00\x5b\x04\x29\x15\x06\x7a\xaa\xf1\xf7\x2b\x88\x82\xcc\x0d\x52\x6d\xb2\x91\x6a\x3c\x84\xd0\x0e\x6e\xb2\x07\xb5\x9d\x08\x3d\x83\x6c\xc0\xe7\x20\xcb\x06\x8b\x1f\xf7\x75\x76\xcc\xbf\xb4\xb6\x78\x16\x45\x82\xc6\x66\x96\xa8\x32\x59\xba\xf2\x85\xa3\xdc\x1f\x79\xfd\x04\xde\xfc\x7e\x01\x6b\xb9\xcc\x08\x66\xae\xb6\xc0\x76\x80\x39\xac\x6d\x3f\xee\xaf\x99\xc1\x2a\xcc\x4a\x3c\x52\x22\x77\xb4\xac\x38\xdc\x8c\x61\x79\x0e\x2b\x10\xaa\x00\x7d\x68\x88\xe7\x78\x00\x34\x94\x61\x29\x99\x88\xe7\xdc\xd1\x72\x57\x53\x31\x29\xf7\xc7\xb4\x71\x28\x5f\x71\x7f\xde\x4e\xc5\x9e\x2a\x5d\xe6\x7d\xf4\x63\x20\x2f\x1a\x2a\x82\x54\x79\x89\x07\xc8\x9a\x54\x02\x26\x21\xed\xe6\x65\x9f\xa2\xbd\xda\x3a\xaf\xeb\xe1\x4e\x31\xd3\xea\x66\xa4\x2e\x89\xd0\xe4\xe1\x93\x6f\x48\x3d\x52\x69\x8a\xdd\x56\xf8\x84\xe4\x58\xae\xfa\xc5\x0a\xcb\xa9\xf3\xca\x59\xa7\x40\xec\x6a\xdf\x0c\xe6\x91\xab\xc2\x55\x39\x37\x89\xe6\x85\xed\x56\x23\xd7\x64\xbc\xfd\xa7\x04\xbd\xae\x1f\xe1\xb7\xb3\x27\xf8\xef\xad\xf1\xc9\xe9\x39\xce\xa6\x33\x97\xdc\x77\x23\x93\xb9\xd9\xd3\xd9\xea\xe9\x74\xf2\x4e\x3b\x35\x99\x6b\x59\xe2\x01\xcf\xdf\xc3\x7e\x5c\x9b\x96\xb1\xd5\x3c\x4e\x66\xae\x5b\xb4\xe6\xb9\x37\x63\xb8\xd5\x8e\x5d\xde\x16\xc0\x5e\x3b\xb8\x5b\x56\x68\x0b\x61\xee\x27\x50\xab\xd2\x42\xf7\xed\x7e\x82\x3e\xdb\xd6\x4e\x0f\x43\xa3\x64\xa1\xb8\xb4\xb0\x87\xb1\xab\xdb\x44\x97\x7c\x8c\xfe\xad\x89\xb0\xcc\xad\xa6\xfa\x12\xc9\x7d\x03\x36\x99\xda\x75\x52\x93\x89\xeb\xae\x68\x3a\xbd\xef\x6b\x26\x93\xbb\x66\x65\x32\xb1\x4f\xfc\xc9\xd4\x0c\xe2\x32\x9b\x4c\x1d\x7f\xff\xdd\x74\xf7\xa4\x5c\xa0\xf7\xa7\x03\x37\xae\xc0\x25\x30\x9d\x81\x71\x0d\x89\xe5\xab\x1d\x96\x11\x9e\x30\x16\x58\xb4\xc3\x1c\xef\x3f\xd8\x45\x54\x7e\xa8\x86\x3e\x34\x9a\x85\x49\xfa\xc7\x65\xd9\x75\x01\x23\xa2\xf6\x96\x85\x61\x22\xd6\x86\x4f\x33\xc9\xe7\xc5\x84\x7e\xf0\x7e\x62\x4a\x4e\x90\x77\xa3\x34\x13\x78\x56\x7c\x29\x79\xee\xcb\x46\x15\x36\x5f\x4a\xa2\x55\xef\xc0\xd5\x9a\x2f\x2b\x70\x10\xe3\x1d\x91\xea\x3e\xae\x4c\x8d\x6a\x77\x2f\xc6\x3e\x5a\xec\xa6\xce\xc1\xbc\x19\xa5\xa5\x4c\xdc\xc5\x9a\x78\xbc\xaf\xe1\xc6\x5f\x29\x5f\x55\x58\x8f\x8e\xc9\x07\xdf\x7b\x60\x47\x5f\x6a\x59\xbf\xb8\x5f\xe0\x62\xd3\x04\xcf\xc8\x87\x4f\x27\xdb\x49\x06\x29\x2d\x85\xbd\xae\xb7\xea\x96\x3b\x5d\x57\x00\x92\xa2\x1e\x86\x0b\x56\x97\xb0\xe5\x6c\x0b\x71\x92\xaf\x53\x0e\xc2\x91\x05\xd7\xee\x35\x18\xd0\xe1\xe7\x1d\x41\x3d\x31\x44\xd3\x04\xa9\xa3\x43\xb3\x48\x46\x35\x1b\xa2\xc3\x7b\x12\x58\x9e\xc3\x75\xe1\x3e\x87\x79\x72\x37\x75\x85\x53\x6f\x0a\x67\x1d\x2a\x86\xd8\xb6\x20\xa9\xe8\x10\xc4\x6b\x0b\xd7\x54\x6b\xba\xbe\x46\x1f\x60\xbb\x6d\x2b\xa1\xae\x94\xb5\xe9\x9a\x50\xd8\x35\x54\x83\xbc\x6f\x62\xbf\xe8\x62\xfb\xba\x3e\x13\x87\xd6\x37\x91\x3a\xbe\xfa\x59\x76\xe7\xc3\x6a\x75\xeb\xa4\x83\xea\xef\xa7\xd3\x83\x5e\xd8\x5c\xfa\xa0\x79\x81\x95\xeb\x62\x13\x72\x47\x78\x87\xb0\xbf\xe1\x71\x78\x42\xfc\x99\x78\x49\x35\xcd\x4d\xfd\xf2\xfb\x8b\x4a\xe7\x23\x93\xe0\xc5\xe7\x84\x3c\x72\x57\x00\x7c\xf8\x86\xa3\x79\x36\x1c\x8f\x84\x4a\xfc\xc7\x1f\x3f\xcc\x4e\x1c\x97\x23\x2a\x79\xfc\x4a\x31\x2a\x9a\x20\xad\x84\xcd\xbc\x82\x2b\xc8\x0b\x81\x2e\x34\x64\x31\x32\xff\xf1\x23\xee\xed\x74\x9c\xf1\xaf\xc0\x6f\x2d\xf8\x9b\x2c\xb6\x0e\x1b\x4e\x6e\x8c\x1a\xcb\xf1\x7a\x3c\x52\x04\xdc\x37\xd8\xe0\xb4\xba\x36\x60\x97\x41\xea\x79\x44\x36\x9c\x73\x15\x28\x9e\x92\xa3\x96\xe1\xc8\xe3\xc7\x1b\x18\xad\xe9\x59\x2d\xec\xb8\x15\x40\x5b\xf9\x03\x84\xa7\xb5\x13\x37\x68\x78\x9e\x78\x4a\x6e\x7f\x74\x68\xda\x50\x5a\xce\xdc\x08\xef\x7b\xac\x72\x48\xe3\x8a\x93\x46\xf9\x36\xa4\xba\x81\xdd\xc4\xf5\x6b\x9a\x83\x79\x46\x64\x29\x44\x37\xfa\x7c\xde\x61\x6a\x5f\xfa\x4c\x1c\x25\x73\x19\x76\xee\x12\xec\xa2\xc9\xaf\x41\xd2\x4f\xc7\xb5\xdd\x6b\x17\xc7\xfd\x2d\xe2\xd6\x9b\x50\x3e\x6a\xdb\xb0\x3e\xf0\xd0\x38\x55\x58\xf4\x9c\x83\x49\x30\x9c\x03\xcf\x95\x84\x96\xd9\x18\xbe\xfe\xaf\x39\xd0\x8b\x9a\xf6\x96\x06\x82\x61\x9b\x1c\x3b\x86\xe9\xec\xb4\xb9\xeb\xe4\x8a\x95\x02\x8e\x0e\xeb\x2f\xbe\x87\xc7\x33\x4f\xb3\xad\x33\x47\x87\x3e\x88\xce\x6b\x2f\x7b\x68\x17\x56\x8b\xc3\x13\x32\xbc\x30\x26\xe1\x02\x8f\xb8\x9f\xfd\x11\xb5\x23\x63\x60\x69\x4c\xca\x55\x73\x10\xee\x08\xd9\x5d\xb9\x53\xc6\x08\x94\xa1\xb5\x31\x39\x7f\x60\x83\xf3\x12\x1b\x9c\x1d\x21\x3b\x0b\x68\xf9\x6d\xa5\x9e\x47\xd5\xff\xe4\xfc\x1b\x00\x00\xff\xff\xfe\xb9\x78\x1c\xda\x19\x00\x00")

func staticx_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_index_html,
		"staticx/index.html",
	)
}

func staticx_index_html() (*asset, error) {
	bytes, err := staticx_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/index.html", size: 6618, mode: os.FileMode(420), modTime: time.Unix(1446870296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticx_partials_index_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x6e\xdb\x30\x0c\x3d\x37\x5f\xc1\x69\x18\xb0\x01\x73\xbd\xee\xd6\xd6\xf1\x7d\x87\x15\xbb\xed\x38\xc8\x36\x63\x09\x95\x25\x43\xa2\x9b\x06\x41\xfe\x7d\x94\xe4\x38\x69\x87\x22\x3b\x35\x40\x64\x49\xe4\xe3\x7b\x22\x45\x55\xce\x80\xed\x0b\xbd\x59\x0b\x6d\x3b\x7c\x7e\x90\x03\x86\x6b\x83\xb6\x27\x25\x56\xc0\xbf\xd6\xc8\x10\xd6\xa2\xf1\x28\xbb\xd6\x4f\x43\x23\x6a\xde\xaf\x8c\xae\xab\x30\x4a\x7b\xb4\xf7\x66\x37\x2a\xdd\x3a\x0b\xcb\xac\x68\x9c\x7b\x14\x75\x55\xb2\xef\x11\x22\x41\x79\x64\xb2\x8f\xa2\xfe\x11\xf9\x30\x54\xa5\x9c\x5d\xaa\xd2\x99\x7a\xb5\xaa\x3a\xfd\x14\x35\x05\xe5\xb6\x6b\x81\xde\x3b\xff\x13\x43\x90\x3d\x8a\x23\x99\x34\xe8\x09\xd2\x58\x74\xd2\xf6\xe8\x23\xa0\x35\x4e\x3e\x0a\xf0\xce\xe0\xec\x92\xa4\xee\xf7\xe7\x31\x0e\x07\xe6\x61\x86\x48\x44\xb2\x31\x78\xe1\xf8\xa7\x0c\x64\xef\x34\x16\x81\xbc\x1e\xb1\xe3\xf8\x57\x15\x79\x1e\xf9\xa3\x60\xab\x3b\x52\x6b\x71\x7b\xfb\x49\xd4\x31\x52\x55\x92\x9a\x6d\xf5\x3c\xe7\x8f\xcf\xa0\xc8\xeb\x71\x44\x49\x67\xdc\xa0\x2d\x9c\x84\x88\x0c\xee\x4e\x69\x2b\x75\x4e\x5a\xb9\xdf\x2f\x6e\x87\x83\xa8\x5f\x2c\x73\x46\x19\x96\xd1\x10\x68\x17\x33\xb2\x55\x9a\x58\xf9\x28\x5b\xbc\x03\xeb\xb6\x5e\x8e\xf7\x89\xe1\xaa\x6a\x26\x22\xae\x5c\xca\xa1\x6e\x1f\x39\xeb\x9d\xa6\x54\x9f\xcf\x4b\xdc\x2f\x22\xba\xc2\xf1\x47\xbb\x91\x63\x66\xe0\x52\x97\x86\x2c\xf0\xbf\xe8\x70\x23\x27\x43\x69\x1e\x86\x4c\x72\x75\xf1\xba\x44\xd2\x78\x5d\xa2\x5f\x0d\x71\x95\xc4\x95\x99\xe4\x0d\xa5\x5c\x74\x8b\xef\x2e\x75\x34\x53\x28\x82\xee\xed\x49\x6f\x12\xf2\x1f\x82\x3b\x34\x48\xef\xaf\x98\xbc\x0c\x6a\x51\xfb\x5a\xe7\x7c\x5d\xf2\xed\xe4\x31\x5e\xf2\xb3\x56\x8c\xfd\xf1\xe1\xad\x06\x99\x49\x93\xf9\x37\x9a\xd6\x0d\x98\x9f\x08\x75\x53\xcf\x6b\x20\x07\x6d\xb3\xa1\xaa\xe4\xbd\x68\x8a\x0d\x18\x37\x40\x07\x90\xb0\x99\x8c\x29\x08\x9f\x09\x02\xfa\x27\x6e\xe6\x8d\xf3\xd0\xba\xa9\x55\x8d\x0c\x08\x9d\x24\x79\x3d\x37\xed\x8c\xfd\x65\x30\x59\x70\xa3\x2d\xc2\xce\x4d\x8c\xd1\x3e\x50\x6e\x1e\x6e\x44\xee\x46\x52\x08\x0f\xb8\x85\x94\x6a\xc8\x67\x3d\x86\x59\x9e\x80\x78\xc0\xe5\x00\xe3\x44\x45\xef\xdd\x34\x66\xfd\xff\x34\xdd\x1f\x8b\xdb\x64\x62\xe3\x5c\xd7\xd7\xc5\x19\xbd\x1e\xa4\xdf\x89\xb9\x84\x61\x6a\x06\x4d\x33\x86\x51\xfa\xd2\xa5\x8a\x15\xd2\xf5\x49\x77\x26\x5b\x2a\x15\xe7\xf2\x4c\x7e\x6a\xed\x7a\x75\x7d\x9e\x7c\x50\x37\x5f\xe1\xe5\x4e\x3c\xe5\x9e\xc1\x2c\xad\xd7\xf1\x5d\xe6\x68\xc3\x1d\x7c\xff\x36\x3e\xdf\xaf\xe2\x83\x98\xe3\xfc\x0d\x00\x00\xff\xff\x52\x12\x88\xe9\x0d\x06\x00\x00")

func staticx_partials_index_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_staticx_partials_index_list_html,
		"staticx/partials/index/list.html",
	)
}

func staticx_partials_index_list_html() (*asset, error) {
	bytes, err := staticx_partials_index_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "staticx/partials/index/list.html", size: 1549, mode: os.FileMode(420), modTime: time.Unix(1443737395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticx/css/cbft.css":             staticx_css_cbft_css,
	"staticx/index.html":               staticx_index_html,
	"staticx/partials/index/list.html": staticx_partials_index_list_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"staticx": &_bintree_t{nil, map[string]*_bintree_t{
		"css": &_bintree_t{nil, map[string]*_bintree_t{
			"cbft.css": &_bintree_t{staticx_css_cbft_css, map[string]*_bintree_t{}},
		}},
		"index.html": &_bintree_t{staticx_index_html, map[string]*_bintree_t{}},
		"partials": &_bintree_t{nil, map[string]*_bintree_t{
			"index": &_bintree_t{nil, map[string]*_bintree_t{
				"list.html": &_bintree_t{staticx_partials_index_list_html, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
